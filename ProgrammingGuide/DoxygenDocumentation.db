<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ProgrammingGuide/DoxygenDocumentation</title><revhistory><revision><revnumber>4</revnumber><date>2010-01-11 08:51:41</date><authorinitials>AmosJeffries</authorinitials><revremark>strip obsolete commented text</revremark></revision><revision><revnumber>3</revnumber><date>2009-04-21 15:49:07</date><authorinitials>FrancescoChemolli</authorinitials><revremark>function template also applies to class members</revremark></revision><revision><revnumber>2</revnumber><date>2009-04-17 09:29:52</date><authorinitials>AmosJeffries</authorinitials><revremark>see discussion for whats changed and why.</revremark></revision><revision><revnumber>1</revnumber><date>2009-04-15 08:32:40</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Proposal of documentation standard.</revremark></revision></revhistory></articleinfo><section><title>Doxygen documentation guidelines and standards</title><para>This is a <emphasis role="strong">proposal</emphasis> for a standard Doxygen documentation format and template. The aim is to allow documentation writers to focus on documentation and not on Doxygen format and semantics, and to help them not to get in the way of code readability. </para><section><title>Entities to be documented</title><para>There are several types of entities to be documented: <emphasis role="strong">types</emphasis>, <emphasis role="strong">variables</emphasis> (both global and members),  <emphasis role="strong">classes</emphasis>, <emphasis role="strong">class methods</emphasis>, <emphasis role="strong">functions</emphasis>, and <emphasis role="strong">components</emphasis>. </para><glosslist><glossentry><glossterm>Types</glossterm><glossdef><para>should only be documented with be brief one-liner if possible. </para></glossdef></glossentry><glossentry><glossterm>Variables</glossterm><glossdef><para>should be documented at their point of declaration. Inside the class for members, the .h for public globals, or the .cc for private globals. </para></glossdef></glossentry><glossentry><glossterm>Classes</glossterm><glossdef><para>should be documented in their respective header file, just before their declaration. </para></glossdef></glossentry><glossentry><glossterm>Class Methods</glossterm><glossdef><para>should be documented inside the class where they are declared. Must have named parameters identical to those used in the .cc </para></glossdef></glossentry><glossentry><glossterm>Functions</glossterm><glossdef><para>should be documented in the .h when declared in one. Functions only declared <emphasis>privately</emphasis> in the .cc should be documented in the implementation file, before their respective body. Must have named parameters identical to those used in the .cc </para></glossdef></glossentry><glossentry><glossterm>Components</glossterm><glossdef><para>Includes additional documentation information, such as component API object groups, and component state flow diagrams etc, this documentation has more complex requirements. see below </para></glossdef></glossentry></glosslist></section><section><title>Documentation format</title><para>Use c-style comments, prepending each line with an asterisk, and latex-style commands. Each block should be divided in sections, separated by an empty line. Start each block with a brief description. E.g.: </para><screen><![CDATA[/** Brief description goes here (single-line, less than 78 chars)
 *
 * Long description. May span multiple lines. Avoid repeating the brief
 * description if possible, leave empty if the brief description is
 * sufficient to document the documented entity's purpose, preconditions,
 * side-effects etc.
 *
 * \command arguments etc. May span multiple lines
 * \command arguments group commands by type
 * \othercommand arguments etc.
 *
 * \yetanothercommand some entities may require more than one documentation block
 */]]></screen></section><section><title>Templates</title><para>All commands are really optional, but when used PLEASE group them as here shown. Square brackets show optional arguments, ellipses (...) mark optional repetitions. <emphasis role="strong">DO NOT</emphasis> use HTML formatting codes (or any kind of formatting code for that matter). Stick to the basics. </para><para>The only special code to be possibly used is lists, which use syntax </para><screen><![CDATA[ - unordered list item 1
 - unordered list item 2
 - unordered list item 3]]></screen><para>or </para><screen><![CDATA[ -# numbered list item 1
 -# numbered list item 2
 -# numbered list item 3]]></screen><section><title>Class documentation template</title><screen><![CDATA[/** Class handling activity X
 *
 * This class handles activity highly-critical asynchronous activity X.
 * It needs to be registered in registry Foo from the main entry point X.
 * After that it will respond to events Bar and possibly invoke Gazonk.
 *
 * \ingroup ParentGroupLabel
 */]]></screen></section><section><title>Function / Class Method documentation template</title><screen><![CDATA[/** Function handling activity Y
 *
 * This function does activity Y, requiring blah blah blah.
 * End with an empty line.
 * [\note particular informations]
 *
 * \param paramName paramDesc
 * ...
 * \return returnValueDesc
 * \retval special-return-value return-value-desc
 * ...
 * \throw exceptionName exceptionCondition
 * ...
 * \pre precondition(s)
 * ...
 * \post postcondition(s)
 * ...
 *
 * \warning bad behaviour in unexpected cases
 * ...
 * \bug unexpected behaviour when
 * ...
 * \deprecated from version X, use otherCall instead
 * \todo if the function needs changing
 * ...
 * \see otherReferences
 */]]></screen></section></section><section><title>Component Documentation</title><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> For simplicity, its not worth doing much component documentation until after the <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/Features/SourceLayout#">Features/SourceLayout</ulink> alterations have been done to a component. After which the following applies... </para></listitem></itemizedlist><para>Each component in squid is going to be in its own library. Documentation for the component should be included in the src/subfolder for that library. The sections which must be included are: </para><glosslist><glossentry><glossterm>API</glossterm><glossdef><para>this is the definition of the component <emphasis>group</emphasis> for collating the classes, functions, and globals provided. Followed by an overview of the library API and how it should be used. Do not include details of specific functions, their docs will cover that. </para></glossdef></glossentry><glossentry><glossterm>Component Flow</glossterm><glossdef><para>high-level abstracted description of what the state flow around this component is meant to be, and a definition of the internals group. </para></glossdef></glossentry></glosslist><section><title>Component Documentation template</title><para>The component documentation being much longer and more detailed than most may be written in detailed doxygen format using features such as sections and headers. Here is a template for such a component: </para><screen><![CDATA[/**
\defgroup ComponentName Component Name
]]><![CDATA[
\defgroup ComponentNameAPI Component Name API
\ingroup ComponentName
]]><![CDATA[
\section Terminology Terminology
]]><![CDATA[
- \b Foo: this is a glossary section for component-specific terms.
- \b Blah: a blah is a fake word used in this documentation.
- \b Foo:  another fake word, usually representing something
]]><![CDATA[
]]><![CDATA[
\section API API overview
]]><![CDATA[
Very abstracted overview description of the API.
Should be enough for someone to understand the API and be able to find
the specific functions they want for more detailed documentation.
]]><![CDATA[
Do not repeat or go into details covered by any function documentation.
]]><![CDATA[
]]><![CDATA[
\defgroup ComponentNameInternals Component Name Internals
\ingroup ComponentName
]]><![CDATA[
\section StateFlow State Flow
]]><![CDATA[
Detailed description of any state low that may occur.
For example the protocol components contain a high-level sequence
of request states and the output reply states that those requests may become.
This section may even have links to flow diagrams and other more complicated stuff
]]><![CDATA[
It's a long description. May span multiple lines and paragraphs. Avoid repeating stuff
if possible use references or object by exact Class::someMethod(char *p) declaration
of if you really have to use \include Class::someMethod(char *p) to pull that objects
docs in cleanly.
]]><![CDATA[
 */]]></screen><para>This is all written up in a *.dox file inside the component sub-folder. </para><!--rule (<hr>) is not applicable to DocBook--><itemizedlist><listitem override="none"><para>Discuss this page using the &quot;Discussion&quot; link in the main menu </para></listitem></itemizedlist><para>See <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/ProgrammingGuide/DoxygenDocumentation#">Discussed Page</ulink> </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C1"/> </para><para>Thanks Kinkie, I should have added this to the wiki long ago. You seem to have covered a fair chunk of what I wrote up last year. </para><para>I've made a few alterations that need to be noted: </para><itemizedlist><listitem override="none"><para>There is a distinct difference between class members and functions. As a general rule everything needs to be documented at the point of declaration. This helps casual readers not have to wade through the long .cc for details of an object they found in a .h file. I've found very little use for brief descriptions. Each object varies in whether or not it suites a long or brief, and the code docs do not need to distinguish by forcing extra doc lines. Doxygen seems to be smart enough to identify a description to long to be brief. Both functions and methods need to have any named parameters be identical in their declaration as in their definition. That includes adding to the declaration where missing. </para><para>The use of <code>\addtogroup</code> are not useful on a per-class basis. Each class should have a 1-1 relationship with the component API its part of. So the group definitions can be entirely outsourced to the component.dox files which contains the API high-level documentation. </para><para>The use of <code>\see</code> is likewise very little utility. The auto-docs generate references, referenced-by, called-by, and smart links for everything that is directly related. Component-Level documentation (component.dox files) are a whole other beast entirely than short clean code documentation. Feel free to move that description or make a better template. </para><para>The new <code>\cpptest</code> tag. Format is intended to allow smart-tags to kick in. I'm not sure how to document that at present. </para><para><code>\bug</code> and <code>\todo</code> really needs to be documented in the code where the bug/todo exists. They are usually part of a code-path that the developer has no time for completing in current work scope and are very code-line specific. </para></listitem></itemizedlist><para><ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/AmosJeffries#">AmosJeffries</ulink>  2009-04-17 21:26 </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C2"/> </para><para>Entities terminology needs to be polished to be correct from C++ point of view and to be more consistent/natural. Here is a step towards that direction: </para><section><title>Entities to be documented</title><para>There are several types of entities that must be documented, including <emphasis role="strong">components</emphasis>, <emphasis role="strong">globals</emphasis> (including types, classes, and global variables), and <emphasis role="strong">members</emphasis> (including class methods and data members). </para><glosslist><glossentry><glossterm>Components</glossterm><glossdef><para>Includes additional documentation information, such as component API object groups, and component state flow diagrams etc, this documentation has more complex requirements. see below </para></glossdef></glossentry><glossentry><glossterm>Globals</glossterm><glossdef><para>should be documented where they are declared, just above or to the left of their declaration. Use the shortest sufficient description to document the purpose of the global. </para></glossdef></glossentry><glossentry><glossterm>Members</glossterm><glossdef><para>should be documented where they are declared. Use the shortest sufficient description to document the purpose of the global. Method definitions may have more detailed, expanded documentation.  </para></glossdef></glossentry></glosslist><para>-- <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/AlexRousskov#">AlexRousskov</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2009-04-28 21:03:12' which caused the docbook-formatter to choke. Please file a bug.--> </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C3"/> </para><para>C++ comments (/// and ///&lt;) should be allowed and <emphasis>encouraged</emphasis> for one-line descriptions, IMO. </para><para>-- <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/AlexRousskov#">AlexRousskov</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2009-04-28 21:05:38' which caused the docbook-formatter to choke. Please file a bug.--> </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C4"/> </para><para>FWIW, I am strongly against the proposed &quot;Function / Class Method documentation template&quot;. It is too verbose and yet useless in most cases. The documentation should help the developer understand the code, not duplicate the code in English. In-source documentation should be concise and supply new information that is not readily available from the next line of code. We should not document what the code already says, loud and clear. For example, correct types and good parameter names are usually sufficient for parameter documentation. </para><para>-- <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/AlexRousskov#">AlexRousskov</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2009-04-28 21:13:41' which caused the docbook-formatter to choke. Please file a bug.--> </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C5"/> </para><para>The template states (and if it doesn't, it should) that almost all clauses are optional. Everything else is (for good and bed) left to the good sense of the documentor. I'm not fully with you in saying that it should not replicate what the code says, as repeating it in english allows the docuemntor to state the contracts (explicit or implicit) that the code obeys to, or should obey to, allows for cross-referencing, and can be extracted to a separate document. I agree that in most cases the code is more accurate than the documentation, and thus unless otherwise stated it takes precedence. </para><para>Please remind that the main purpose for the template is to avoid the documentor the hassle of having to actually _learn_ doxygen, replacing this for a 'copy,paste'n edit' approach. </para><para>-- <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/FrancescoChemolli#">FrancescoChemolli</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2009-04-28 22:22:42' which caused the docbook-formatter to choke. Please file a bug.--> </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C6"/> </para><screen><![CDATA[almost all clauses are optional. Everything else is left to the good sense of the documentor. ]]></screen><para>Until we get skillful documetors on board, I do not think it is a good idea to present a 30-line template and hope that the documentor will come to her senses and cut most of the stuff out when documenting a simple 5-line function. At least that is not a good idea unless your goal is to get patches where every method is prefixed with 30 lines of mostly useless comments based on a copy-pasted template. </para><para>If we provide templates, let's provide the minimum one-line template and then document what can be added, with elaborate examples if needed. Like you, I do not want the documentor to learn Doxygen. However, I am more concerned about the reviewer who may have to tell the documentor that 1000 lines of painfully detailed comments and copy-pasted templates should be removed. It is much easier to suggest that a few missing details are added than to ask that the results of the hard work should be removed. </para><para>FWIW, the one-line template may look like this: </para><screen><![CDATA[/// One-line description of effect, without restating the function name in English. 
functionName()
{
  ...
}]]></screen><para>-- <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/AlexRousskov#">AlexRousskov</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2009-04-29 22:08:31' which caused the docbook-formatter to choke. Please file a bug.--> </para><!--rule (<hr>) is not applicable to DocBook--><para> <anchor id="C8"/> </para><screen><![CDATA[Until we get skillful documetors on board, I do not think it is a good idea to present a 30-line template and hope that the documentor will come to her senses and cut most of the stuff out when documenting a simple 5-line function.]]></screen><para>At this time it's not really a problem, as I'm the only one actively working on this. </para><para>I agree that also suggesting a one-line template is a good idea. But I would also like that when a more complex documentation is needed, then all instances follow the same layout and general structure. Least-surprise principle.. </para><para>For a practical example of how it may end up looking like, please see <ulink url="http://bazaar.launchpad.net/~kinkie/squid/documentation/annotate/head%3A/src/ip/IpAddress.h"/> . </para><para>-- <ulink url="https://wiki.squid-cache.org/ProgrammingGuide/DoxygenDocumentation/FrancescoChemolli#">FrancescoChemolli</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2009-04-30 07:11:28' which caused the docbook-formatter to choke. Please file a bug.--> </para></section></section></section></section></article>