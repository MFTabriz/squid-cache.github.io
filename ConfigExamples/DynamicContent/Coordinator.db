<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ConfigExamples/DynamicContent/Coordinator</title><revhistory><revision><revnumber>16</revnumber><date>2021-07-03 11:26:58</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>15</revnumber><date>2013-10-27 20:07:18</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Fixed dangling wikilink</revremark></revision><revision><revnumber>14</revnumber><date>2012-07-13 20:21:06</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>13</revnumber><date>2012-07-13 20:19:45</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>12</revnumber><date>2012-07-13 20:02:47</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>11</revnumber><date>2012-07-13 19:55:09</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>10</revnumber><date>2012-07-13 17:34:27</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>9</revnumber><date>2012-07-13 17:28:29</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>8</revnumber><date>2012-07-13 17:27:06</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>7</revnumber><date>2012-07-13 17:26:23</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>6</revnumber><date>2012-07-13 16:05:13</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>5</revnumber><date>2012-07-13 15:20:08</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>4</revnumber><date>2012-07-13 14:47:04</date><authorinitials>AlexRousskov</authorinitials><revremark>Avoid the term &quot;Coordinator&quot;, especially in titles, because it is the name of one of Squid SMP processes.</revremark></revision><revision><revnumber>3</revnumber><date>2012-07-13 05:12:21</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>2</revnumber><date>2012-07-13 05:08:27</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>1</revnumber><date>2012-07-13 05:07:18</date><authorinitials>Eliezer Croitoru</authorinitials></revision></revhistory></articleinfo><section><title>Caching Dynamic Content using Adaptation</title><para><emphasis role="strong">Warning</emphasis>: Any example presented here is provided &quot;as-is&quot; with no support or guarantee of suitability. If you have any further questions about these examples please email the squid-users mailing list. </para><para> This page is an ongoing development. Not least because it must keep up with youtube.com alterations. If you start to experience problems with any of these configs please first check back here for updated config. </para><section><title>Problem Outline</title><para>Squid since old days till today <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/Coordinator/Squid-3.2#">Squid-3.2</ulink> use The URL *as* the resource key. It has been and remains the fundamental design property of HTTP.  this approach based on the assumption that each GET request of a URL should identify one and  only one resource. dynamic content should be sent based on user data in a POST request. as defined in <ulink url="http://tools.ietf.org/html/rfc2616">rfc2616</ulink> <ulink url="http://tools.ietf.org/html/rfc2616#section-9.3">section 9.3 for GET</ulink>  and <ulink url="http://tools.ietf.org/html/rfc2616#section-9.5">section 9.5 for POST</ulink> </para><para>9.3 &quot;The GET method means retrieve whatever information (in the form of an entity) is identified by the Request-URI.&quot; </para><para>9.5 &quot;The POST method is used to request that the origin server accept the entity enclosed in the request as a new subordinate of the resource identified by the Request-URI in the Request-Line.&quot; </para><para>The rfc states the specification of the protocol but it's in developers\webdesigners to enforce it.  </para></section><section><title>What is Dynamic Content</title><para>one URL that can result in more then one resource.( one to many ) </para><itemizedlist><listitem override="none"><para>Dynamic content is about the entity resource being generated on request.  The usual result of that is an entity which varies with each request and contains request-specific information.  eg web pages which contain the name of the user logged in and requesting it.  </para></listitem></itemizedlist><para>some of the reasons for that: </para><itemizedlist><listitem><para>The result of a live content feed based or not on argument supplied by end user. </para></listitem><listitem><para>a CMS(Content Management System) scripts design. </para></listitem><listitem><para>bad programing. </para></listitem><listitem><para>Privacy policies. </para></listitem></itemizedlist></section><section><title>File De-Duplication\Duplication</title><itemizedlist><listitem><para>two urls that result the same identical resource.( many to one ) </para></listitem></itemizedlist><para>some of the reasons for that: </para><itemizedlist><listitem><para>a temporary URL for content access based on credentials. </para></listitem><listitem><para>bad programing or fear from caching </para></listitem><listitem><para>Privacy policies </para></listitem></itemizedlist><para>There is also the problem of content copying around the web.  For example: how many sites contain their own copy of &quot;jQuery.js&quot; ? images, icons, scripts, templates, stylesheets, widgets.  All these things have much duplication that reduces cache efficiency. </para></section><section><title>Marks of dynamic content in URL</title><para>squid applies a refresh pattern acl on <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/Coordinator/ConfigExamples/DynamicContent#">Dynamic Content</ulink> marks in the URL such &quot;?&quot; and &quot;cgi-bin&quot; by default.  <ulink url="http://www.squid-cache.org/Doc/config/refresh_pattern#">refresh_pattern</ulink> </para><screen><![CDATA[refresh_pattern -i (/cgi-bin/|\?) 0 0% 0]]></screen><para>NOTE: the only reason these should not be cached is that old CGI systems commonly do not send cache-control or expiry information to permit safe caching. Same goes for the &quot;?&quot; query string scripts. The refresh_pattern directive is specifically used so that dynamic content responses which *do* contain sufficient cache control headers *are* cached. </para><section><title>&quot;?&quot;</title><para>question mark append to the URL is used to pass arguments to a script and can represent &quot;Dynamic Content&quot; page that will vary by the arguments. the url: &quot;<ulink url="http://wiki.squid-cache.org/index.html?action=login"/>&quot; will pass to the argument &quot;action=login&quot; to the wiki server and will result a login page. if you will send an argument to a static html file such as: &quot;<ulink url="http://www.squid-cache.org/index.html?action=login"/>&quot; the result is just a longer url. many CMS like Wordpress use question mark to identify a specific page\article stored in the system. (&quot;/wordpress/?p=941&quot;) </para></section><section><title>CGI-BIN</title><para>many systems use CGI to run a script on a server that will result html output or not. i wrote a simple CGI script that shows the public ip address used to contact my server: <ulink url="http://www1.ngtech.co.il/cgi-bin/myip.cgi"/> this script result will vary for each user by the server and shouldn't be cached. There is a convention about CGI scripts to run under &quot;cgi-bin&quot; directory as a mark of live feed. </para><para>but insted exploting this convention the script authur can just add Cache specific headers to allow or disallow caching the resource. </para></section></section><section><title>HTTP and caching</title><para>Mark Nottingham wrote a very detailed document <ulink url="http://www.mnot.net/cache_docs/">&quot;Caching Tutorial for Web Authors and Webmasters&quot;</ulink> about cache  that i recommend to read. and also wrote a great tool to analyze cache headers of sites <ulink url="http://redbot.org/">RedBot</ulink><inlinemediaobject><imageobject><imagedata fileref="http://redbot.org/favicon.ico"/></imageobject><textobject><phrase>http://redbot.org/favicon.ico</phrase></textobject></inlinemediaobject> </para><section><title>HTTP headers</title><para>Else then the URL itself there are couple http headers that can affect the results of a request and there for cache. the http response can vary between clients by request headers like &quot;User-Agent&quot; &quot;Cookie&quot; or others. </para><para>its very common that &quot;User-Agent&quot; uses to identify the client software and response differently. it can distinct a mobile cell phone and a desktop or html format compatibility of a client. these headers can affect response language,content and compression. </para><para>cache specific headers can be used by a client to identify validity of current cached resource. the &quot;Expires&quot; and &quot;Etag&quot; can identify singes of expired cache resource. </para><para>To help cache efficiency the http headers and codes came for help. a cache can use a request with &quot;If-Modified-Since&quot; header and the server can verify for the client that the file hasn't changed &quot;Since&quot; with a &quot;304&quot; response code. vary of headers can assist in this situation. </para><para>Common request headers are: </para><screen><![CDATA[User-Agent:
Accept-Language:
Accept-Encoding:
Cookie:
If-Modified-Since:
If-None-Match:]]></screen><para>Common response headers are: </para><screen><![CDATA[Cache-Control:
Expires:
Accept-Ranges:
Transfer-Encoding:
Vary:
Etag:
Pragma:]]></screen></section><section><title>HTTP 206\partial content</title><para>Squid has not been caching range responses. but there are other software that do offer that. </para></section></section><section><title>Dynamic-Content|Bandwidth Consumers</title><para>If you will look at some ISP\office graphs you will see that there is a pattern that shapes the usage graphs. Software updates and videos content are well known bandwidth consumers. Some are cache friendly while others not. </para><para>Squid developers tried before to reason youtube being more cache friendly but it got into a dead end from youtube side. </para></section><section><title>Specific Cache Cases analysis</title><para>File De-duplication  </para><itemizedlist><listitem><para>Microsoft updates </para></listitem><listitem><para>Youtube video\img </para></listitem><listitem><para>CDN\DNS load balancing </para></listitem></itemizedlist><para>Real dynamic content   </para><itemizedlist><listitem><para>Facebook  </para></listitem></itemizedlist><section><title>Microsoft Updates Caching</title><para>The main problem with Microsoft updates is that they use 206 partial content responses that cannot be cached by Squid. some times the update file size is tens of MB and will lead to heavy load. a solution for that was proposed by Amos Jeffries at: <ulink url="http://wiki.squid-cache.org/SquidFaq/WindowsUpdate">SquidFaq/WindowsUpdate</ulink> in order to save maximum bandwidth force Squid into downloading the whole file instead of a partial content using:  </para><screen><![CDATA[range_offset_limit -1 
quick_abort_min -1]]></screen><para><ulink url="http://www.squid-cache.org/Doc/config/range_offset_limit/">range_offset_limi</ulink> <ulink url="http://www.squid-cache.org/Doc/config/quick_abort_min/">quick_abort_min</ulink> </para><para>the problem is that these acls applies for the whole server and can result some software response bad while expecting a partial response. other then that a chunk of 1KB out of a 90MB file will result in a 90MB bandwidth waist. so it's up to the proxy admin to set the cache properly. </para></section><section><title>Youtube video\img</title><para>Pages are, and URLs are dynamically created, but they de-duplicate down to static video locations. Youtube serves video content requests by user to apply polices like &quot;allow only specific user\group\friends&quot; etc. A video will be served to the same client with different URL in matter of a second. most of the video urls has some common sense identity in the form of an arguments so it can be cached using a specific &quot;key&quot;. since squid mainly use the URL to identify the cache resource it makes cache admins life harder. and it doubled by the random patterns of videos URLs. </para><para>in the past there were couple attempts to cache them using the old <ulink url="http://www.squid-cache.org/Doc/config/storeurl_rewrite_program">&quot;store_url_rewrite&quot;</ulink> in Squid2.X. other solution was using the &quot;url_rewrite&quot; combined with Web-server mentioned at <ulink url="http://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube">ConfigExamples/DynamicContent/YouTube</ulink> </para></section><section><title>CDN\DNS load balancing</title><para>Many websites use CDN(Content Delivery Network) to scale their website. some of these are using same URL on other domain. one of the major opensource players that i can demonstrate with is <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/Coordinator/SourceForge#">SourceForge</ulink>. they have mirrors all over the world and they use a prefix domain to select the mirror like in: </para><screen><![CDATA[http://iweb.dl.sourceforge.net/project/assp/ASSP%20Installation/README.txt
http://cdnetworks-kr-2.dl.sourceforge.net/project/assp/ASSP%20Installation/README.txt]]></screen><para>so this is a case of Simple URL de-duplication. this scenario can be resolved easily by storing all the sub-domains under one &quot;key&quot;. kind of a pseudo for this: every subdomain of &quot;dl.sourceforge.net&quot; should be sotred as: &quot;dl.sourceforge.net.some_internal_key&quot;. and ruby example to demonstrate code for that: </para><programlisting format="linespecific" language="highlight" linenumbering="numbered" startinglinenumber="1"><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://iweb.dl.sourceforge.net/project/assp/ASSP%20Installation/README.txt]]></phrase><phrase><![CDATA["]]></phrase>
<methodname><![CDATA[key]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://dl.sourceforge.net.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.dl]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.sourceforge]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.net]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[(.*)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)[1]]]>
</programlisting><para>A similar scenario is with AV updates that will use more then one domain or will use IP address as a redundancy case that no dns available. </para></section><section><title>Facebook</title><para><emphasis>Facebook</emphasis> is another subject for Bandwidth abuse but requires a second to think about it. As a cache admin you can see that Facebook is one of the top urls in the logs and reports. if you see a lot of urls on one domain it doesn't mean that it consumes bandwidth. Facebook has a &quot;History of violence&quot; like all social networks and not only in the sense of bandwidth. </para><para>one issue with Social Networks is &quot;Privacy&quot;. These networks produce a large volume of responses containing private data that when cached by an ISP can lead to &quot;Invasion of privacy&quot; </para><itemizedlist><listitem><para>a case i have seen is that in a misconfiguration on a cache people started getting Facebook and gmail pages of other users. </para></listitem></itemizedlist><para>Privacy is an issue that a cache operator should consider very deeply while configuring the server acls(refresh_pattern). since Facebook was declared worldwide they indeed made a lot of efforts to be cache friendly using &quot;Cache-Control&quot; and such headers. They use XML for updates with headers such as: </para><screen><![CDATA[Cache-Control: private, no-store, no-cache, must-revalidate]]></screen><para>they do you one CDN for video and IMG content at: </para><screen><![CDATA[http://video.ak.fbcdn.net/...]]></screen><itemizedlist><listitem><para>** &gt; add here code snip for video url rewriting </para></listitem></itemizedlist><para>but you must have a key arguments to access the video. for IMG they use &quot;many to one CDN&quot; like in: </para><screen><![CDATA[http://a6.sphotos.ak.fbcdn.net/...]]></screen><para>and you can replace the &quot;a6&quot; with a many to one &quot;key&quot;. </para><itemizedlist><listitem><para>** &gt; add here code snip for img URL rewriting </para></listitem></itemizedlist></section></section><section><title>Caching Dynamic Content|De-duplicated content</title><para>As i was describing the problem earlier for each of the scenarios we can offer a solution. </para><section><title>Old methods</title><para>Sites like youtube\CDNs atec made a problem needed to be solved quickly. these sites provides the internet with a huge amount of data that had no cache Friendly API. That is why old the old methods was developed quickly. </para><para>Amos Jeffries: That effort continues in a number of ways (headers Content-MD5, Digest:, Link:, etc). </para><section><title>Store URL Rewrite</title><para>In <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/Coordinator/Squid-2.7#">Squid-2.7</ulink> the <ulink url="http://www.squid-cache.org/Doc/config/store_url_rewrite#">store_url_rewrite</ulink> interface was integrated to solve a resource De-Duplication case. an example is sourceforge and it can implemented for youtube and others. </para><programlisting format="linespecific" language="highlight" linenumbering="numbered" startinglinenumber="1"><lineannotation><![CDATA[#!/usr/bin/ruby]]></lineannotation>
<token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[main]]></methodname>
<![CDATA[  ]]><token><![CDATA[while]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[ = ]]><token><![CDATA[gets]]></token>
<![CDATA[        ]]><methodname><![CDATA[request]]></methodname><![CDATA[ = ]]><methodname><![CDATA[request]]></methodname><![CDATA[.]]><methodname><![CDATA[split]]></methodname>
<![CDATA[     ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[[0]]]>
<![CDATA[        ]]><token><![CDATA[case]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[[1]]]>
<![CDATA[          ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.]+]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.dl]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.sourceforge]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.net]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[            ]]><token><![CDATA[puts]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[[0] + ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://dl.sourceforge.net.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ +  ]]><methodname><![CDATA[request]]></methodname><![CDATA[[1].]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.]+]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.dl]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.sourceforge]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.net]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[(.*)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)[1]]]>
<![CDATA[          ]]><token><![CDATA[else]]></token>
<![CDATA[            ]]><token><![CDATA[puts]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[[0] + ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[        ]]><token><![CDATA[end]]></token>
<![CDATA[     ]]><token><![CDATA[else]]></token>
<![CDATA[        ]]><token><![CDATA[puts]]></token><![CDATA[ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[     ]]><token><![CDATA[end]]></token>
<![CDATA[   ]]><token><![CDATA[end]]></token>

<token><![CDATA[end]]></token>
<symbol><![CDATA[STDOUT]]></symbol><![CDATA[.]]><methodname><![CDATA[sync]]></methodname><![CDATA[ = ]]><token><![CDATA[true]]></token>
<methodname><![CDATA[main]]></methodname>
</programlisting><para>this helper works with concurrency which in any case is better then plain rewritter without concurrency. </para><para>the performance of this helper is about 2.6 sec for 100,000 requests. what means about 2,000,000 requests per minute. to test it yourself you can do: </para><orderedlist numeration="arabic"><listitem><para>create a redirect file: </para></listitem></orderedlist><screen><![CDATA[head -100000 access.log | awk '{ print $7 " " $3"/-" " " $8 " " $6}' >/tmp/testurls]]></screen><orderedlist><listitem><para>do the test: </para></listitem></orderedlist><screen><![CDATA[time ./rewritter.rb < /tmp/testurls >/dev/null]]></screen><para>Pros:  </para><itemizedlist><listitem><para>simple to implement. </para></listitem></itemizedlist><para>Cons: </para><itemizedlist><listitem><para>works only with squid2 tree </para></listitem><listitem><para>The check is done based only on requested URL. in a case of 300 status code response the URL will be cached and can cause endless loop. </para></listitem><listitem><para>There is no way to interact with the cached key in any of squid cache interfaces such as ICP\HTCP\<ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/Coordinator/Features/CacheManager#">Cache Manager</ulink>, the resource is a GHOST. </para></listitem></itemizedlist><para>(I wrote an ICP client and was working on a HTCP Switch\Hub to monitor and control live cache objects) </para><itemizedlist><listitem><para>To solve the 300 status code problem a specific patch was proposed but wasn't integrated into squid. </para><itemizedlist><listitem override="none"><para>The 300 status code problem can be solved by ICAP RESPMOD rewriting.  </para></listitem></itemizedlist></listitem></itemizedlist></section><section><title>Web-server and URL Rewrite</title><para>In brief the idea is to use the url_rewrite interface to silently redirect the request to a local web server script. </para><itemizedlist><listitem override="none"><para>in time the script will fetch for squid the url and store the file on HDD or will fetch from HDD the cached file. </para></listitem></itemizedlist><para><ulink url="http://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube#Partial_Solution_1:_Local_Web_Server">the proposed solution in more detail</ulink> </para><para>Another same style solution was used by <ulink url="http://code.google.com/p/youtube-cache/">youtube-cache</ulink> and later was extended at<ulink url="http://code.google.com/p/yt-cache/">yt-cache</ulink> </para><para>Pros: </para><itemizedlist><listitem><para>works with any Squid version </para></listitem><listitem><para>easily adaptable for other CDN </para></listitem></itemizedlist><para>Cons: </para><itemizedlist><listitem><para>no keep-alive support and as result cannot cache youtube with &quot;range&quot; argument requests(will result youtube player stop all the time) </para></listitem><listitem><para>There is no support for POST requests at all, they will be treated as GET.(can be changed doing some coding) </para></listitem><listitem><para>If two people watch an uncached video at the same time, it will be downloaded by both. </para></listitem><listitem><para>It requires a webserver running at all times </para></listitem><listitem><para>Cache dir will be managed manually by administrator and not by Squid smart replacement algorithms. </para></listitem><listitem><para>cannot be used with tproxy(the webserver will use his own IP to get the request instead of squid way of imposing to be the client) </para></listitem></itemizedlist></section><section><title>NGINX as a Cache Peer</title><para>in <ulink url="http://code.google.com/p/youtube-cache/">youtube-cache</ulink> the author used NGINX web server as a cache_peer and reverse proxy. the idea was to take advantage of NGINX ability &quot;proxy_store&quot; as a cache store and &quot;resolver&quot; option to make NGINX be able to do &quot;Forward proxy&quot;. NGINX has some nice features that allows it to use request arguments as part of &quot;cache store key&quot; easily. </para><para>for youtube can be used: </para><screen><![CDATA[proxy_store "/usr/local/www/nginx_cache/files/id=$arg_id.itag=$arg_itag.range=$arg_range";]]></screen><para>Pros: </para><itemizedlist><listitem><para>works with any Squid version </para></listitem><listitem><para>easily adaptable for other CDN </para></listitem></itemizedlist><para>Cons: </para><itemizedlist><listitem><para>no keep-alive support and as result cannot cache youtube with &quot;range&quot; argument requests(will result youtube player stop all the time) </para></listitem><listitem><para>A request will lead to a full file download and can cause DDOS or massive bandwidth consumption by the cache web-server. </para></listitem><listitem><para>It requires a webserver running at all times </para></listitem><listitem><para>Cache dir will be managed manually by administrator and not by Squid smart replacement algorithms. </para></listitem><listitem><para>cannot be used with tproxy. </para></listitem></itemizedlist></section></section><section><title>Summery of the ICAP solution</title><para>The &quot;problem&quot; of newer squid versions then 2+ is that the store_url_rewrite interface wasn't integrated and as a result most of the users used the old squid version. others have used the url_rewrite and web-server way. many have used <ulink url="http://cachevideos.com/">videocache</ulink> that is based on the same idea because it has updates, support and other features. </para><para>this resulted Squid servers to serve files from a local NGINX\APACHE\LIGHTHTTPD that resulted a very nasty cache maintainability problem. </para><para>many cache admins gained youtube videos cache but lost most of squid advantages. </para><para>The idea is to let squid(2 instances) do all caching fetching etc instead of using a third party cache solutions and web-servers. So With a long history of dynamic content analysis at work i had in mind for a long time the idea but just recently Tested and implemented it. </para><para>The solution i implemented was meant for newer Squid version 3+ can be implemented using either one of two options ICAP server or url_rewrite while ICAP has many advantages. it requires: </para><itemizedlist><listitem><para>2 squid instances </para></listitem><listitem><para>ICAP server\url_rewrite script </para></listitem><listitem><para>very fast DB engine(MYSQL\PGSQL\REDIS\OTHERS) </para></listitem></itemizedlist><para>what will it do? <emphasis>Cheat Everyone in the system!!</emphasis>. ICAP and url_rewrite has the capability to rewrite the url transparently to the client so one a client request a file squid, squid 1 will issue by acls ICAP REQMOD(request modification) from ICAP server. pseudo for ICAP code: </para><para>analyze request. if request fits criteria: extract from request the needed data (from url and other headers) create an internal &quot;address&quot; like &quot;<ulink url="http://ytvideo.squid.internal/somekey"/>&quot; store a key pair of the original url and the modified url on the db. send the modified request to squid. </para><para>on squid 1 we pre-configured a cache_peer for all dstdomain of .internal so the rewritten url must be fetched through squid 2. </para><para>squid 2 then gets the request for &quot;<ulink url="http://ytvideo.squid.internal/somekey"/>&quot; and passes the request to the ICAP server. the ICAP server in time fetch the original URL from DB and rewrites the request to the original origin server. </para><para>The status now is: client thinks it's fetching the original file. squid 1 thinks it's fetching the &quot;<ulink url="http://ytvideo.squid.internal/somekey"/>&quot; file squid 2 feeds the whole network one big lie but with the original video. </para><para>The Result is: squid 1 will store the video with a unique key that can be verified using ICP\HTCP\CACHEMGR\LOGS etc. squid 2 is just a simple proxy(no-cache) ICAP server coordinates the work flow. </para><para>Pros: </para><itemizedlist><listitem><para>cache managed by squid algorithms/ </para></listitem><listitem><para>should work on any squid version support ICAP\url_rewrite.(tested on squid 3.1.19) </para></listitem><listitem><para>can build key based on the URL and all request headers. </para></listitem></itemizedlist><para>Cons: </para><itemizedlist><listitem><para>depends on DB and ICAP server. </para></listitem><listitem/></itemizedlist></section><section><title>Implementing ICAP solution</title><para>requires:  </para><itemizedlist><listitem><para>squid with icap support </para></listitem><listitem><para>mysql DB </para></listitem><listitem><para>ICAP server (i wrote <ulink url="https://github.com/elico/echelon">echelon-mod</ulink> specific for the project requirements) I also implemented this using <ulink url="https://github.com/elico/squid-helpers/tree/master/squid_helpers/youtubetwist">GreasySpoon</ulink> ICAP server <ulink url="https://github.com/elico/squid-helpers/tree/master/squid_helpers/youtubetwist">can be found at github</ulink> </para></listitem></itemizedlist><para>squid 1: </para><screen><![CDATA[acl ytcdoms dstdomain .c.youtube.com
acl internaldoms dstdomain .squid.internal
acl ytcblcok urlpath_regex (begin\=)
acl ytcblockdoms dstdomain redirector.c.youtube.com
acl ytimg dstdomain .ytimg.com
]]><![CDATA[
refresh_pattern ^http://(youtube|ytimg)\.squid\.internal/.*  10080 80%  28800 override-lastmod override-expire override-lastmod ignore-no-cache ignore-private ignore-reload
]]><![CDATA[
maximum_object_size_in_memory 4 MB
]]><![CDATA[
#cache_peers section
cache_peer 127.0.0.1 parent 13128 0 no-query no-digest no-tproxy default name=internal
cache_peer_access internal allow internaldoms
cache_peer_access internal deny all
]]><![CDATA[
never_direct allow internaldoms
never_direct deny all
]]><![CDATA[
cache deny ytcblockdoms
cache deny ytcdoms ytcblcok
cache allow all
]]><![CDATA[
icap_enable on
icap_service_revival_delay 30
]]><![CDATA[
icap_service service_req reqmod_precache bypass=1 icap://127.0.0.2:1344/reqmod?ytvideoexternal
adaptation_access service_req deny internaldoms
adaptation_access service_req deny ytcblockdoms
adaptation_access service_req allow ytcdoms
adaptation_access service_req deny all
]]><![CDATA[
icap_service service_ytimg reqmod_precache bypass=1 icap://127.0.0.2:1344/reqmod?ytimgexternal
adaptation_access service_ytimg allow ytimg img
adaptation_access service_ytimg deny all]]></screen><para>squid 2 </para><screen><![CDATA[acl internalyt dstdomain youtube.squid.internal
acl intytimg dstdomain ytimg.squid.internal
cache deny all
]]><![CDATA[
icap_enable on
icap_service_revival_delay 30
]]><![CDATA[
icap_service service_req reqmod_precache bypass=0 icap://127.0.0.2:1344/reqmod?ytvideointernal
adaptation_access service_req allow internalyt
adaptation_access service_req deny all
]]><![CDATA[
icap_service service_ytimg reqmod_precache bypass=0 icap://127.0.0.2:1344/reqmod?ytimginternal
adaptation_access service_ytimg allow intytimg
adaptation_access service_ytimg deny all]]></screen><para>MYSQL db </para><screen><![CDATA[#i have used mysql db 'ytcache' table 'temp' with user and password as 'ytcache' with full rights for localhost and ip 127.0.0.1
create a memory table in DB with two very long varchar(2000) fields.
create give a user full rights to the db.
# it's recommended to truncate the temp memory table at least once a day because it has limited size.]]></screen><para>ICAP SERVER </para><para>my ICAP server can be downloaded from : <ulink url="https://github.com/elico/echelon">My github</ulink> the server is written in ruby and tested on version 1.9. required for the server: </para><screen><![CDATA["rubygems"
gem "bundler"
gem "eventmachine"
gem "settingslogic"
gem "mysql"
gem "dbi"]]></screen><para>there is a settings file at config/settings.yml </para><para>notice to setup local IP address to the server in the config file. </para><para>i have used IP 127.0.0.2 to allow very intense stress tests with a lot of open port. </para></section><section><title>Alternative To ICAP server Using url_rewrite</title><para>the same logic i implemented using ICAP can be used using the url_rewrite mechanizm. </para><para>i wrote a specific url rewriter with the db\cache server redis as backend. we can use the same logic as ICAP server to rewrite the urls on each of the squid instances. you need to install &quot;redis&quot; and redis gem for ruby. </para><informaltable><tgroup cols="3"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para>ubuntu</para></entry><entry colsep="1" rowsep="1"><para>gentoo </para></entry><entry colsep="1" rowsep="1"><para>centos\fedora</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> gem install redis</para><para>apt-get install redis</para></entry><entry colsep="1" rowsep="1"><para>gem install redis</para><para>emerge redis</para></entry><entry colsep="1" rowsep="1"><para>gem install redis</para><para>yum install redis</para><para>/sbin/chkconfig redis on</para><para>/etc/init.d/redis start</para></entry></row></tbody></tgroup></informaltable><para>squid1.conf </para><screen><![CDATA[acl internaldoms dstdomain .squid.internal
acl rewritedoms dstdomain .c.youtube.com av.vimeo.com .dl.sourceforge.net  .ytimg.com 
url_rewrite_program /opt/coordinator.rb
url_rewrite_children 5
url_rewrite_concurrency 50
url_rewrite_access deny internaldoms
url_rewrite_access allow all]]></screen><para>squid2.conf </para><screen><![CDATA[cache deny all
acl internaldoms dstdomain .squid.internal
url_rewrite_program /opt/coordinator.rb
url_rewrite_children 5
url_rewrite_concurrency 50
url_rewrite_access allow internaldoms
url_rewrite_access deny all]]></screen><itemizedlist><listitem><para>remember to chmod +x coordinator.rb </para></listitem></itemizedlist><para>coordinator.rb </para><programlisting format="linespecific" language="highlight" linenumbering="numbered" startinglinenumber="1"><lineannotation><![CDATA[#!/usr/bin/ruby]]></lineannotation>
<token><![CDATA[require]]></token><![CDATA[ ]]><phrase><![CDATA['syslog']]></phrase>
<token><![CDATA[require]]></token><![CDATA[ ]]><phrase><![CDATA['redis']]></phrase>

<token><![CDATA[class]]></token><![CDATA[ ]]><methodname><![CDATA[Cache]]></methodname>
<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[initialize]]></methodname>
<![CDATA[        ]]><methodname><![CDATA[@host]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[localhost]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[        ]]><methodname><![CDATA[@db]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[0]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[        ]]><methodname><![CDATA[@port]]></methodname><![CDATA[ = 6379]]>
<![CDATA[        ]]><methodname><![CDATA[@redis]]></methodname><![CDATA[ = ]]><symbol><![CDATA[Redis]]></symbol><![CDATA[.]]><methodname><![CDATA[new]]></methodname><![CDATA[(]]><phrase><![CDATA[:host]]></phrase><![CDATA[ => ]]><methodname><![CDATA[@host]]></methodname><![CDATA[, ]]><phrase><![CDATA[:port]]></phrase><![CDATA[ => ]]><methodname><![CDATA[@port]]></methodname><![CDATA[)]]>
<![CDATA[        ]]><methodname><![CDATA[@redis]]></methodname><![CDATA[.]]><methodname><![CDATA[select]]></methodname><![CDATA[ ]]><methodname><![CDATA[@db]]></methodname>
<![CDATA[        ]]><token><![CDATA[end]]></token>

<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[setvid]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[,]]><methodname><![CDATA[vid]]></methodname><![CDATA[)]]>
<![CDATA[           ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[@redis]]></methodname><![CDATA[.]]><methodname><![CDATA[setex]]></methodname><![CDATA[  ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[md5(]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[+ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[)]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[,1200 ,]]><methodname><![CDATA[url]]></methodname>
<![CDATA[        ]]><token><![CDATA[end]]></token>

<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[geturl]]></methodname><![CDATA[(]]><methodname><![CDATA[vid]]></methodname><![CDATA[)]]>
<![CDATA[           ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[@redis]]></methodname><![CDATA[.]]><methodname><![CDATA[get]]></methodname><![CDATA[ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[md5(]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ + ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[)]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[        ]]><token><![CDATA[end]]></token>


<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[sfdlid]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                        ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.dl]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.sourceforge]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.net]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[(.*)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                        ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[[1]]]>
<![CDATA[                                ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[[1]]]>
<![CDATA[                        ]]><token><![CDATA[else]]></token>
<![CDATA[                                ]]><token><![CDATA[return]]></token><![CDATA[ ]]><token><![CDATA[nil]]></token>
<![CDATA[                        ]]><token><![CDATA[end]]></token>
<![CDATA[        ]]><token><![CDATA[end]]></token>

<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[vimid]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                        ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.com]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[(.*)(]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[?.*)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                        ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[[1]]]>
<![CDATA[                                ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[[1]]]>
<![CDATA[                        ]]><token><![CDATA[else]]></token>
<![CDATA[                                ]]><token><![CDATA[return]]></token><![CDATA[ ]]><token><![CDATA[nil]]></token>
<![CDATA[                        ]]><token><![CDATA[end]]></token>
<![CDATA[        ]]><token><![CDATA[end]]></token>

<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[ytimg]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.ytimg.com]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[(.*)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[[1]]]>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[[1]]]>
<![CDATA[                ]]><token><![CDATA[else]]></token>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ ]]><token><![CDATA[nil]]></token>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<![CDATA[        ]]><token><![CDATA[end]]></token>

<![CDATA[        ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[ytvid]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>

<![CDATA[                ]]><token><![CDATA[id]]></token><![CDATA[ = ]]><methodname><![CDATA[getytid]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                ]]><methodname><![CDATA[itag]]></methodname><![CDATA[ = ]]><methodname><![CDATA[getytitag]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                ]]><methodname><![CDATA[range]]></methodname><![CDATA[ = ]]><methodname><![CDATA[getytrange]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                ]]><methodname><![CDATA[redirect]]></methodname><![CDATA[ = ]]><methodname><![CDATA[getytredirect]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                ]]><token><![CDATA[if]]></token><![CDATA[ ]]><token><![CDATA[id]]></token><![CDATA[ == ]]><token><![CDATA[nil]]></token>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ ]]><token><![CDATA[nil]]></token>
<![CDATA[                ]]><token><![CDATA[else]]></token>
<![CDATA[                        ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><token><![CDATA[id]]></token>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<![CDATA[                ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[itag]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                        ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ + ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[&]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[itag]]></methodname>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<![CDATA[                ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[range]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                        ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ + ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[&]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[range]]></methodname>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<![CDATA[                ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[redirect]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                        ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ + ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[&]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[redirect]]></methodname>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<![CDATA[                ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname>
<![CDATA[        ]]><token><![CDATA[end]]></token>

<![CDATA[        ]]><token><![CDATA[private]]></token>
<![CDATA[                ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[getytid]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                        ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[(id]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[=[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]+)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[.]]><methodname><![CDATA[to_s]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                ]]><token><![CDATA[end]]></token>

<![CDATA[                ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[getytitag]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                        ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[(itag]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[=[0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]+)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[.]]><methodname><![CDATA[to_s]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                ]]><token><![CDATA[end]]></token>

<![CDATA[                ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[getytrange]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                        ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[(range]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[=[0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]+)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[.]]><methodname><![CDATA[to_s]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                ]]><token><![CDATA[end]]></token>

<![CDATA[                ]]><token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[getytredirect]]></methodname><![CDATA[(]]><methodname><![CDATA[url]]></methodname><![CDATA[)]]>
<![CDATA[                        ]]><methodname><![CDATA[m]]></methodname><![CDATA[ = ]]><methodname><![CDATA[url]]></methodname><![CDATA[.]]><methodname><![CDATA[match]]></methodname><![CDATA[(]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[(redirect]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[=)([a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]+)]]></phrase><phrase><![CDATA[/]]></phrase><![CDATA[)]]>
<![CDATA[                        ]]><token><![CDATA[return]]></token><![CDATA[ (]]><methodname><![CDATA[m]]></methodname><![CDATA[.]]><methodname><![CDATA[to_s]]></methodname><![CDATA[ + ]]><symbol><![CDATA[Time]]></symbol><![CDATA[.]]><methodname><![CDATA[now]]></methodname><![CDATA[.]]><methodname><![CDATA[to_i]]></methodname><![CDATA[.]]><methodname><![CDATA[to_s]]></methodname><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[m]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                ]]><token><![CDATA[end]]></token>


<token><![CDATA[end]]></token>

<token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[rewriter]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[)]]>
<![CDATA[                ]]><token><![CDATA[case]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname>

<![CDATA[                ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.]+]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.squid]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.internal]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[                   ]]><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[geturl]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[) ]]>
<![CDATA[                   ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                      ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname><![CDATA[ ]]>
<![CDATA[                    ]]><token><![CDATA[else]]></token>
<![CDATA[                      ]]><token><![CDATA[return]]></token><![CDATA[ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[                  ]]><token><![CDATA[return]]></token><![CDATA[ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[                    ]]><token><![CDATA[end]]></token>
<![CDATA[                ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.]+]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.dl]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.sourceforge]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.net]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[                  ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[sfdlid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[)]]>
<![CDATA[                  ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[setvid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[, ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://dl.sourceforge.net.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                  ]]><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://dl.sourceforge.net.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                  ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname><![CDATA[                            ]]>
<![CDATA[                ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[av]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.vimeo]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.com]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[                  ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[vimid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[)]]>
<![CDATA[                  ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[setvid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[, ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://vimeo.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                  ]]><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://vimeo.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[                  ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname>
<![CDATA[                ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.]+]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.c]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.youtube]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.com]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[videoplayback]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[?.*id]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[=.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[                  ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[ytvid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[)]]>
<![CDATA[          ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[setvid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[, ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://youtube.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[          ]]><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://youtube.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[          ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname>
<![CDATA[                ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^http:]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[\/]]></phrase><phrase><![CDATA[[a-zA-Z0-9]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[-]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[_]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.]+]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.ytimg]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.com]]></phrase><phrase><![CDATA[\]]></phrase><phrase><![CDATA[.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[                   ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ = ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[ytimg]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[)]]>
<![CDATA[           ]]><methodname><![CDATA[$cache]]></methodname><![CDATA[.]]><methodname><![CDATA[setvid]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[, ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://ytimg.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[           ]]><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[http://ytimg.squid.internal/]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[vid]]></methodname><![CDATA[ != ]]><token><![CDATA[nil]]></token>
<![CDATA[           ]]><token><![CDATA[return]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname><![CDATA[                                            ]]>
<![CDATA[                ]]><token><![CDATA[when]]></token><![CDATA[ ]]><phrase><![CDATA[/]]></phrase><phrase><![CDATA[^quit.*]]></phrase><phrase><![CDATA[/]]></phrase>
<![CDATA[                  ]]><token><![CDATA[exit]]></token><![CDATA[ 0]]>
<![CDATA[                ]]><token><![CDATA[else]]></token>
<![CDATA[                 ]]><token><![CDATA[return]]></token><![CDATA[ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<token><![CDATA[end]]></token>

<token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[log]]></methodname><![CDATA[(]]><methodname><![CDATA[msg]]></methodname><![CDATA[)]]>
<![CDATA[ ]]><symbol><![CDATA[Syslog]]></symbol><![CDATA[.]]><methodname><![CDATA[log]]></methodname><![CDATA[(]]><symbol><![CDATA[Syslog]]></symbol><![CDATA[::]]><symbol><![CDATA[LOG_ERR]]></symbol><![CDATA[, ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[%s]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[, ]]><methodname><![CDATA[msg]]></methodname><![CDATA[)]]>
<token><![CDATA[end]]></token>

<token><![CDATA[def]]></token><![CDATA[ ]]><methodname><![CDATA[main]]></methodname>

<![CDATA[        ]]><symbol><![CDATA[Syslog]]></symbol><![CDATA[.]]><methodname><![CDATA[open]]></methodname><![CDATA[(]]><phrase><![CDATA['cordinator.rb']]></phrase><![CDATA[, ]]><symbol><![CDATA[Syslog]]></symbol><![CDATA[::]]><symbol><![CDATA[LOG_PID]]></symbol><![CDATA[)]]>
<![CDATA[        ]]><methodname><![CDATA[log]]></methodname><![CDATA[(]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[Started]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[)]]>

<![CDATA[        ]]><lineannotation><![CDATA[#read_requests do |request|]]></lineannotation>
<![CDATA[        ]]><token><![CDATA[while]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[ = ]]><token><![CDATA[gets]]></token><![CDATA[.]]><methodname><![CDATA[split]]></methodname>
<![CDATA[                ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[request]]></methodname><![CDATA[[0] && ]]><methodname><![CDATA[request]]></methodname><![CDATA[[1]]]>
<![CDATA[                        ]]><methodname><![CDATA[log]]></methodname><![CDATA[(]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[original request []]></phrase><phrase><![CDATA[#{]]></phrase><methodname><![CDATA[request]]></methodname><![CDATA[.]]><methodname><![CDATA[join]]></methodname><![CDATA[(]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[ ]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[)]]><phrase><![CDATA[}]]></phrase><phrase><![CDATA[].]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[$debug]]></methodname>
<![CDATA[                        ]]><methodname><![CDATA[url]]></methodname><![CDATA[ = ]]><methodname><![CDATA[request]]></methodname><![CDATA[[0] +]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[ ]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[ + ]]><methodname><![CDATA[rewriter]]></methodname><![CDATA[(]]><methodname><![CDATA[request]]></methodname><![CDATA[[1])]]>
<![CDATA[                        ]]><methodname><![CDATA[log]]></methodname><![CDATA[(]]><phrase><![CDATA["]]></phrase><phrase><![CDATA[modified response []]></phrase><phrase><![CDATA[#{]]></phrase><methodname><![CDATA[url]]></methodname><phrase><![CDATA[}]]></phrase><phrase><![CDATA[].]]></phrase><phrase><![CDATA["]]></phrase><![CDATA[) ]]><token><![CDATA[if]]></token><![CDATA[ ]]><methodname><![CDATA[$debug]]></methodname>
<![CDATA[                        ]]><token><![CDATA[puts]]></token><![CDATA[ ]]><methodname><![CDATA[url]]></methodname>
<![CDATA[                ]]><token><![CDATA[else]]></token>
<![CDATA[                        ]]><token><![CDATA[puts]]></token><![CDATA[ ]]><phrase><![CDATA["]]></phrase><phrase><![CDATA["]]></phrase>
<![CDATA[                ]]><token><![CDATA[end]]></token>
<![CDATA[        ]]><token><![CDATA[end]]></token>
<token><![CDATA[end]]></token>
<methodname><![CDATA[$debug]]></methodname><![CDATA[ = ]]><token><![CDATA[false]]></token>
<methodname><![CDATA[$cache]]></methodname><![CDATA[ = ]]><symbol><![CDATA[Cache]]></symbol><![CDATA[.]]><methodname><![CDATA[new]]></methodname>
<symbol><![CDATA[STDOUT]]></symbol><![CDATA[.]]><methodname><![CDATA[sync]]></methodname><![CDATA[ = ]]><token><![CDATA[true]]></token>
<methodname><![CDATA[main]]></methodname>
</programlisting></section></section></section></article>