<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ConfigExamples/WebwasherChained</title><revhistory><revision><revnumber>9</revnumber><date>2011-05-18 07:20:17</date><authorinitials>AmosJeffries</authorinitials><revremark>this is the chained setup,  there is also an ICAP one</revremark></revision><revision><revnumber>8</revnumber><date>2009-04-02 01:01:43</date><authorinitials>AmosJeffries</authorinitials><revremark>redundant name</revremark></revision><revision><revnumber>7</revnumber><date>2008-05-18 19:39:00</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>6</revnumber><date>2006-09-29 18:21:47</date><authorinitials>rpivato</authorinitials><revremark>removed bad WikiName</revremark></revision><revision><revnumber>5</revnumber><date>2006-09-26 19:46:54</date><authorinitials>haas.workdsl.de</authorinitials></revision><revision><revnumber>4</revnumber><date>2006-09-26 14:44:07</date><authorinitials>80.85.196.92</authorinitials></revision><revision><revnumber>3</revnumber><date>2006-09-25 15:57:19</date><authorinitials>80.85.196.94</authorinitials></revision><revision><revnumber>2</revnumber><date>2006-09-25 15:31:13</date><authorinitials>80.85.196.94</authorinitials></revision><revision><revnumber>1</revnumber><date>2006-09-25 14:42:47</date><authorinitials>80.85.196.93</authorinitials></revision></revhistory></articleinfo><section><title>Configuring Squid and Webwasher in a proxy chain</title><para>By <ulink url="https://wiki.squid-cache.org/ConfigExamples/WebwasherChained/ChristophHaas#">ChristophHaas</ulink> </para><section><title>Outline</title><para>Squid is a brilliant caching proxy software. But it lacks a component for content filtering. Often Squid administrators get ordered to prevent downloading of virus-infected files or to filter out adult content. There is software like Dansguardian or Squidguard that attempts to do just that. But in a corporate environment this isn't sufficient at all. </para><para>Squid 3.x includes an ICAP client which at least allows you to connect ICAP-capable content filters. But even with Squid 2.x you can connect other proxies in a <emphasis>proxy chain</emphasis>. So this article deals with the integration of the Webwasher proxy software (made by <emphasis>Secure Computing</emphasis>). </para><para><inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/attention.png" width="15"/></imageobject><textobject><phrase>&lt;!&gt;</phrase></textobject></inlinemediaobject> DISCLAIMER: Webwasher is a relatively expensive piece of software. If you want to save your kids at home from porn web sites this article is not for you. The reason this article exists is that we use it at work. It's not meant as an advertisement. This setup is a bit tough and you should be familiar with the basics of Squid and LDAP. </para></section><section><title>The example setup</title><para>What we do is authenticate our users against an LDAP database. As different users need to be allowed different things on the internet there are several LDAP groups that assign the users a certain profile. Example: Nobody is allowed to use public webmail services but the group of mail server administrators is given that permission so that they can test their own server from the internet. </para><para>The setup described below works roughly like this: </para><itemizedlist><listitem><para>Users point their browsers to the Squid proxy </para></listitem><listitem><para>When accessing the proxy the user gets asked for authentication (by verifying the credentials through LDAP) </para></listitem><listitem><para>Once the user is authenticated and let through according to ACLs the request is forwarded to the Webwasher </para></listitem><listitem><para>The Webwasher takes the authenticated username from Squid and assigns a <emphasis>profile</emphasis> (by looking up LDAP groups) </para></listitem><listitem><para>The transmitted content (request and response) are checked by the rules of the assigned profile and is either allowed or blocked </para></listitem></itemizedlist><para>The big picture: </para><para><inlinemediaobject><imageobject><imagedata fileref="https://wiki.squid-cache.org/ConfigExamples/WebwasherChained?action=AttachFile&amp;do=get&amp;target=bigpicture.png"/></imageobject><textobject><phrase>bigpicture.png</phrase></textobject></inlinemediaobject> </para><para>What the Webwasher does: </para><itemizedlist><listitem><para>Virus scanning </para></listitem><listitem><para>URL blocking (huge database of URLs that allows you to block certain categories like web mail, porn or anonymous proxies) </para></listitem><listitem><para>Scanning of <emphasis>active content</emphasis> like Javascript, Java or ActiveX. It analyses what the Javascript or Java is actually doing and can block e.g. scripts that try to access the hard disk. </para></listitem><listitem><para>Checking of allowed content types (it does not just accept the content type that is sent by the browser but instead checks the actual content by so called <emphasis>magic bytes</emphasis> that are also used by the UNIX' <emphasis role="strong">file</emphasis> command) </para></listitem><listitem><para>Sanity checks: depth and size of archives, Microsoft Authenticode (most incorrectly signed scripts seem to come from Microsoft itself) </para></listitem></itemizedlist><para>What the Webwasher currently does not: </para><itemizedlist><listitem><para>The concept of <emphasis>profiles</emphasis> is very different from Squid's concept of ACLs. With ACLs and <emphasis role="strong">http_access</emphasis> statements you run through those rules from top to bottom and the first matching entry determines whether the access is allowed or not. Profiles on the other hand define whether a certain filter is enabled or not. One <emphasis>default</emphasis> profile may disallow surfing to adult websites. But another profile might allow just that. The major drawback is that you cannot use inheritance with profiles. There is no way to say &quot;I want the default profile but want to allow adult sites, too&quot;. You can just copy the default profile and change some settings. But if the default profile will be changed later no other profiles that are derived from the default profile will know about that change. So the longer you work with profiles the lesser you really know what each profile is doing. </para></listitem></itemizedlist></section><section><title>Squid configuration</title><para>The Squid proxy is mainly used for complex ACLs. Some users/client IPs do not need to authenticate. Some URLs are blocked manually. Squid's ACLs are perfect for that job. </para><section><title>LDAP authentication and authorisation</title><para>First define how LDAP authentication will work: </para><screen><![CDATA[auth_param basic children 50
auth_param basic realm Proxy
auth_param basic credentialsttl 1 minute
auth_param basic program /usr/lib/squid/ldap_auth -b o=ourcompany -h ldapserver -D cn=proxyauth,o=ourcompany -w secretpassword -f (&(objectclass=person)(cn=%s))]]></screen><para>The interesting part is the call to <emphasis role="strong">ldap_auth</emphasis>. These are the meanings of the respective arguments: </para><informaltable><tgroup cols="2"><colspec colname="col_0"/><colspec colname="col_1"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para> o=ourcompany </para></entry><entry colsep="1" rowsep="1"><para> the DN (distinguished name) the defines where your LDAP tree starts </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> ldapserver </para></entry><entry colsep="1" rowsep="1"><para> the DNS name or IP address of your LDAP server to query </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> cn=proxyauth,o=ourcompany </para></entry><entry colsep="1" rowsep="1"><para> the DN of the LDAP user that is used to verify the username and password of a user </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> secretpassword </para></entry><entry colsep="1" rowsep="1"><para> the password that the above LDAP user needs to query the LDAP server </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> (&amp;(objectclass=person)(cn=%s)) </para></entry><entry colsep="1" rowsep="1"><para> an LDAP expression limiting which kind of LDAP objects/users you are searching </para></entry></row></tbody></tgroup></informaltable><para>If you want Squid to query the LDAP database to see whether a certain user is part of a certain LDAP group you also need to define LDAP lookups: </para><screen><![CDATA[external_acl_type ldapgroup ttl=60 concurrency=20 %LOGIN /usr/lib/squid/squid_ldap_group \
   -b o=ourcompany -f (&(objectclass=person)(cn=%v)(groupMembership=cn=%a,ou=groupcontainer,o=ourcompany)) \
   -D cn=proxyauth,o=ourcompany -w secretpassword -h ldapserver]]></screen><para>Here the interesting part is <emphasis role="strong">(&amp;(objectclass=person)(cn=%v)(groupMembership=cn=%a,ou=groupcontainer,o=ourcompany))</emphasis>. This LDAP expression queries for (1) all persons whose (2) name is <emphasis role="strong">%v</emphasis> [this is defined by your ACL later] and you (3) look in groups inside the <emphasis role="strong">ou=groupcontainer,o=ourcompany</emphasis> branch. </para><para>A minimal ACL/http_access configuration that uses authentication will look like this: </para><screen><![CDATA[acl ldap-auth proxy_auth REQUIRED
http_access deny !ldap-auth
http_access allow all]]></screen><para>OPTIONAL: </para><para>You may want to create a special LDAP group with users that are allowed to surf through the proxy. Perhaps you have an LDAP directory where all your users are listed and you don't want to allow everybody internet access. So you create an LDAP group <emphasis role="strong">user_can_surf</emphasis> and list all privileged users there. Example configuration: </para><screen><![CDATA[acl ldap-auth proxy_auth REQUIRED
http_access deny !ldap-auth
acl ldapgroup-enabled external ldapgroup user_can_surf
deny_info denied-ldapenabled ldapgroup-enabled
http_access deny !ldapgroup-enabled
http_access allow all]]></screen><para>To tell the user why the access was denied you should consider using <emphasis role="strong">deny_info</emphasis> statements to define your own error pages. See your squid.conf for details. </para></section><section><title>Proxy chain</title><para>Now that Squid's job of authenticating the user is done and Squid decided that the access is allowed you want to forward the request to the Webwasher. This is done in a <emphasis>proxy chain</emphasis>. Set up a cache peer in your squid.conf: </para><screen><![CDATA[cache_peer localhost parent 9090 0 no-query no-digest default login=*:foobar]]></screen><para>You can run the Webwasher process on the same host as Squid itself. That's why the peer host is <emphasis>localhost</emphasis> here. The additional options <emphasis role="strong">no-query</emphasis> and <emphasis role="strong">no-digest</emphasis> tell Squid that the Webwasher does not know about ICP queries and sibling relationships. But there is something special here: <emphasis role="strong">login=*:foobar</emphasis>. This option forwards the HTTP <emphasis role="strong">Proxy-Authorization</emphasis> header to the parent proxy but replaces the user's password by the string <emphasis role="strong">foobar</emphasis>. That way the Webwasher can later use the name of the current Squid user to assign a certain profile. </para><para>Also tell your Squid that you want all requests to be forwarded to the Webwasher proxy without fetching the URL directly: </para><screen><![CDATA[never_direct allow all]]></screen><para>If you have certain URLs that you want to be queried directly because it's your intranet site or because Webwasher does something bad with the web site you can always use <emphasis role="strong">always_direct allow ...</emphasis> to send certain types of queries directly from the Squid to the web server. </para></section></section><section><title>Webwasher configuration</title><para>Since the configuration options in the web interface have moved between version 5.x and 6.x I won't describe the exact path. If you don't know where to find a certain option just use the search box on the top right. </para><para>First of all define your <emphasis>profiles</emphasis>. You will probably already have an idea what different types of users you have and create a profile for each. </para><section><title>LDAP authorisation</title><para>Find the <emphasis>Policy Management</emphasis> option in the web interface. Next select <emphasis>Web Mapping</emphasis>. Here you can define which profile a certain user gets assigned. You can do that by </para><itemizedlist><listitem><para>IP mapping: The profile gets assigned depending on the IP of the user's client PC. Set <emphasis role="strong">forwarded_for on</emphasis> in the squid.conf to use this. </para></listitem><listitem><para>Username mapping: The name of the user as authenticated by Squid is taken into account. </para><itemizedlist><listitem><para>Mapping method: Map from &quot;Username&quot; / Map via &quot;LDAP lookup&quot; </para></listitem><listitem><para>Extract user information from: Standard Request Header (Proxy-Authorization) </para></listitem><listitem><para>Mapping options: Do not verify password when using request headers (this is important to just map the username provided in Proxy-Authorization to a profile without checking the password again) </para></listitem><listitem><para>Current Rules: set mappings here. On the left select the profile to be assigned. And on the right put the name of an LDAP group that contains the users who should get this profile assigned. </para></listitem></itemizedlist></listitem></itemizedlist><para>Of course you need to have LDAP configured already. The setup depends on your LDAP software of course. This is an example configuration: </para><itemizedlist><listitem><para>User: </para><itemizedlist><listitem><para>Attributes to extract: cn </para></listitem></itemizedlist></listitem><listitem><para>Group object: </para><itemizedlist><listitem><para>Attributes to extract: cn </para></listitem><listitem><para>Base DN to group objects: ou=proxygroups,o=ourcompany </para></listitem><listitem><para>Group member attribute name: uniqueMember </para></listitem><listitem><para>Object class for groups: groupOfNames </para></listitem></itemizedlist></listitem></itemizedlist><para>(To debug LDAP lookups ethereal/ethershark can be really useful.) </para></section></section><section><title>Frequently Asked Questions</title><orderedlist numeration="arabic"><listitem><para>Why do you use Squid at all? Seems like Webwasher can do all you want without Squid. </para><itemizedlist><listitem><para>Squid is used for caching and because of its flexible ACLs. If you don't need that you can as well just use Webwasher and let that do the authentication. </para></listitem></itemizedlist></listitem></orderedlist><!--rule (<hr>) is not applicable to DocBook--><itemizedlist><listitem override="none"><para><ulink url="https://wiki.squid-cache.org/ConfigExamples/WebwasherChained/CategoryConfigExample#">CategoryConfigExample</ulink> </para></listitem></itemizedlist></section></section></article>