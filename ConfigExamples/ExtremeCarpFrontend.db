<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ConfigExamples/ExtremeCarpFrontend</title><revhistory><revision><revnumber>4</revnumber><date>2016-08-03 09:47:16</date><authorinitials>Marcus Kool</authorinitials><revremark>fix type in prabability</revremark></revision><revision><revnumber>3</revnumber><date>2014-01-12 04:39:19</date><authorinitials>AmosJeffries</authorinitials><revremark>adjust balancing probabilities for iptables example for fair balancing.</revremark></revision><revision><revnumber>2</revnumber><date>2011-05-12 03:52:07</date><authorinitials>AmosJeffries</authorinitials><revremark>Merge in details from the MultiCPUBalance page.</revremark></revision><revision><revnumber>1</revnumber><date>2010-02-04 15:52:25</date><authorinitials>FrancescoChemolli</authorinitials></revision></revhistory></articleinfo><section><title>Extreme CARP Frontend</title><para><emphasis role="strong">Warning</emphasis>: Any example presented here is provided &quot;as-is&quot; with no support or guarantee of suitability. If you have any further questions about these examples please email the squid-users mailing list. </para><section><title>Outline</title><para><inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/alert.png" width="15"/></imageobject><textobject><phrase>/!\</phrase></textobject></inlinemediaobject> <emphasis role="strong">NOTICE</emphasis>: this is an <emphasis>extreme</emphasis> setup. It is meant to be used in complex environments, where the resources available to the administrator are huge, as are the requests for performance. It is not suited for novice users. </para></section><section><title>Usage</title><para>This example is useful where hundreds-of-megabits performance levels are needed. It requires multiple servers in a triple-layer architecture. </para></section><section><title>Architecture</title><para>The needs for extreme performance may be addressed using a three-layer load-balancing scheme. The basic architecture is laid out in <ulink url="https://wiki.squid-cache.org/ConfigExamples/ExtremeCarpFrontend/ConfigExamples/MultiCpuSystem#">ConfigExamples/MultiCpuSystem</ulink>: a farm of caching backends is load-balanced in a smart way by a CARP frontend which performs little or no caching. </para><para>The CARP frontend itself may then become the bottleneck, so the architecture calls for load-balancing the frontend itself, using some lower-level mechanism, such as an external load balancer, or using networking-level means. </para><para>We assume that: </para><orderedlist numeration="arabic"><listitem><para>the administrator has set up a farm of backend servers, using the means suggested in <ulink url="https://wiki.squid-cache.org/ConfigExamples/ExtremeCarpFrontend/MultipleInstances#">MultipleInstances</ulink> . Those servers are <emphasis>not</emphasis> directly accessible from clients, and are <emphasis>not</emphasis> internally-load balanced. </para></listitem><listitem><para>the administrator has set up as many frontend servers as he wishes (up to one per CPU core) on the CARP box. Each of those servers has been individually tested and, when explicitly accessed from the client, is working correctly. </para></listitem><listitem><para>the administrator is familiar with his OS of choice's firewall technology </para></listitem></orderedlist><section><title>Frontend Balancer Alternative 1: iptables</title><itemizedlist><listitem override="none"><para><emphasis>by <ulink url="https://wiki.squid-cache.org/ConfigExamples/ExtremeCarpFrontend/FrancescoChemolli#">FrancescoChemolli</ulink></emphasis> </para></listitem></itemizedlist><para>In this example we will be using <emphasis>iptables</emphasis>. The Linux firewall and packet management software. </para><para>For this example we'll use a front-end with four instances, listening on ports 3128, 3129, 3130, 3131. Clients will be accessing the service on port 3128. </para><para>The relevant iptables commands are then: </para><screen><![CDATA[iptables -t nat -A PREROUTING -m tcp -p tcp --dport 3128 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
]]><![CDATA[
# 4/4 chance of trying this rule * 0.25 chance of matching = 0.25
iptables -t nat -A PREROUTING -p tcp -m statistic --mode random \
         --probability 0.25 -m tcp --dport 3128 -j REDIRECT --to-ports 3129
]]><![CDATA[
# 3/4 chance of trying this rule * 0.33 chance of matching = 0.25
iptables -t nat -A PREROUTING -p tcp -m statistic --mode random \
         --probability 0.25 -m tcp --dport 3128 -j REDIRECT --to-ports 3130
]]><![CDATA[
# 2/4 chance of trying this rule * 0.5 chance of matching = 0.25
iptables -t nat -A PREROUTING -p tcp -m statistic --mode random \
         --probability 0.25 -m tcp --dport 3128 -j REDIRECT --to-ports 3131
]]><![CDATA[
# 1/4 chance of trying this rule * 1.0 chance of matching = 0.25
# let these go through to port 3128]]></screen></section><section><title>Frontend Balancer Alternative 2: balance</title><itemizedlist><listitem override="none"><para><emphasis> by Robin</emphasis> </para></listitem></itemizedlist><para>In this example we will be using <emphasis>balance</emphasis>. A GPL licensed software available at <ulink url="http://www.inlab.de/"/>. The latest version of <emphasis>balance</emphasis> software is 3.54 at the time of this writing. </para><para><emphasis>balance</emphasis> provides the above iptables functionality to very old Linux versions which do not support the random packet selection. It also can be configured to try a different port if a specific target port becomes unavailable. That way, if a squid process died, <emphasis>balance</emphasis> will re-direct the traffic to another squid process on another port. </para><para>This is an example on how to run <emphasis>balance</emphasis> to listen on port 3128 and distributes the connections out to a farm of backend squid servers listening on IPv4 localhost ports 3129, 3130, 3131, and 3132. </para><screen><![CDATA[/PATH/TO/balance 3128 127.0.0.1:3129 127.0.0.1:3130 127.0.0.1:3131 127.0.0.1:3132]]></screen><para>One can configure Linux watchdog or setup a cron job to periodically check and start <emphasis>balance</emphasis> if <emphasis>balance</emphasis> dies. So far, balance software has proved to be reliably stable. <emphasis>balance</emphasis> is a user-space software, and thus its performance may not be as great as those operating in kernel-level. </para></section><section><title>Others</title><para>Other load balancing software exists. iptables and balance appear to be the easiest ones to use (and free). </para></section></section><section><title>Additional Infrastructure</title><para>As noted in the <emphasis>balance</emphasis> section, there is a possibility that Squid may become unavailable. When the load balancer fails to handle this itself (iptables for example does not failover) an additional layer is needed to identify service downtime. </para><para>With IPv4 the most popular method is to place a WCCP router in front of the whole structure. This is wonderful for overall service uptime. Be wary though, this adds yet another hardware single point of failure and bottleneck risk. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/ConfigExamples/ExtremeCarpFrontend/CategoryConfigExample#">CategoryConfigExample</ulink> </para></section></section></article>