##master-page:Features/FeatureTemplate
#format wiki
#language en
##
## Change to 'yes' for a listing under Features in the Squid FAQ.
#faqlisted no

= Feature: SSL Peek and Splice =

 * '''Goal''': Make bumping decisions after the origin server name is known, especially when intercepting SSL. Avoid bumping non-SSL traffic.
 * '''Status''': stalled due to lack of sponsor interest; see below for details
 * '''Version''': 3.5
 * '''Developer''': AlexRousskov and Christos Tsantilas
 * '''Priority''': 2
 * '''More''': unofficial development [[https://code.launchpad.net/~measurement-factory/squid/peek-and-splice|branch]].


= Motivation =

Many SslBump deployments try to minimize potential damage by ''not'' bumping sites unless the local policy demands it. Without this feature, the decision is made based on very limited information: A typical HTTP CONNECT request does not contain many details and intercepted TCP connections reveal nothing but IP addresses and port numbers. Peek and Splice gives admins a way to make bumping decision later in the SSL handshake process, when client SNI and the SSL server certificate are available (or when it becomes clear that we are not dealing with an SSL connection at all!).


= Implementation overview =

Peek and Splice peeks at the SSL client Hello message and SNI info (if any), sends identical or a similar (to the extent possible) Hello message to the SSL server, and then peeks at the SSL server Hello message. The decision to splice or bump can be made at any of those stages (but what Squid does at stage N affects its ability to splice or bump at stage N+1!). If the decision is ''not'' to bump, the two TCP connections are spliced at TCP level, with Squid shoveling TCP bytes back and forth without any decryption.

= Current status =

The branch code is not usable "as is", but does contain a lot of critical knowledge that took us several months to discover. We have uncovered many SSL and OpenSSL limitations in the project area and were able to work around some of them. We now understand how things can work and have mostly working code for various stages of Peek and Splice.

The missing pieces are:

 * Configuration: Very complex and difficult to get right because there are many stages of Peek and Splice, the decisions at the current stage affects future stages, and the intended future stages affect the decisions at previous stages! Attacking this problem directly produces a long list of squid.conf directives with complex interactions that are next to impossible to configure correctly. We have an alternative configuration design plan that we are almost happy about, but virtually no proper configuration code yet.
 * Connecting existing code snippets for various Peek and Splice stages to the configuration and to each other.
 * Getting the code ready for production use. We need to remove a lot of shortcuts and simplifications in the existing code.
 * More testing, documentation, and submission for the official review.


== Mimicked SSL client Hello properties ==

This section documents SSL client Hello message fields generated by Squid. Please note that for splicing to work, the client Hello message must be sent "as is", without any modifications at all. On the other hand, sending the client Hello message "as is" precludes Squid from eventually bumping the connection in most real-world use cases. Thus, the decision whether to mimic the client Hello or send it "as is" is critical to Squid's ability to splice or bump the connection after the Hello message has been sent.

||'''SSL client Hello field'''||'''Forwarded?'''||'''Comments'''||
||SSL Version||yes||SSL v3 and above (i.e. TLS) only.||
||Ciphers list||yes|| ||
||Server name||yes|| ||
||Ciphers list||yes|| ||
||Random bytes||yes|| ||
||Compression||partially||Compression request flag is mimicked. If compression is requested by the client, then the compression algorithm in the mimicked message is set by Squid OpenSSL (instead of being copied from the client message). This may be OK because the only widely used algorithm is deflate. It is possible that OpenSSL does not support other compression algorithms.||
||TLS extensions||no||We will probably need to mimic at least some of these for splicing TLS connections to work.||
||other||no||There are probably other fields. We should probably mimic some of them. However, blindly forwarding everything is probably a bad idea because it is likely to lead to SSL negotiation failures during bumping.||

= Limitations =

TBD.

----
CategoryFeature
