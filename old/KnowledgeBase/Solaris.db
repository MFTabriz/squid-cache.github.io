<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>KnowledgeBase/Solaris</title><revhistory><revision><revnumber>41</revnumber><date>2017-12-16 08:14:49</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>40</revnumber><date>2017-12-16 08:11:13</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>39</revnumber><date>2017-12-16 08:09:38</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>38</revnumber><date>2016-06-22 12:50:34</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>37</revnumber><date>2016-01-27 15:14:28</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>36</revnumber><date>2016-01-23 19:41:28</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>35</revnumber><date>2016-01-20 18:57:53</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>34</revnumber><date>2016-01-20 18:52:44</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>33</revnumber><date>2015-10-27 22:09:02</date><authorinitials>AmosJeffries</authorinitials><revremark>update demo ./configure options</revremark></revision><revision><revnumber>32</revnumber><date>2015-08-13 16:15:58</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>31</revnumber><date>2015-08-13 16:09:07</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>30</revnumber><date>2015-08-13 14:17:16</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>29</revnumber><date>2015-08-13 14:16:34</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>28</revnumber><date>2015-08-13 14:14:32</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>27</revnumber><date>2015-08-13 14:13:38</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>26</revnumber><date>2015-07-25 20:09:30</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>25</revnumber><date>2015-07-25 20:08:47</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>24</revnumber><date>2015-07-25 20:07:27</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>23</revnumber><date>2015-07-25 20:06:01</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>22</revnumber><date>2015-07-25 19:59:35</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>21</revnumber><date>2015-07-25 19:58:05</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>20</revnumber><date>2015-07-25 19:54:58</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>19</revnumber><date>2015-07-25 19:44:19</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>18</revnumber><date>2015-07-25 19:29:03</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>17</revnumber><date>2015-02-27 15:09:43</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>16</revnumber><date>2015-02-27 15:06:58</date><authorinitials>YuriVoinov</authorinitials></revision><revision><revnumber>15</revnumber><date>2014-02-10 13:21:29</date><authorinitials>AmosJeffries</authorinitials><revremark>sunfreeware serices now closed. Link to opencsw instead.</revremark></revision><revision><revnumber>14</revnumber><date>2013-10-26 05:25:45</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Removed dangling wikilinks</revremark></revision><revision><revnumber>13</revnumber><date>2013-07-29 18:40:00</date><authorinitials>AmosJeffries</authorinitials><revremark>mention the krb5 patch we distribute and that upgrading the library will fix it.</revremark></revision><revision><revnumber>12</revnumber><date>2011-05-24 10:01:43</date><authorinitials>AmosJeffries</authorinitials><revremark>ulimit requires -n to be separate sometimes. be consistent here.</revremark></revision><revision><revnumber>11</revnumber><date>2011-03-20 23:32:22</date><authorinitials>AmosJeffries</authorinitials><revremark>VCS detalis updated</revremark></revision><revision><revnumber>10</revnumber><date>2011-02-16 09:05:39</date><authorinitials>AmosJeffries</authorinitials><revremark>add details about bug2960 workaround for 3.1</revremark></revision><revision><revnumber>9</revnumber><date>2011-02-09 06:38:04</date><authorinitials>AmosJeffries</authorinitials><revremark>double indent required for BinaryPackages page include</revremark></revision><revision><revnumber>8</revnumber><date>2010-12-03 09:10:10</date><authorinitials>AmosJeffries</authorinitials><revremark>typo in Solaris 9 bug docs. add 3.1.9 snapshot as an option for fixing.</revremark></revision><revision><revnumber>7</revnumber><date>2010-10-15 11:45:09</date><authorinitials>AmosJeffries</authorinitials><revremark>Solaris 9 bug 3057 identified.</revremark></revision><revision><revnumber>6</revnumber><date>2010-09-13 01:01:41</date><authorinitials>AmosJeffries</authorinitials><revremark>add to  CategoryDistributionInfo</revremark></revision><revision><revnumber>5</revnumber><date>2010-09-13 00:57:25</date><authorinitials>AmosJeffries</authorinitials><revremark>Updated Solaris FD limit fix. Thanks to Maritn Bellenberg</revremark></revision><revision><revnumber>4</revnumber><date>2010-02-19 02:00:05</date><authorinitials>AmosJeffries</authorinitials><revremark>shuffle Solaris-specific bits from FAQ</revremark></revision><revision><revnumber>3</revnumber><date>2009-11-13 02:09:58</date><authorinitials>AmosJeffries</authorinitials><revremark>drop compile differences headers down a level. nicer when included to FAQ</revremark></revision><revision><revnumber>2</revnumber><date>2009-11-13 02:02:27</date><authorinitials>AmosJeffries</authorinitials><revremark>import Squid-2 details from FAQ page.</revremark></revision><revision><revnumber>1</revnumber><date>2009-11-12 14:55:10</date><authorinitials>FrancescoChemolli</authorinitials><revremark>first chapter on Solaris building</revremark></revision></revhistory></articleinfo><section><title>Squid on Solaris</title><section><title>Pre-Built Binary Packages</title><para>Squid-2 is distributed as part of the standard Solaris packages repository. To install it, simply use (as root) </para><screen><![CDATA[ pkg install SUNWsquid]]></screen><para>Configuration files will then be stored in <code>/etc/squid</code>, user-accessible executables such as squidclient in <code>/usr/bin</code>, while the main squid executable will be in <code>/usr/squid/sbin</code>. </para><para><ulink url="http://www.opencsw.org/packages/squid/"/> also hosts binary Squid packages. </para><section><title>Squid-2.7</title><screen><![CDATA[ pkg-get -i squid]]></screen></section></section></section><section><title>Compiling</title><para>In order to successfully build squid on Solaris, a complete build-chain has to be available. </para><section><title>Squid-3.x</title><para>In order to successfully build squid, a few GNU-related packages need to be available. Unfortunately, not all of the software is available on a stock Solaris install. </para><para>What you need is: </para><screen><![CDATA[ pkg install SUNWgnu-coreutils SUNWgtar SUNWgm4 SUNWgmake SUNWlxml  SUNWgsed]]></screen><para>and of course a compiler. You can choose between </para><screen><![CDATA[ pkg install SUNWgcc]]></screen><para>and  </para><screen><![CDATA[ pkg install sunstudioexpress SUNWbtool]]></screen><section><title>com_err.h: warning: ignoring #pragma ident</title><para>This problem occurs with certain kerberos library headers distributed with Solaris 10. It has been fixed in later release of the kerberos library. </para><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> Unfortunately the <code>/usr/include/kerberosv5/com_err.h</code> system-include file sports a #pragma directive which is not compatible with gcc. </para><para>There are several options available: </para><orderedlist numeration="arabic"><listitem><para>Upgrading your library to a working version is the recommended best option. </para></listitem><listitem><para>Applying a patch distributed with Squid ( <code>contrib/solaris/solaris-krb5-include.patch</code> ) which updates the krb5.h header to match the one found in later working krb5 library releases. </para></listitem><listitem><para>Editing com_err.h directly to change the line  </para></listitem></orderedlist><screen><![CDATA[#pragma ident   "%Z%%M% %I%     %E% SMI"]]></screen><para>to </para><screen><![CDATA[#if !defined(__GNUC__)
#pragma ident   "%Z%%M% %I%     %E% SMI"
#endif]]></screen></section><section><title>3.1 -enable-ipf-transparent support</title><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> Unfortunately the <code>/usr/include/inet/mib2.h</code> header required for IPF interception support clashes with <ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/Squid-3.1#">Squid-3.1</ulink> class definitions. This has been fixed in the 3.2 series. </para><para>For 3.1 to build you may need to run this class rename command in the top Squid sources directory: </para><screen><![CDATA[find . -type f -print | xargs perl -i -p -e 's/\b(IpAddress\b[^.])/Squid$1/g]]></screen></section></section><section><title>Squid-2.x and older</title><para>The following error occurs on Solaris systems using gcc when the Solaris C compiler is not installed: </para><screen><![CDATA[/usr/bin/rm -f libmiscutil.a
/usr/bin/false r libmiscutil.a rfc1123.o rfc1738.o util.o ...
make[1]: *** [libmiscutil.a] Error 255
make[1]: Leaving directory `/tmp/squid-1.1.11/lib'
make: *** [all] Error 1]]></screen><para>Note on the second line the <emphasis>/usr/bin/false</emphasis>.   This is supposed to be a path to the <emphasis>ar</emphasis> program.  If <emphasis>configure</emphasis> cannot find <emphasis>ar</emphasis> on your system, then it substitutes <emphasis>false</emphasis>. </para><para>To fix this you either need to: </para><itemizedlist><listitem><para>Add <emphasis>/usr/ccs/bin</emphasis> to your PATH.  This is where the <emphasis>ar</emphasis> command should be.  You need to install SUNWbtool if <emphasis>ar</emphasis> is not there.  Otherwise, </para></listitem><listitem><para>Install the <emphasis role="strong">binutils</emphasis> package from <ulink url="ftp://ftp.gnu.org/gnu/binutils">the GNU FTP site</ulink>. This package includes programs such as <emphasis>ar</emphasis>, <emphasis>as</emphasis>, and <emphasis>ld</emphasis>. </para></listitem></itemizedlist></section></section><section><title>Building from VCS</title><para>If you wish to build from the repository you also need the relevant VCS system, which can either be: </para><itemizedlist><listitem><para>CVS (see <ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/CvsInstructions#">CvsInstructions</ulink> for Squid-3 or Squid-2 repository details) </para></listitem></itemizedlist><screen><![CDATA[pkg install SUNWcvs]]></screen><itemizedlist><listitem><para>Bazaar (see <ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/BzrInstructions#">BzrInstructions</ulink> for Squid-3 repository details. </para><itemizedlist><listitem override="none"><para>You need to manually download bzr from <ulink url="http://bazaar-vcs.org/"/> and install it. It's simple, and its prerequisites (python) are present in the base setup. </para></listitem></itemizedlist></listitem></itemizedlist></section><section><title>Build-Farm</title><para>In addition to the standard building requirements, in build-farm deployment scenarios you also need: </para><screen><![CDATA[pkg install SUNWperl584usr]]></screen><para>and optional, but useful </para><screen><![CDATA[pkg install ccache]]></screen><para>and CPPunit to be installed from source: you can find it at <ulink url="http://sourceforge.net/projects/cppunit/"/>. In order to build it you'll have to patch the file <code>include/cppunit/portability/FloatingPoint.h</code> adding a include directive: </para><screen><![CDATA[#include <ieeefp.h>]]></screen><para>... And then you go on building the usual way <inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/smile.png" width="15"/></imageobject><textobject><phrase>:)</phrase></textobject></inlinemediaobject> </para></section><section><title>Troubleshooting</title><section><title>64-bit Solaris 9 with Squid 3.1 suddenly thinks local IP is :: or zero</title><para>When compiled 64-bit the <code> %&gt;a </code> and <code> %&gt;p </code> <ulink url="http://www.squid-cache.org/Doc/config/logformat#">logformat</ulink> directives log <emphasis role="strong">::</emphasis> and <emphasis role="strong">0</emphasis> respectively, and the DNS source filter starts rejecting DNS responses as it thinks their src IP is <emphasis role="strong">::</emphasis>. </para><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> This happens because Solaris 9 wrongly defined part of the universal IP address information structure <emphasis role="strong">struct addrinfo</emphasis>. We rely on this part for receiving remote IPs. </para></listitem></itemizedlist><para>Fixes for this problem include: </para><itemizedlist><listitem><para>Changing to Solaris 10 </para></listitem><listitem><para>Upgrading to a Squid-3.1.9 bug fix snapshot. </para></listitem><listitem><para>Using a 32-bit operating system build of Solaris 9 </para></listitem></itemizedlist><para>Reference: <ulink url="http://bugs.squid-cache.org/show_bug.cgi?id=3057"/> </para></section><section><title>Your cache is running out of filedescriptors</title><para>Solaris 9 and 10 support &quot;unlimited&quot; number of open files without patching. But you still need to take some actions as the kernel defaults to only allow processes to use up to 256 with a cap of 1024 filedescriptors, and Squid picks up the limit at build time. </para><itemizedlist><listitem><para>Before configuring Squid run <code> ulimit -HS -n $N</code> where $N is the number of filedescriptors you need to support). </para></listitem></itemizedlist><screen><![CDATA[ulimit -HS -n $N
./configure ...
make install]]></screen><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> Be sure to run <code>make clean</code> before ./configure if you have already run ./configure as the script might otherwise have cached the prior result. </para></listitem></itemizedlist><para>Make sure your script for starting Squid contains the above ulimit command to raise the filedescriptor limit while Squid is running. </para><screen><![CDATA[ulimit -HS -n $N
squid]]></screen><para>You may also need to allow a larger port span for outgoing connections. This is set in /proc/sys/net/ipv4/. For example: </para><screen><![CDATA[echo 1024 32768 > /proc/sys/net/ipv4/ip_local_port_range]]></screen></section><section><title>Squid cannot produce core dumps on Solaris 10 and above</title><para>If squid user has ulimit -c unlimited, squid runs from root but can't produce core dumps, check this: </para><screen><![CDATA[# coreadm
     global core file pattern: /var/core/core.%f.%p
     global core file content: default
       init core file pattern: /var/core/core.%f.%p
       init core file content: default
            global core dumps: enabled
       per-process core dumps: enabled
      global setid core dumps: disabled
 per-process setid core dumps: disabled
     global core dump logging: enabled]]></screen><para>On some setups setid dumps disabled due to some reasons. </para><para>To fix this run: </para><screen><![CDATA[# coreadm -e global-setid
# coreadm -e proc-setid
# coreadm -u
# coreadm
     global core file pattern: /var/core/core.%f.%p
     global core file content: default
       init core file pattern: /var/core/core.%f.%p
       init core file content: default
            global core dumps: enabled
       per-process core dumps: enabled
      global setid core dumps: enabled
 per-process setid core dumps: enabled
     global core dump logging: enabled]]></screen><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> <emphasis role="strong">Note:</emphasis> Don't edit /etc/coreadm.conf manually. Use commands above! </para></section><section><title>Squid process memory grows unlimited on Solaris 10 and above</title><para>On some setups this problem is critical. Regardless of the Squid's memory parameter or operating system memory settings Squid process under load increases indefinitely, resulting in swapping and catastrophic degradation of performance. In general, this leads to the inability to use Squid on this platform. </para><para>This issue is caused by a broken system memory allocator. When using a system which does not release the memory used by the cache. </para><para>Good news: Starting from release 8/11 Solaris contains new improved multi-threaded memory allocator library <emphasis><emphasis role="strong">libmtmalloc.so</emphasis></emphasis> (both 32 and 64 bit), which optimized for performance, heap fragmentation and memory consumption. It also including to Solaris 11 with performance improvements (read <ulink url="http://www.oracle.com/technetwork/articles/servers-storage-dev/mem-alloc-1557798.html">this article</ulink> and <ulink url="http://docs.oracle.com/cd/E23823_01/html/816-5173/libmtmalloc-3lib.html#REFMAN3Flibmtmalloc-3lib">this man page</ulink>). </para><para>You can use it to solve memory problem by at least three different ways. </para><para><emphasis role="strong">First</emphasis>: Globally preload. Whole system will use it. </para><para>Add this lines to /etc/profile: </para><screen><![CDATA[# Preload mtmalloc library
LD_PRELOAD=libmtmalloc.so
export LD_PRELOAD
LD_PRELOAD_64=libmtmalloc.so
export LD_PRELOAD_64]]></screen><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> <emphasis role="strong">Note:</emphasis> Some 32-bit applications from userland will be crash with this library. For example, vi editor from coreutils. You are warned! </para><para><emphasis role="strong">Second</emphasis>: To refine previous problem you can add this variables to separate user profile from which squid will be starts or to startup script. </para><para><emphasis role="strong">Third</emphasis>: The best way is link this memory library directly to Squid executables. </para><para>To do that just add -lmtmalloc to the end CXXFLAGS and CFLAGS options lists in Squid's ./configure command. </para><para>I.e., as in example below: </para><screen><![CDATA[./configure '--prefix=/usr/local/squid' '--enable-external-acl-helpers=none' '--enable-icap-client' '--enable-ecap' '--enable-ipf-transparent' '--enable-storeio=ufs,aufs,diskd' '--enable-removal-policies=lru,heap' '--enable-devpoll' '--disable-wccp' '--enable-wccpv2' '--enable-http-violations' '--enable-follow-x-forwarded-for' '--enable-htcp' '--enable-cache-digests' '--enable-auth-negotiate=none' '--disable-auth-digest' '--disable-auth-ntlm' '--disable-url-rewrite-helpers' '--enable-storeid-rewrite-helpers=file' '--enable-log-daemon-helpers=file' '--with-openssl' '--enable-ssl-crtd' '--enable-zph-qos' '--disable-snmp' '--enable-inline' '--with-build-environment=POSIX_V6_LP64_OFF64' 'CFLAGS=-O3 -m64 -mtune=core2 -pipe -lmtmalloc' 'CXXFLAGS=-O3 -m64 -mtune=core2 -pipe -lmtmalloc' 'CPPFLAGS=-I/opt/csw/include' 'LDFLAGS=-fPIE -pie -Wl,-z,now' 'PKG_CONFIG_PATH=/usr/local/lib/pkgconfig' --enable-build-info="Intercept/WCCPv2/SSL/CRTD/AUFS/DISKD/eCAP/64/GCC/mtmalloc Production"]]></screen><para>This solution is preferable. It's completely solves memory problem and increases Squid performance, especially with aufs. </para><para><emphasis role="strong">Note</emphasis>: Be sure you are add /usr/lib and /usr/lib/64 in system trusted linker path. To do that first run something like: </para><screen><![CDATA[crle -c /var/ld/ld.config -l /lib:/usr/lib:/usr/local/lib:/opt/csw/lib:/usr/sfw/lib
crle -64 -c /var/ld/64/ld.config -l /lib/64:/usr/lib/64:/opt/csw/lib/64:/usr/sfw/lib/64]]></screen><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> Don't use LD_LIBRARY_PATH! Use crle command instead! </para></section><section><title>Squid process memory grows unlimited with an interception proxy</title><para>The common place - Squid grows unlimited in interception mode on Solaris 10 and above with IPFilter. This also accomplish Squid session aborts (high TCP_MISS_ABORTED in access.log) periodically. Squid/OS/IPFilter restarts fix this, but temporary. </para><para>This problem occurs due to conservative IPFilter settings, especially with <emphasis>keep state</emphasis> option.  </para><para>The default settings is too low for excessive Squid's sessions: </para><screen><![CDATA[# ipf -T list | grep fr_state
fr_statemax     min 0x1 max 0x7fffffff  current 50000
fr_statesize    min 0x1 max 0x7fffffff  current 5737
fr_state_lock   min 0   max 0x1 current 0
fr_state_maxbucket      min 0x1 max 0x7fffffff  current 26
fr_state_maxbucket_reset        min 0   max 0x1 current 1]]></screen><para>This leads to overflow firewall state tables and, following, to memory overflow, and, also, to randonly client sessions abort. </para><para>To fix this you can either tune-up IPFilter timings, or, more simple, increase states tables. </para><para>To do that you need (on running system): </para><para>First, disable IPFilter: </para><screen><![CDATA[# svcadm disable ipfilter]]></screen><para>Second, tune up settings above to be reasonable big: </para><screen><![CDATA[# ipf -T fr_statemax=105000,fr_statesize=150001]]></screen><para><emphasis role="strong">Note</emphasis>: <emphasis>fr_statesize</emphasis> must be prime number, <emphasis>fr_statemax</emphasis> must be ~70% of <emphasis>fr_statesize</emphasis>. </para><para>Third, enable IPFilter again: </para><screen><![CDATA[# svcadm enable ipfilter]]></screen><para>And fourth, set this values to be permanent across reboot: </para><screen><![CDATA[# vi /usr/kernel/drv/ipf.conf]]></screen><para>/usr/kernel/drv/ipf.conf contents must be: </para><screen><![CDATA[#
#
#name="ipf" parent="pseudo" instance=0;
name="ipf" parent="pseudo" instance=0 fr_statemax=105000 fr_statesize=150001;]]></screen><para>Finally, run: </para><screen><![CDATA[# devfsadm -i ipf]]></screen><para>to update ipf driver settings. </para><para>Then restart your Squid. The problem is gone. </para><para>You can check your settings big enough by using memory monitor tools and command: </para><screen><![CDATA[# ipfstat | grep lost
fragment state(in):     kept 0  lost 0  not fragmented 0
fragment state(out):    kept 0  lost 0  not fragmented 0
packet state(in):       kept 39767      lost 0
packet state(out):      kept 39403      lost 0]]></screen><para><emphasis role="strong">lost</emphasis> values must be zero all time. </para><para><emphasis role="strong">Note</emphasis>: In some cases you may want to tune timing settings of IPFilter: </para><screen><![CDATA[fr_tcpidletimeout=7200
fr_tcpclosewait=120
fr_tcplastack=120
fr_tcptimeout=240
fr_tcpclosed=60
fr_tcphalfclosed=300
fr_udptimeout=90
fr_icmptimeout=35]]></screen><para>as described above (simple add this parameters to statemax and statesize). </para><para>Also you may want to adjust NAT table if we are enough buckets and decrease NAT/RDR rules table: </para><screen><![CDATA[ipf_nattable_sz = 150001
ipf_natrules_sz = 127
ipf_rdrrules_sz = 127]]></screen><para><emphasis role="strong">Note</emphasis>: Be sure your TCP stack settings is not changed with ECN (<emphasis>tcp_ecn_permitted</emphasis> parameter) and WScale (<emphasis>tcp_wscale_always</emphasis> parameter). Also you can want to set <emphasis>ip_path_mtu_discovery</emphasis> to enabled (if your network environment uses PMTUD). This will minimize interruptions sessions, especially <ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/YouTube#">YouTube</ulink>. </para></section><section><title>Squid 3.5.x and 4.x.x dies under workload when run under Solaris 10 and above</title><para>In most common setups on Solaris 10 and above you can experience problems with Squid 3.5.x and 4.x.x - it dies under heavy load, when reconfigure/restart or without any visible reasons during runtime. Sometimes you got assertions, sometimes FATAL errors with core dump. </para><para>Debug mostly often says, that async call got a timeout or something like. </para><para>To build Squid 3.5.x and 4.x.x more stable under this OS, you must know: </para><para>Starting with Solaris 10 operating system contains <emphasis role="strong">pthreads</emphasis> library as wrapper over system libthreads.  </para><para><emphasis role="strong">Note:</emphasis> Solaris native threads library is incompatible with POSIX threading library. As by as Squid uses pthreads by default, you will experience sporadically dies problems, especially when using <emphasis>aufs</emphasis>. So, may be better to continue use diskd on this OS. </para><para>So, to troubleshoot this issue and increase Squid's stability, you need to stop using POSIX threads, and - replace it with system native libthreads. Also note: Solaris libthreads is dependent from system libpthreads library. </para><para>To do that you need add <emphasis>-lthread</emphasis> and <emphasis>-lpthread</emphasis> to CFLAGS, CXXFLAGS and LIBS: </para><screen><![CDATA[./configure 'CFLAGS=-march=native -pipe -lthread -lpthread' 'CXXFLAGS=-march=native -pipe -lthread -lpthread' 'LDFLAGS=-m64' 'LIBS=-lthread -lpthread']]></screen><para>Also you can combine Solaris native threading library with multithreading navive memory allocator to increase performance and reduce contention (example): </para><screen><![CDATA[### -lmtmalloc is Solaris-specific tune.
### -lthread is Solaris threading library
./configure '--prefix=/usr/local/squid' '--enable-translation' '--enable-external-acl-helpers=none' '--enable-icap-client' '--enable-ecap' '--enable-ipf-transparent' '--enable-storeio=ufs,aufs,diskd,rock' '--enable-removal-policies=lru,heap' '--enable-devpoll' '--disable-wccp' '--enable-wccpv2' '--enable-http-violations' '--enable-follow-x-forwarded-for' '--enable-arp-acl' '--enable-htcp' '--enable-cache-digests' '--enable-auth-negotiate=none' '--disable-auth-digest' '--disable-auth-ntlm' '--disable-url-rewrite-helpers' '--enable-storeid-rewrite-helpers=file' '--enable-log-daemon-helpers=file' '--with-openssl' '--enable-ssl-crtd' '--enable-zph-qos' '--disable-snmp' '--enable-inline' '--with-build-environment=POSIX_V6_LP64_OFF64' 'CFLAGS=-march=native -O3 -m64 -pipe -lmtmalloc -lthread -lpthread' 'CXXFLAGS=-march=native -O3 -m64 -pipe -lmtmalloc -lthread -lpthread' 'LIBOPENSSL_CFLAGS=-I/opt/csw/include/openssl' 'CPPFLAGS=-I/opt/csw/include' 'LDFLAGS=-m64' 'LIBS=-lmtmalloc -lthread -lpthread' 'PKG_CONFIG_PATH=/usr/local/lib/pkgconfig' '--disable-strict-error-checking' --enable-build-info="Intercept/WCCPv2/SSL/CRTD/(A)UFS/DISKD/ROCK/eCAP/64/GCC/mtmalloc Production"]]></screen><para>After configuration, run gmake &amp;&amp; gmake install-strip as usual and restart your Squid. </para></section><section><title>Building Squid on Solaris 11 with --enable-ipf-transparent configuration</title><para>Solaris 11 has an issue, which preventing build Squid (any version starting from 3.5.x) on Solaris 11. </para><para>The root of evil is: Solaris 11 (up to 11.3) contains IPFilter headers from Solaris 10 (without changes). However, in Solaris 11 IPFilter binaries uses different type for integers (it is bug, unknown to Oracle AFAIK). So, Squid throw error during make and can't be build. </para><para>Here is workaround (better than install Linux instead of Solaris). </para><para>Find subdirectory include-fixed/netinet under your Solaris GCC installation, for example: </para><para>/opt/csw/lib/gcc/i386-pc-solaris2.10/5.2.0/include-fixed/netinet/ </para><para>Find files ip_compat.h and ip_fil.h in this directory. </para><para>Replace it to this files: </para><para><ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/KnowledgeBase/Solaris?action=AttachFile&amp;do=get&amp;target=ip_compat.h">ip_compat.h</ulink> <ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/KnowledgeBase/Solaris?action=AttachFile&amp;do=get&amp;target=ip_fil.h">ip_fil.h</ulink> </para><para>then configure and make squid. </para><para>Don't replace IPFilter system headers in /usr/include/netinet, you can break anything else. Just replace GCC-generated headers in directory above. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/KnowledgeBase/Solaris/CategoryKnowledgeBase#">CategoryKnowledgeBase</ulink> </para></section></section></article>