<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>KnowledgeBase/BrokenWindowSize</title><revhistory><revision><revnumber>2</revnumber><date>2008-05-18 19:38:56</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>1</revnumber><date>2007-04-09 15:48:30</date><authorinitials>AdrianChadd</authorinitials></revision></revhistory></articleinfo><section><title>Identifying and working around sites with broken TCP Window Scaling</title><para><emphasis role="strong">Synopsis</emphasis> </para><para>Many servers on the internet now implement the TCP window scaling open (covered in RFC1323). TCP Window scaling is implemented during the TCP handshake process and allows internet-connected hosts to communicate much more data before waiting for an ACKnowledge from the peer. This becomes important when talking to hosts more than a hundred or so milliseconds away. </para><para>Unfortunately many firewalls implement window scale processing incorrectly and will cause issues when connecting from a server configured to use TCP window scaling. The symptoms, covered below, generally bring a halt to traffic transfers. </para><para>By default, TCP window scaling is enabled in most modern server operating systems. </para><para><emphasis role="strong">Symptoms</emphasis> </para><itemizedlist><listitem><para>Connections complete correctly; </para></listitem><listitem><para>Some data may be transferred; </para></listitem><listitem><para>Eventually the connection &quot;hangs&quot; with no further progress, </para></listitem><listitem><para>Sometimes downloaded files can appear truncated. </para></listitem></itemizedlist><para><emphasis role="strong">Explanation</emphasis> </para><para>Normal TCP windows operate with a 16-bit window size - allowing, by default, a maximum of 64 kbytes (65536 bytes) to be in-flight at any time. This works well on very low latency links (as TCP throughput can be naively thought of as window size * RTT; ie (window size) data will be sent before an ACK is received, and ACKs take (RTT) to be received) but doesn't work well on higher latency international links. </para><para>TCP window scaling was brought in to allow peers to negotiate much higher window sizes and thus transfer more data before an ACK is required. The scaling option shifts the window size right by a number of bits - the scaling factor - allowing for much larger windows. </para><para>A TCP scaling factor of 0 represents a normal window size (0 - 65536 bytes, in one byte increments); A TCP scaling factor of 1 represents a window size of 0 to 131072 bytes, in two byte increments; A TCP scaling factor of 2 represents a window size of 0 to 262144 bytes, in four byte increments; and so on. </para><para>The issue comes when a firewall or other packet inspection and filtering device gets its grubby fingers into the packet stream. The correct behaviour for a firewall which does not understand a TCP option such as TCP scaling should be to remove the option entirely. However some firewalls are <emphasis role="strong">zeroing</emphasis> the TCP scale field. Both peers believe the other peer has ACKed its sent scaling factor when in fact they've ACKed a scaling factor of 0. Traffic then begins flowing normally but the TCP windows advertised by both peers are interpreted incorrectly. </para><para>The results can be unpredictable - some report TCP performance is very slow; others report connections stall after some data is transferred (and as the TCP window size advertised increases, so does the discrepancy between what the peer thinks its sending and what the other peer interprets it as.) </para><para>This isn't such a problem with desktops talking directly to servers because desktops typically have small window sizes and TCP scale factors configured and thus they tend not to be too far &quot;out of whack&quot; with what the server believes. Modern server operating systems tend to have larger window sizes and TCP scale factors which tend to aggrivate the issue. </para><para><emphasis role="strong">Workaround</emphasis> </para><para>The workaround is to entirely disable TCP window scaling on your Squid proxy server. Under Linux this is done by: </para><itemizedlist><listitem override="none"><para>echo 0 &gt; /proc/sys/net/ipv4/tcp_default_win_scale </para></listitem></itemizedlist><para>Other platforms will implement it differently. </para><para>Another possibility is to add in specific routes to target networks which force a TCP window size maximum of 65535. This currently can't be done automatically by Squid. </para><para><emphasis role="strong">Thanks</emphasis> </para><para>Thanks to Adrian Chadd for assembling this article from a variety of sources. </para><para><emphasis role="strong">References</emphasis> </para><itemizedlist><listitem><para><ulink url="http://www.faqs.org/rfcs/rfc1323.html"/> - TCP Extensions for High Performance </para></listitem><listitem><para><ulink url="http://lwn.net/Articles/92727/"/> - TCP window scaling and broken routers </para></listitem></itemizedlist><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/KnowledgeBase/BrokenWindowSize/CategoryKnowledgeBase#">CategoryKnowledgeBase</ulink> </para></section></article>