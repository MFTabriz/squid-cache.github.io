<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/HTTPS</title><revhistory><revision><revnumber>16</revnumber><date>2020-05-06 23:35:00</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>15</revnumber><date>2020-05-06 23:34:50</date><authorinitials>AmosJeffries</authorinitials><revremark>update references and text about RFC 2818 HTTPS details</revremark></revision><revision><revnumber>14</revnumber><date>2020-05-06 23:28:14</date><authorinitials>AmosJeffries</authorinitials><revremark>Revert to revision 12.</revremark></revision><revision><revnumber>13</revnumber><date>2020-05-06 23:22:12</date><authorinitials>AmosJeffries</authorinitials><revremark>replace SHTP text with a reference to other page</revremark></revision><revision><revnumber>12</revnumber><date>2020-05-06 23:20:38</date><authorinitials>AmosJeffries</authorinitials><revremark>fix typos and add related feature references for SHTTP etc</revremark></revision><revision><revnumber>11</revnumber><date>2017-02-17 03:22:34</date><authorinitials>AmosJeffries</authorinitials><revremark>add some details from Firefox bugzilla since last edit.</revremark></revision><revision><revnumber>10</revnumber><date>2016-07-26 15:24:57</date><authorinitials>AmosJeffries</authorinitials><revremark>spelling and OpenSSL detection info fixes</revremark></revision><revision><revnumber>9</revnumber><date>2015-06-24 09:43:55</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Mention 3.5+ ssl-related build features (Bug 4262)</revremark></revision><revision><revnumber>8</revnumber><date>2014-10-21 01:31:51</date><authorinitials>AmosJeffries</authorinitials><revremark>firefox 33 has initial TLS proxy support now.</revremark></revision><revision><revnumber>7</revnumber><date>2014-06-26 05:21:53</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>6</revnumber><date>2011-12-22 10:59:17</date><authorinitials>AmosJeffries</authorinitials><revremark>typo header syntax.</revremark></revision><revision><revnumber>5</revnumber><date>2011-12-22 10:56:34</date><authorinitials>AmosJeffries</authorinitials><revremark>mention Chrome and Firefox status for browser to proxy links.</revremark></revision><revision><revnumber>4</revnumber><date>2011-10-12 23:29:49</date><authorinitials>AmosJeffries</authorinitials><revremark>RFC link updates. also rename browser-&gt;squid as encrypted. we can't call bit secure now that SSL can be intercepted and bumped.</revremark></revision><revision><revnumber>3</revnumber><date>2011-10-12 18:01:33</date><authorinitials>AlexRousskov</authorinitials><revremark>Polished and detailed description of various HTTPS traffic models and what Squid can do with them</revremark></revision><revision><revnumber>2</revnumber><date>2011-10-11 23:55:01</date><authorinitials>AmosJeffries</authorinitials><revremark>expand the use-case descriptions.</revremark></revision><revision><revnumber>1</revnumber><date>2011-06-05 12:53:31</date><authorinitials>AmosJeffries</authorinitials><revremark>import form FAQ about page. this is a full supported feature (or three). needs a lot of polish</revremark></revision></revhistory></articleinfo><section><title>Feature: HTTPS (HTTP Secure or HTTP over TLS)</title><itemizedlist><listitem><para><emphasis role="strong">Version</emphasis>: 2.5 </para></listitem><listitem><para><emphasis role="strong">More</emphasis>: RFC <ulink url="https://tools.ietf.org/rfc/rfc2817#">2817</ulink>, <ulink url="https://tools.ietf.org/rfc/rfc2818#">2818</ulink>, <ulink url="https://wiki.squid-cache.org/Features/HTTPS/Features/SHTTP#">Features/SHTTP</ulink> </para></listitem></itemizedlist><para>When a client comes across an <emphasis role="strong"><ulink url="https://"/></emphasis> URL, it can do one of three things: </para><itemizedlist><listitem><para>opens an TLS connection directly to the origin server, or </para></listitem><listitem><para>opens a tunnel through a proxy to the origin server using the <emphasis>CONNECT</emphasis> request method, or </para></listitem><listitem><para>opens an TLS connection to a secure proxy. </para></listitem></itemizedlist><para>Squid interaction with these traffic types is discussed below. </para></section><section><title>CONNECT tunnel</title><para>The <emphasis>CONNECT</emphasis> method is a way to tunnel any kind of connection through an HTTP proxy. By default, the proxy establishes a TCP connection to the specified server, responds with an HTTP 200 (Connection Established) response, and then shovels packets back and forth between the client and the server, without understanding or interpreting the tunneled traffic. For the gory details on tunneling and the CONNECT method, please see RFC <ulink url="https://tools.ietf.org/rfc/rfc2817#">2817</ulink> and the expired <ulink url="http://www.web-cache.com/Writings/Internet-Drafts/draft-luotonen-web-proxy-tunneling-01.txt">Tunneling TCP based protocols through Web proxy servers</ulink> draft. </para><section><title>CONNECT tunnel through Squid</title><para>When a browser establishes a CONNECT tunnel through Squid, <ulink url="https://wiki.squid-cache.org/Features/HTTPS/SquidFaq/SquidAcl#">Access Controls</ulink> are able to control CONNECT requests, but only limited information is available. For example, many common parts of the request URL do not exist in a CONNECT request: </para><itemizedlist><listitem><para>the URL scheme or protocol (e.g., <ulink url="http://"/>, <ulink url="https://"/>, <ulink url="ftp://"/>, voip://, itunes://, or <ulink url="telnet://"/>), </para></listitem><listitem><para>the URL path (e.g., <emphasis>/index.html</emphasis> or <emphasis>/secure/images/</emphasis>), </para></listitem><listitem><para>and query string (e.g. <emphasis>?a=b&amp;c=d</emphasis>) </para></listitem></itemizedlist><para>With HTTPS, the above parts are present in <emphasis>encapsulated</emphasis> HTTP requests that flow through the tunnel, but Squid does not have access to those encrypted messages. Other tunneled protocols may not even use HTTP messages and URLs (e.g., telnet). </para><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/alert.png" width="15"/></imageobject><textobject><phrase>/!\</phrase></textobject></inlinemediaobject> It is important to notice that the protocols passed through CONNECT are not limited to the ones Squid normally handles. Quite literally <emphasis role="strong">anything</emphasis> that uses a two-way TCP connection can be passed through a CONNECT tunnel. This is why the Squid <ulink url="https://wiki.squid-cache.org/Features/HTTPS/SquidFaq/SecurityPitfalls#The_Safe_Ports_and_SSL_Ports_ACL">default ACLs</ulink> start with <emphasis role="strong"> <code>deny CONNECT !SSL_Ports</code> </emphasis> and why you must have a very good reason to place any type of <emphasis>allow</emphasis> rule above them. </para></listitem></itemizedlist></section><section><title>Intercepting CONNECT tunnels</title><para>A browser sends CONNECT requests when it is configured to talk to a proxy. Thus, it should <emphasis>not</emphasis> be necessary to intercept a CONNECT request. TBD: Document what happens of Squid does intercept a CONNECT request, either because Squid was [mis]configured to intercept traffic destined to another proxy OR because a possibly malicious client sent a hand-crafted CONNECT request knowing that it is going to be intercepted. </para></section><section><title>Bumping CONNECT tunnels</title><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> <emphasis role="strong">WARNING:</emphasis> <inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject>  HTTPS was designed to give users an expectation of privacy and security. Decrypting HTTPS tunnels without user consent or knowledge may violate ethical norms and may be illegal in your jurisdiction. Squid decryption features described here and elsewhere are designed for deployment with <emphasis>user consent</emphasis> or, at the very least, in environments where decryption without consent is legal. These features also illustrate why users should be careful with trusting HTTPS connections and why the weakest link in the chain of HTTPS protections is rather fragile. Decrypting HTTPS tunnels constitutes a man-in-the-middle attack from the overall network security point of view. Attack tools are an equivalent of an atomic bomb in real world: Make sure you understand what you are doing and that your decision makers have enough information to make wise choices. </para></listitem></itemizedlist><para>Squid <ulink url="https://wiki.squid-cache.org/Features/HTTPS/Features/SslBump#">SslBump</ulink> and associated features can be used to decrypt HTTPS CONNECT tunnels while they pass through a Squid proxy. This allows dealing with tunneled HTTP messages as if they were regular HTTP messages, including applying detailed access controls and performing content adaptation (e.g., check request bodies for information leaks and check responses for viruses). Configuration mistakes, Squid bugs, and malicious attacks may lead to unencrypted messages escaping Squid boundaries. </para><para>From the browser point of view, encapsulated messages are not sent to a proxy. Thus, general interception limitations, such as inability to authenticate individual embedded requests, apply here as well. </para></section></section><section><title>Direct TLS connection</title><para>When a browser creates a direct TLS connection with an origin server, there are no HTTP CONNECT requests. The first HTTP request sent on such a connection is already encrypted. In most cases, Squid is out of the loop: Squid knows nothing about that connection and cannot block or proxy that traffic. The reverse proxy and interception exceptions are described below. </para><section><title>Direct TLS connection to a reverse proxy</title><para>Squid-2.5 and later can terminate TLS or SSL connections. You must have built with <emphasis>--enable-ssl</emphasis>. See <ulink url="http://www.squid-cache.org/Doc/config/https_port#">https_port</ulink> for more information. Squid-3.5 and later autodetect the availability of GnuTLS library and enable the functionality if available. OpenSSL must be enabled explicitly with the <emphasis>--with-openssl</emphasis> configure option. If the library is installed in a non-standard location you may need to use the <emphasis>--with-foo=PATH</emphasis> configure option. See <emphasis>configure --help</emphasis> for details. </para><para>This is perhaps most useful in a surrogate (aka, http accelerator, reverse proxy) configuration. Simply configure Squid with a normal <ulink url="https://wiki.squid-cache.org/Features/HTTPS/ConfigExamples#Reverse_Proxy_.28Acceleration.29">reverse proxy</ulink> configuration using port 443 and SSL certificate details on an <ulink url="http://www.squid-cache.org/Doc/config/https_port#">https_port</ulink> line. </para></section><section><title>Intercepting direct TLS connections</title><para>It is possible to <ulink url="https://wiki.squid-cache.org/Features/HTTPS/SquidFaq/InterceptionProxy#">intercept</ulink> an HTTPS connection to an origin server at Squid's <ulink url="http://www.squid-cache.org/Doc/config/https_port#">https_port</ulink>. This may be useful in surrogate (aka, http accelerator, reverse proxy) environments, but limited to situations where Squid can represent the origin server using that origin server SSL certificate. In most situations though, intercepting direct HTTPS connections will not work and is pointless because Squid cannot do anything with the encrypted traffic -- Squid is not a TCP-level proxy. </para></section><section><title>Bumping direct TLS connections</title><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> <emphasis role="strong">WARNING:</emphasis> <inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject>  HTTPS was designed to give users an expectation of privacy and security. Decrypting HTTPS tunnels without user consent or knowledge may violate ethical norms and may be illegal in your jurisdiction. Squid decryption features described here and elsewhere are designed for deployment with <emphasis>user consent</emphasis> or, at the very least, in environments where decryption without consent is legal. These features also illustrate why users should be careful with trusting HTTPS connections and why the weakest link in the chain of HTTPS protections is rather fragile. Decrypting HTTPS tunnels constitutes a man-in-the-middle attack from the overall network security point of view. Attack tools are an equivalent of an atomic bomb in real world: Make sure you understand what you are doing and that your decision makers have enough information to make wise choices. </para></listitem></itemizedlist><para>A combination of Squid <ulink url="https://wiki.squid-cache.org/Features/HTTPS/SquidFaq/InterceptionProxy#">NAT Interception</ulink>, <ulink url="https://wiki.squid-cache.org/Features/HTTPS/Features/SslBump#">SslBump</ulink>, and associated features can be used to intercept direct HTTPS connections and decrypt HTTPS messages while they pass through a Squid proxy. This allows dealing with HTTPS messages sent to the origin server as if they were regular HTTP messages, including applying detailed access controls and performing content adaptation (e.g., check request bodies for information leaks and check responses for viruses). Configuration mistakes, Squid bugs, and malicious attacks may lead to unencrypted messages escaping Squid boundaries. </para><para>Currently, Squid-to-client traffic on intercepted direct HTTPS connections cannot use <ulink url="https://wiki.squid-cache.org/Features/HTTPS/Features/DynamicSslCert#">Dynamic Certificate Generation</ulink>, leading to browser warnings and rendering such configurations nearly impractical. This limitation will be addressed by the <ulink url="https://wiki.squid-cache.org/Features/HTTPS/Features/BumpSslServerFirst#">bump-server-first</ulink> project. </para><para>From the browser point of view, intercepted messages are not sent to a proxy. Thus, general interception limitations, such as inability to authenticate requests, apply to bumped intercepted transactions as well. </para></section></section><section><title>Encrypted browser-Squid connection</title><para>Squid can accept regular proxy traffic using <ulink url="http://www.squid-cache.org/Doc/config/https_port#">https_port</ulink> in the same way Squid does it using an <ulink url="http://www.squid-cache.org/Doc/config/http_port#">http_port</ulink> directive. RFC <ulink url="https://tools.ietf.org/rfc/rfc2818#">2818</ulink> defines the protocol requirements around this. </para><para>Unfortunately, popular modern browsers do not yet permit configuration of TLS encrypted proxy connections. There are open bug reports against most of those browsers now, waiting for support to appear. If you have any interest, please assist browser teams with getting that to happen. </para><para>Meanwhile, tricks using stunnel or SSH tunnels are required to encrypt the browser-to-proxy connection before it leaves the client machine. These are somewhat heavy on the network and can be slow as a result. </para><section><title>Chrome</title><para>The Chrome browser is able to connect to proxies over TLS connections if configured to use one in a PAC file or command line switch. GUI configuration appears not to be possible (yet). </para><para>More details at <ulink url="http://dev.chromium.org/developers/design-documents/secure-web-proxy"/> </para></section><section><title>Firefox</title><para>The Firefox 33.0 browser is able to connect to proxies over TLS connections if configured to use one in a PAC file. GUI configuration appears not to be possible (yet), though there is a config hack for <ulink url="https://bugzilla.mozilla.org/show_bug.cgi?id=378637#c68">embedding PAC logic</ulink>. </para><para>There is still an important bug open: </para><itemizedlist><listitem><para>Using a client certificate authentication to a proxy: <ulink url="https://bugzilla.mozilla.org/show_bug.cgi?id=209312"/> </para></listitem></itemizedlist><para>If you have trouble with adding trust for the proxy cert, there is <ulink url="https://bugzilla.mozilla.org/show_bug.cgi?id=378637#c65">a process</ulink> by Patrick <ulink url="https://wiki.squid-cache.org/Features/HTTPS/McManus#">McManus</ulink> to workaround that.  </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/Features/HTTPS/CategoryFeature#">CategoryFeature</ulink> </para></section></section></article>