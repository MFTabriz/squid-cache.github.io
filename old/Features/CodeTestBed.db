<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/CodeTestBed</title><revhistory><revision><revnumber>30</revnumber><date>2018-05-20 10:03:36</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>29</revnumber><date>2013-08-07 13:42:20</date><authorinitials>AmosJeffries</authorinitials><revremark>Coverity testing is now automatic. and we now have a auth test in layer 05</revremark></revision><revision><revnumber>28</revnumber><date>2012-10-29 14:06:47</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added link to coverity testing</revremark></revision><revision><revnumber>27</revnumber><date>2011-03-20 23:12:16</date><authorinitials>AmosJeffries</authorinitials><revremark>link updates</revremark></revision><revision><revnumber>26</revnumber><date>2010-10-28 09:11:54</date><authorinitials>FrancescoChemolli</authorinitials><revremark>completed.</revremark></revision><revision><revnumber>25</revnumber><date>2010-02-19 10:36:35</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Fixed dangling wiki-links</revremark></revision><revision><revnumber>24</revnumber><date>2009-10-02 11:11:12</date><authorinitials>AmosJeffries</authorinitials><revremark>Adding a layer to test plug-n-play type components.</revremark></revision><revision><revnumber>23</revnumber><date>2009-08-09 08:18:26</date><authorinitials>AmosJeffries</authorinitials><revremark>BuildFarm underway for testing</revremark></revision><revision><revnumber>22</revnumber><date>2009-02-08 22:23:20</date><authorinitials>AmosJeffries</authorinitials><revremark>we'd like access to every machine type for tinkering, but thats voluntary.</revremark></revision><revision><revnumber>21</revnumber><date>2009-02-08 05:42:11</date><authorinitials>AmosJeffries</authorinitials><revremark>add section for multi-OS testing</revremark></revision><revision><revnumber>20</revnumber><date>2009-01-27 01:20:15</date><authorinitials>AmosJeffries</authorinitials><revremark>extend failure case for semi-failures.</revremark></revision><revision><revnumber>19</revnumber><date>2009-01-18 18:29:10</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Simplified some links</revremark></revision><revision><revnumber>18</revnumber><date>2009-01-18 04:02:23</date><authorinitials>AmosJeffries</authorinitials><revremark>sourcelayout is also being done.</revremark></revision><revision><revnumber>17</revnumber><date>2009-01-18 03:48:45</date><authorinitials>AmosJeffries</authorinitials><revremark>stage 3 was done while back.</revremark></revision><revision><revnumber>16</revnumber><date>2009-01-18 03:45:37</date><authorinitials>AmosJeffries</authorinitials><revremark>adding fail-test support.</revremark></revision><revision><revnumber>15</revnumber><date>2008-09-14 04:24:55</date><authorinitials>AmosJeffries</authorinitials><revremark>this really is a 3.1+ item.</revremark></revision><revision><revnumber>14</revnumber><date>2008-08-20 02:19:15</date><authorinitials>AmosJeffries</authorinitials><revremark>up to stage 4 now...</revremark></revision><revision><revnumber>13</revnumber><date>2008-07-11 15:07:14</date><authorinitials>AmosJeffries</authorinitials><revremark>Update tasks needing help.</revremark></revision><revision><revnumber>12</revnumber><date>2008-07-11 14:58:57</date><authorinitials>AmosJeffries</authorinitials><revremark>Describe component testing control files</revremark></revision><revision><revnumber>11</revnumber><date>2008-07-11 14:33:46</date><authorinitials>AmosJeffries</authorinitials><revremark>Add TOC</revremark></revision><revision><revnumber>10</revnumber><date>2008-05-18 19:38:56</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>9</revnumber><date>2008-04-22 01:11:02</date><authorinitials>AmosJeffries</authorinitials><revremark>correct timeline and status.</revremark></revision><revision><revnumber>8</revnumber><date>2008-04-19 04:22:36</date><authorinitials>AmosJeffries</authorinitials><revremark>add an action-plan</revremark></revision><revision><revnumber>7</revnumber><date>2008-03-24 21:05:02</date><authorinitials>AlexRousskov</authorinitials><revremark>We should not dump everything related to testing into one Feature. For example, performance testing should be a separate Feature. Let's limit this Feature to source-code (whitebox) testing.</revremark></revision><revision><revnumber>6</revnumber><date>2008-03-22 06:26:46</date><authorinitials>AmosJeffries</authorinitials><revremark>testheaders.sh is in now.</revremark></revision><revision><revnumber>5</revnumber><date>2008-03-10 05:38:29</date><authorinitials>AmosJeffries</authorinitials><revremark>ETA for part 1 is closer.</revremark></revision><revision><revnumber>4</revnumber><date>2008-03-06 05:18:07</date><authorinitials>AmosJeffries</authorinitials><revremark>Alex has been working on this too..</revremark></revision><revision><revnumber>3</revnumber><date>2008-03-06 04:10:02</date><authorinitials>AmosJeffries</authorinitials><revremark>add section on architectural level changes needed and logically following for code cleanup</revremark></revision><revision><revnumber>2</revnumber><date>2008-03-06 04:02:12</date><authorinitials>AmosJeffries</authorinitials><revremark>get the sub-header levels right</revremark></revision><revision><revnumber>1</revnumber><date>2008-03-06 03:32:06</date><authorinitials>AmosJeffries</authorinitials></revision></revhistory></articleinfo><section><title>Feature: Source Code Testing</title><itemizedlist><listitem><para><emphasis role="strong">Goal</emphasis>: To provide a comprehensive whitebox code testing environment for Squid-3 </para></listitem><listitem><para><emphasis role="strong">Status</emphasis>: Completed </para></listitem><listitem><para><emphasis role="strong">Version</emphasis>: 3.1 </para></listitem><listitem><para><emphasis role="strong">Developer</emphasis>: <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/AmosJeffries#">AmosJeffries</ulink>, <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/AlexRousskov#">AlexRousskov</ulink>, <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/FrancescoChemolli#">FrancescoChemolli</ulink>, everyone </para></listitem></itemizedlist><section><title>Details</title><para>The Squid-3 developers have decided that the Squid-3 codebase can now handle a better method of testing than just ad-hoc CPP Unit-tests and developer self-testing. </para><para>This testing involves a number of changes to both the codebase and current developer practices. </para></section><section><title>Automated Code Testing</title><itemizedlist><listitem><para>CPP Unit-Tests. (Already provided ad-hoc by cppunit tools, more to be added) </para></listitem><listitem><para>valgrind memory management testing. (Integrated for use, but not used regularly by all developers yet. This may be included in the Patching Guidelines.) </para></listitem><listitem><para>other tests may yet be chosen for use. </para></listitem></itemizedlist><informaltable><tgroup cols="3"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para> <emphasis role="strong">Stage</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">Status</emphasis> * </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">Actions</emphasis> </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 1 </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">DONE</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> 3.0+ Automated build-testing of releases </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 2 </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">DONE</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> 3.1+ Automated dependency testing of code </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 3 </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">DONE</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> 3.0+ Daily automated test </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 4 </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">DONE</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> Test scheduling on multiple OS see <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/BuildFarm#">BuildFarm</ulink> </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 5 </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">DONE</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> Automated defect tracking see <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/CoverityTesting#">CoverityTesting</ulink> </para></entry></row></tbody></tgroup></informaltable><para>* <emphasis role="strong">NP</emphasis>: All stages of this system implementation may involve ongoing improvements. The status here is merely an indication that the stage actions have been implemented and begun to be used. </para><section><title>Taking Part in the Testing</title><para>see <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/BuildFarm#">BuildFarm</ulink> on whats needed and how to volunteer time on a machine as a test slave. </para></section><section><title>Tasks needing a volunteer:</title><itemizedlist><listitem><para>Locating and listing all the classes which are NOT yet unit-tested </para></listitem><listitem><para>Locating and marking all the class methods which are not yet unit-tested </para></listitem><listitem><para>Adding unit-tests for the above </para></listitem></itemizedlist></section></section><section><title>Component Test Controls</title><para>We now have a set of test-suite scripts for quick and easy compile tests of any component in Squid. This is controlled by a set of files in the source code called test-suite/buildtests/layer-N-*.opts . </para><para>They provide a simple OPTS environment variable to the test mechanism which contains a list of the ./configure switches to build during their test run. </para><para>They are split into a set of layers which get run sequentially during testing. Each layer provides a different level of component functionality and gets run separately. The layers are constructed according to the component independence. Multiple non-intersecting components can be tested in a single run. But intersecting components must have all their permutations tested. With two special-case layers 00 and 01, for default and minimal builds. </para><informaltable><tgroup cols="4"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><colspec colname="col_3"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para> <emphasis role="strong">Layer</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">File</emphasis>   </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">Scans</emphasis> </para></entry><entry colsep="1" rowsep="1"><para> <emphasis role="strong">Content</emphasis> </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 00 </para></entry><entry colsep="1" rowsep="1"><para> layer-00-default.opts </para></entry><entry colsep="1" rowsep="1"><para> 2 </para></entry><entry colsep="1" rowsep="1"><para> This provides NO new options. Leaving ./configure at its defaults. </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 01 </para></entry><entry colsep="1" rowsep="1"><para> layer-01-minimal.opts </para></entry><entry colsep="1" rowsep="1"><para> 1 </para></entry><entry colsep="1" rowsep="1"><para> This defines all options need to disable components. Down to the bare minimum for squid to operate </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 02 </para></entry><entry colsep="1" rowsep="1"><para> layer-02-maximus.opts </para></entry><entry colsep="1" rowsep="1"><para> 1 </para></entry><entry colsep="1" rowsep="1"><para> Defines everything which may be enabled to ON. </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 03 </para></entry><entry colsep="1" rowsep="1"><para> layer-03-fail-*.opts </para></entry><entry colsep="1" rowsep="1"/><entry colsep="1" rowsep="1"><para> Failure testing. Individual options or combos which are expected to Fail. </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 04 </para></entry><entry colsep="1" rowsep="1"><para> layer-04-maybe-*.opts </para></entry><entry colsep="1" rowsep="1"/><entry colsep="1" rowsep="1"><para> Failure testing. Individual options or combos which might fail but also may succeed. ie eCAP with/without library installed </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 05 </para></entry><entry colsep="1" rowsep="1"><para> layer-05-nodeps-*.opts </para></entry><entry colsep="1" rowsep="1"><para> 2 </para></entry><entry colsep="1" rowsep="1"><para> Test plug-in-play components when all plugins are missing. </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> 06+ </para></entry><entry colsep="1" rowsep="1"><para> <emphasis>undecided</emphasis> </para></entry><entry colsep="1" rowsep="1"/><entry colsep="1" rowsep="1"><para> This provides ALL the components which may be enabled, AND do not depend on other components in squid. An example of this would be ident </para></entry></row></tbody></tgroup></informaltable><informaltable><tgroup cols="2"><colspec colname="col_0"/><colspec colname="col_1"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para> <inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> </para></entry><entry colsep="1" rowsep="1"><para> Provision is also made via os-X.opts control files for platform specific builds to be tested. These files are not expected to build properly on foreign OS, so are completely optional and not guaranteed to be authoritative. The hope is that planned multi-system testing can use these provided by package maintainers to reduce cross-platform problems. </para></entry></row></tbody></tgroup></informaltable><section><title>Tasks needing a volunteer:</title><itemizedlist><listitem><para>A check of all components independence. This can easily be identified by the <emphasis>#if USE_X</emphasis> macros throughout the code. But may take some time. </para></listitem><listitem><para>Handlers for layer 03 and 04 failure need adding to the master scripts </para></listitem><listitem><para>layer 03 and 04 case .opts need to be created </para></listitem></itemizedlist></section></section><section><title>Architecture Re-alignment</title><para>Modulating code into convenient functional units is all what 3.x is about. </para><para>VCS has been changed to <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/BzrInstructions#">Bazaar</ulink> in part to make these changes easier and more manageable. </para><para>The code is being <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/Features/SourceLayout#">re-arranged</ulink> into functional units an built as internal library modules to match the code-level cleaning that has been done. </para><para>This builds on the dependency tree automation, to ensure that the functionality units are independent. </para></section><section><title>Patching Guidelines</title><itemizedlist><listitem><para>a set of guidelines for all future alterations to the squid code. <emphasis role="strong"> To be finalised</emphasis> </para></listitem></itemizedlist></section><section><title>Other Testing</title><para>Testing of squid run-time behavior still has to be worked out. A selection of blackbox testing tools have been suggested, and some machinery is being assembled. That work will be covered by a separate Feature page soon. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/Features/CodeTestBed/CategoryFeature#">CategoryFeature</ulink> </para></section></section></article>