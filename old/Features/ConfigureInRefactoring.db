<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/ConfigureInRefactoring</title><revhistory><revision><revnumber>19</revnumber><date>2010-10-28 11:47:06</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Fixed for features-listing</revremark></revision><revision><revnumber>18</revnumber><date>2010-10-28 09:10:00</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added faq-listing</revremark></revision><revision><revnumber>17</revnumber><date>2010-10-28 09:04:29</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Fixed for features-listing</revremark></revision><revision><revnumber>16</revnumber><date>2010-09-03 15:37:27</date><authorinitials>AmosJeffries</authorinitials><revremark>reconfactor has been merged.</revremark></revision><revision><revnumber>15</revnumber><date>2010-08-10 07:21:51</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Updated: branch was merged to trunk</revremark></revision><revision><revnumber>14</revnumber><date>2010-08-09 23:51:48</date><authorinitials>FrancescoChemolli</authorinitials><revremark>status update</revremark></revision><revision><revnumber>13</revnumber><date>2010-04-23 12:37:44</date><authorinitials>FrancescoChemolli</authorinitials><revremark>specified changes for auth and interception</revremark></revision><revision><revnumber>12</revnumber><date>2010-04-02 08:34:47</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added thoughts about build-tools</revremark></revision><revision><revnumber>11</revnumber><date>2010-03-23 11:05:00</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added bit on helper module configlets</revremark></revision><revision><revnumber>10</revnumber><date>2009-12-18 13:25:26</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Added doc on custom variables and macros</revremark></revision><revision><revnumber>9</revnumber><date>2009-11-27 21:04:26</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>8</revnumber><date>2009-11-25 16:40:04</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added note about build problem in trunk</revremark></revision><revision><revnumber>7</revnumber><date>2009-11-25 12:21:18</date><authorinitials>AmosJeffries</authorinitials><revremark>checked pandora. The m4 collection is sparse unless building python code.</revremark></revision><revision><revnumber>6</revnumber><date>2009-11-25 10:20:51</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added link to launchpad branch</revremark></revision><revision><revnumber>5</revnumber><date>2009-11-25 09:54:53</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>4</revnumber><date>2009-11-25 09:40:53</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added naming convention for variables and macros</revremark></revision><revision><revnumber>3</revnumber><date>2009-11-23 17:04:13</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added some case notes</revremark></revision><revision><revnumber>2</revnumber><date>2009-11-20 19:02:40</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>1</revnumber><date>2009-11-20 18:53:56</date><authorinitials>FrancescoChemolli</authorinitials><revremark>initial revision</revremark></revision></revhistory></articleinfo><section><title>Feature: Refactor configure.in</title><itemizedlist><listitem><para><emphasis role="strong">Goal</emphasis>: configure.in has grown in time into a big messy bundle, making it very hard to act on it in a sensible manner. It needs to be reduced to something sane again. </para></listitem><listitem><para><emphasis role="strong">Status</emphasis>: complete </para></listitem><listitem><para><emphasis role="strong">Version</emphasis>: 3.2 </para></listitem><listitem><para><emphasis role="strong">Developer</emphasis>: <ulink url="https://wiki.squid-cache.org/Features/ConfigureInRefactoring/FrancescoChemolli#">FrancescoChemolli</ulink> </para></listitem><listitem><para><emphasis role="strong">More</emphasis>:  <ulink url="https://code.launchpad.net/~kinkie/squid/autoconf-refactor"/> </para></listitem></itemizedlist></section><section><title>Details</title><para>In order to more easily drive the push on code cleanliness and portability, it's also important that the infrastructure allowing to detect the build environment be clean and extensible. Sadly, the current configure.in is not. It would be useful to refactor and comment it, dividing it in sections, with this tentative order (see <ulink url="http://www.gnu.org/software/autoconf/manual/autoconf.html#Autoconf-Input-Layout"/>): </para><orderedlist numeration="arabic"><listitem><para>auxiliary software available on the host system (including cc) </para></listitem><listitem><para>system-dependent variations and parameters on said software </para></listitem><listitem><para>configure arguments handling </para></listitem><listitem><para>available libraries </para></listitem><listitem><para>available headers </para></listitem><listitem><para>available types </para></listitem><listitem><para>structures </para></listitem><listitem><para>other stuff </para></listitem></orderedlist><para><ulink url="https://wiki.squid-cache.org/Features/ConfigureInRefactoring/RobertCollins#">RobertCollins</ulink> suggests to also include making use of <ulink url="https://edge.launchpad.net/pandora-build">Pandora Build</ulink>, a set of cross-project and cross-system configuration resources. </para><para><ulink url="https://wiki.squid-cache.org/Features/ConfigureInRefactoring/AmosJeffries#">AmosJeffries</ulink> has investigated Pandora and found most of the tools very python and ruby centric. There are few macros provided we can use without some makeover to make them portable enough to use on the systems Squid builds on. </para><section><title>Overview</title><para>In order to further modularize configure.in it would be useful to split some helper definition files out of configure.in itself, to an included set modular files. Those file will be defined as <code>acinclude/*.m4</code>, and included from configure.in AFTER autoconf's initialization. </para></section><section><title>Changes to configure process and parameters</title><para>Authentication was simplified, and now it is based on (hopefully clearer) configure options: </para><itemizedlist><listitem override="none"><para>--disable-auth </para><itemizedlist><listitem override="none"><para>global switch. Disables authentication support altogether </para></listitem></itemizedlist></listitem><listitem override="none"><para>--enable-auth-<emphasis>scheme</emphasis> </para><itemizedlist><listitem override="none"><para>enables auth scheme <emphasis>scheme</emphasis> (all are enabled by default). Without arguments, will also build all helpers that can be built on the build-hosts. Otherwise a space-separated or comma-separated list of helpers can be supplied, or the special value <code>none</code> which means to enable the scheme but build no helpers. Force-enabling any auth-scheme when the global support is off will cause a configure-time error. </para></listitem></itemizedlist></listitem></itemizedlist><para>Interception proxying has been changed to auto-enabled-if-available for those platforms which are known to work. </para></section><section><title>Namespaces and naming conventions</title><para>Custom macros will have as their name structured as <code>SQUID_&lt;COMPONENT&gt;_&lt;ACTION&gt;_&lt;OBJECTIVE&gt;</code> where </para><itemizedlist><listitem override="none"><para>COMPONENT is the target component to be checked (e.g. CC, CXX, OS ...) </para></listitem><listitem override="none"><para>ACTION can be one of:  </para><orderedlist numeration="arabic"><listitem><para>CHECK </para><glosslist><!--Trying to add a definition, but there is no entry-->test whether something is present or working. The expected result to be deposited in a variable is &quot;yes&quot; or &quot;no </glosslist></listitem><listitem><para>GUESS </para><glosslist><!--Trying to add a definition, but there is no entry-->try to determine a parameter or path. The expected result is a multiple-selection value, with &quot;none&quot; used as a &quot;can't find/determine&quot; output. The possible output values MUST be documented in the macro header. </glosslist></listitem></orderedlist></listitem><listitem override="none"><para>OBJECTIVE is a variable string, detailing the purpose of the test </para></listitem></itemizedlist><para>Variable names can fall in different categories: </para><orderedlist numeration="arabic"><listitem><para>Test output variables: <code>$squid_[cv_]test_objective_in_lowercase</code> </para></listitem><listitem><para>Variables holding configure options: <code>$squid_opt_optionname</code> </para><glosslist><!--Trying to add a definition, but there is no entry-->they are multi-valued, containing &quot;yes&quot; (want, build fail if can't build), &quot;no&quot; (absolutely don't want) or &quot;auto&quot;(yes if available, detect) <!--Trying to add a definition, but there is no entry-->whatever the user-visible option (enable/disable), these variables should not be in the negative. default-handling is to be handled as part of the option processing. </glosslist></listitem><listitem><para>Variables to be substituted in Makefile.am's etc.: <code>ALL_UPPERCASE</code> (and try to avoid clashes <inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/smile4.png" width="15"/></imageobject><textobject><phrase>;)</phrase></textobject></inlinemediaobject> ) </para></listitem></orderedlist></section><section><title>Documentation for extra macros and available variables</title><section><title>Variables defined at the beginning of the process</title><glosslist><glossentry><glossterm>$squid_host_os </glossterm><glossdef><para>a simplified version of <code>$host_os</code>, it only contains the operating system name, <emphasis>without</emphasis> the version number. In general, the most known values are: <emphasis>linux-gnu</emphasis>, <emphasis>solaris</emphasis>, <emphasis>mingw</emphasis>, <emphasis>cygwin</emphasis>, <emphasis>irix</emphasis> </para></glossdef></glossentry><glossentry><glossterm>$squid_host_os_version </glossterm><glossdef><para>the version number extracted from <code>$host_os</code>. On MS-Windows it MAY be <emphasis>32</emphasis>, but it should in general be ignored. </para></glossdef></glossentry></glosslist></section><section><title>Extra available Macros</title><glosslist><glossentry><glossterm>SQUID_STATE_SAVE(state_name_prefix([,extra_vars_list]) </glossterm><glossdef><para>checkpoints all relevant autoconf status variables (CFLAGS, LDFLAGS, etc.) in preparation of invasive checks. <emphasis>state_name_prefix</emphasis> must be suitable as a shell variable name. Extra variables to be saved may be specified, as a whitespace_separated variable names list. </para></glossdef></glossentry><glossentry><glossterm>SQUID_STATE_COMMIT(state_name_prefix) </glossterm><glossdef><para>commits the changes saved since the last call to SQUID_STATE_SAVE, and deletes the associated temporary storage variables. </para></glossdef></glossentry><glossentry><glossterm>SQUID_STATE_ROLLBACK(state_name_prefix) </glossterm><glossdef><para>reverts the autoconf state changes since the last call to SQUID_STATE_SAVE with the same prefix, and frees temporary storage. It is not necessary to specify the extra variables passed when saving state, they are retained automatically. </para></glossdef></glossentry><glossentry><glossterm>SQUID_LOOK_FOR_MODULES(base_dir,var_name) </glossterm><glossdef><para>fills in <code>$var_name</code> with the whitespace-separated list of the subdirs of base_dir containing modules. </para></glossdef></glossentry><glossentry><glossterm>SQUID_CLEANUP_MODULES_LIST(var_name) </glossterm><glossdef><para>removes duplicates from the modules list contained in <code>$var_name</code>. Modifies the variable in place. </para></glossdef></glossentry><glossentry><glossterm>SQUID_CHECK_EXISTING_MODULES(base_dir,var_name) </glossterm><glossdef><para>checks that all modules in the whitespace-separated list of modules <code>$var_name</code> are actually modules contained in the base directory <code>base_dir</code>. Aborts configuration in case of error. For each module, also sets the variable <code>$var_name_modulename</code> to 'yes'. </para></glossdef></glossentry></glosslist><screen><![CDATA[Example:
iomodules="disk net"
modules_basedir="$srcdir/src/io_mods"
SQUID_CHECK_EXISTING_MODULES($modules_basedir,[iomodules])
]]><![CDATA[
will:
1. check that $srcdir/src/io_mods/disk and $srcdir/src/io_mods/net
   exist and are directories, abort if they're not
2. set iomodules_disk and iomodules_net to "yes"]]></screen><glosslist><glossentry><glossterm>SQUID_TOLOWER_VAR_CONTENTS(varname) </glossterm><glossdef><para>lowercases $varname's contents </para></glossdef></glossentry><glossentry><glossterm>SQUID_TOUPPER_VAR_CONTENTS(varname) </glossterm><glossdef><para>uppercases $varname's contents </para></glossdef></glossentry><glossentry><glossterm>SQUID_CC_CHECK_ARGUMENT(varname,flag) </glossterm><glossdef><para>tests whether the compiler can handle the supplied flag. Sets <code>$varname</code> to either &quot;yes&quot; or &quot;no&quot; </para></glossdef></glossentry><glossentry><glossterm>SQUID_DEFINE_BOOL(define_name,$shell_variable,define_comment) </glossterm><glossdef><para>define a C(++) preprocessor macro <code>define_name</code> with comment <code>define_comment</code> using the expansion of <code>$shell_variable</code> to assign a value: it will be set to 0 if the variable expands to an empty string, 0 , false, or no; 1 if it expands to true, yes or 1; will abort in all other cases. </para></glossdef></glossentry><glossentry><glossterm>SQUID_YESNO($variable) </glossterm><glossdef><para>aborts unless the variable expansion is either &quot;yes&quot; or &quot;no&quot;. It is mostly useful as an input validator for the AC_ARG_ENABLE and AC_ARG_WITH macros. </para></glossdef></glossentry></glosslist><para>There more specific tests, checks and guesses performed by specific macros; their definitions have been moved to the <code>acinclude/</code> directory off the source tree root (and have to be explicitly included at the beginning of configure.in). All of them are documented in purpose and side effects; the source is the most comprehensive documentation for them </para></section></section><section><title>Other stuff to be improved</title><orderedlist numeration="arabic"><listitem><para>Trunk currently fails to build with linking errors if CFLAGS and CXXFLAGS are set as configure argument. The reason for this will have to be found and fixed. </para></listitem><listitem><para>Helper modules require, in order to be built, that a helper-specific testlet be passed successfully. Those testlets are shell scripts which perform autoconf-like functions, but without the infrastructure. As a result, they lack flexibility and effectiveness in reporting the reasons for failure. They should be reworked to be configure.in scripts to gain those advantages. </para></listitem><listitem><para>AC_CONDITIONAL macors should use in a more uniform manner ENABLE_FOO </para></listitem><listitem><para>the complication setting $ECAP_LIBS to ecap/libecap.la  can be replaced by the automake &quot;if USE_ECAP&quot; conditional to build and link the ecap subdir library in src/adaptation/Makefile.am instead of configure. </para></listitem><listitem><para>same for $ICAP_LIBS </para></listitem><listitem><para>wrapping of the auth libraries build+link in the ENABLE_AUTH_* </para></listitem></orderedlist></section><section><title>Other random thoughts</title><para>On March 31st 2010, <ulink url="http://www.catb.org/~esr/">Eric S. Raymond</ulink> <ulink url="http://esr.ibiblio.org/?p=1877">ranted</ulink> against autotools. This sparked an interesting debate over cross-platform build tools. During the discussion, some alternatives to autotools were mentioned: </para><itemizedlist><listitem override="none"><para><ulink url="http://www.scons.org/">SCons</ulink> seemed to get the most positive comments </para></listitem><listitem override="none"><para><ulink url="http://code.google.com/p/gyp/">gyp</ulink> </para></listitem><listitem override="none"><para><ulink url="http://www.cmake.org/">cmake</ulink> is the most entrenched alternative </para></listitem></itemizedlist><para>Squid's configure.in is very complex. Once refactored, it would be interesting to see if any of the alternatives offers substantial benefits, and possibly port over to it. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/Features/ConfigureInRefactoring/CategoryFeature#">CategoryFeature</ulink> </para></section></section></article>