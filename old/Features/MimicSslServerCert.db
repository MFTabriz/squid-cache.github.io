<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/MimicSslServerCert</title><revhistory><revision><revnumber>14</revnumber><date>2014-12-23 22:15:32</date><authorinitials>AlexRousskov</authorinitials><revremark>Updated Version mimicking algorithm after trunk r13533.</revremark></revision><revision><revnumber>13</revnumber><date>2012-07-23 18:05:35</date><authorinitials>AlexRousskov</authorinitials><revremark>Polished error handling section to include deny_info redirection &quot;errors&quot; in the delayed error scope. Use the right SquidConf macro.</revremark></revision><revision><revnumber>12</revnumber><date>2012-07-23 17:16:28</date><authorinitials>AlexRousskov</authorinitials><revremark>updated status</revremark></revision><revision><revnumber>11</revnumber><date>2012-07-17 20:51:38</date><authorinitials>AlexRousskov</authorinitials><revremark>Added Christos to the poorly named and misused Developer field.</revremark></revision><revision><revnumber>10</revnumber><date>2012-06-21 04:31:47</date><authorinitials>AlexRousskov</authorinitials><revremark>Updted how fake certificate version is mimicked</revremark></revision><revision><revnumber>9</revnumber><date>2012-06-21 04:21:26</date><authorinitials>AlexRousskov</authorinitials><revremark>Detailed IPv6 handling</revremark></revision><revision><revnumber>8</revnumber><date>2012-06-21 04:11:41</date><authorinitials>AlexRousskov</authorinitials><revremark>updated status</revremark></revision><revision><revnumber>7</revnumber><date>2012-04-16 23:48:42</date><authorinitials>AlexRousskov</authorinitials><revremark>Detailed how IP-based URLs are handled.</revremark></revision><revision><revnumber>6</revnumber><date>2012-04-06 22:15:16</date><authorinitials>AlexRousskov</authorinitials><revremark>Provided a Firefox bug report link illustrating why Squid cannot simply reply with an error to CONNECT request.</revremark></revision><revision><revnumber>5</revnumber><date>2012-03-07 22:54:09</date><authorinitials>AlexRousskov</authorinitials><revremark>polihsed headings</revremark></revision><revision><revnumber>4</revnumber><date>2012-03-07 22:53:11</date><authorinitials>AlexRousskov</authorinitials><revremark>Detailed how fake CN is generated and how excessively long domains are handled.</revremark></revision><revision><revnumber>3</revnumber><date>2012-02-27 19:07:26</date><authorinitials>AlexRousskov</authorinitials><revremark>Polished description of fake CN calculation during errors.</revremark></revision><revision><revnumber>2</revnumber><date>2012-02-25 20:49:49</date><authorinitials>AlexRousskov</authorinitials><revremark>updated status and detailed implementation</revremark></revision><revision><revnumber>1</revnumber><date>2011-10-12 04:42:33</date><authorinitials>AlexRousskov</authorinitials><revremark>Initial feature documentation</revremark></revision></revhistory></articleinfo><section><title>Feature: Mimic original SSL server certificate when bumping traffic</title><itemizedlist><listitem><para><emphasis role="strong">Goal</emphasis>: Pass original SSL server certificate information to the user. Allow the user to make an informed decision on whether to trust the server certificate. </para></listitem><listitem><para><emphasis role="strong">Status</emphasis>: completed </para></listitem><listitem><para><emphasis role="strong">Version</emphasis>: 3.3 </para></listitem><listitem><para><emphasis role="strong">Developer</emphasis>: <ulink url="https://wiki.squid-cache.org/Features/MimicSslServerCert/AlexRousskov#">AlexRousskov</ulink> and Christos Tsantilas </para></listitem><listitem><para><emphasis role="strong">More</emphasis>: requires <ulink url="https://wiki.squid-cache.org/Features/MimicSslServerCert/Features/BumpSslServerFirst#">bump-server-first</ulink> and benefits from <ulink url="https://wiki.squid-cache.org/Features/MimicSslServerCert/Features/DynamicSslCert#">Dynamic Certificate Generation</ulink> </para></listitem></itemizedlist></section><section><title>Motivation</title><para>One of the <ulink url="https://wiki.squid-cache.org/Features/MimicSslServerCert/Features/SslBump#">SslBump</ulink> serious drawbacks is the loss of information embedded in SSL server certificate. There are two basic cases to consider from Squid point of view: </para><itemizedlist><listitem><para><emphasis role="strong">Valid server certificate:</emphasis> The user may still want to know who issued the original server certificate, when it expires, and other certificate details. In the worst case, what may appear as a valid certificate to Squid, may not pass HTTPS client tests, even if the client trusts Squid to bump the connection.  </para></listitem><listitem><para><emphasis role="strong">Invalid server certificate:</emphasis> This is an especially bad case because it forces Squid to either bypass the certificate validation error (hiding potentially critical information from the trusting user!) or terminate the transaction (without giving the user a chance to make an informed exception). </para></listitem></itemizedlist><para>Hiding original certificate information has never been the intent of lawful SslBump deployments. Instead, it was an undesirable side-effect of the initial SslBump implementation. Fortunately, this limitation can be removed in most cases, making SslBump less intrusive and less dangerous. </para></section><section><title>Implementation overview</title><para>OpenSSL APIs allow us to extract and use origin server certificate properties when generating a fake server certificate. In general, we want to mimic all properties, but various SSL rules make micking of some properties technically infeasible, and browser behavior makes mimicking most properties undesirable under certain conditions. We detail these exceptions below. Squid administrator can tweak mimicking algorithms using sslproxy_cert_adapt and sslproxy_cert_sign configuration options. </para><para>The ssl_crtd daemon receives matching configuration options as well as the original server certificate to mimic its properties. </para><para>A <ulink url="https://wiki.squid-cache.org/Features/MimicSslServerCert/Features/BumpSslServerFirst#">bump-server-first</ulink> support is required to get the original server certificate before we have to send our fake certificate to the client. </para><section><title>Fake Certificate properties</title><para>This section documents how each fake certificate property is generated. The &quot;true&quot; adjective is applied to describe a property of the SSL certificate received from the origin server. The &quot;intended&quot; adjective describes a property of the request or connection received from the client (including intercepted connections). </para><informaltable><tgroup cols="3"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">x509 certificate property</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">After successful bumping</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">After failed bumping</emphasis></para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Common Name (CN)</para></entry><entry colsep="1" rowsep="1"><para>True CN by default. Can be overwritten using sslproxy_cert_adapt setCommonName.</para></entry><entry colsep="1" rowsep="1"><para>If the CONNECT address is available, then use it, subject to CN length controls discussed separately below. Otherwise, if true CN is available, then use that. If this is an intercepted connection and no true CN is available, then the certificate will have no CN (and no Subject).</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Alias</para></entry><entry colsep="1" rowsep="1"><para>True alias, if any.</para></entry><entry colsep="1" rowsep="1"><para>None.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Subject</para></entry><entry colsep="1" rowsep="1"><para>True subject by default. The CN part can be overwritten (see CN).</para></entry><entry colsep="1" rowsep="1"><para>Contains CN only (see CN).</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Subject Alternative Names (subjectAltName)</para></entry><entry colsep="1" rowsep="1"><para>True names, if any, by default. None if using sslproxy_cert_adapt setCommonName (browsers reject certificates where alternative names are not related to CN).</para></entry><entry colsep="1" rowsep="1"><para>None.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Signer and signature</para></entry><entry colsep="1" rowsep="1"><para>Configured trusted Squid CA by default. To mimic an &quot;untrusted true server certificate&quot; error, Squid generates an untrusted certificate with the trusted certificate subject prefixed by an &quot;Untrusted by&quot; string (Squid signs with this untrusted certificate as needed, but does not send it to the user, preventing its caching). To mimic a self-signed certificate error, Squid makes a self-signed certificate.</para></entry><entry colsep="1" rowsep="1"><para>Configured trusted Squid CA certificate.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Issuer</para></entry><entry align="center" colsep="1" nameend="col_2" namest="col_1" rowsep="1"><para>The subject of the signing certificate (see Signer).</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Serial Number</para></entry><entry align="center" colsep="1" nameend="col_2" namest="col_1" rowsep="1"><para>A positive 20-byte SHA1 hash of signing certificate and fake certificate properties. Browsers reject certificates that have the same Issuer, same serial number, but different CNs. Since Squid has to use the same Issuer for nearly all CNs, we must ensure that serial numbers are virtually never the same if CNs differ, even when generated on independent Squids.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Validity dates</para></entry><entry colsep="1" rowsep="1"><para>True dates by default. If a true validity date is missing or if sslproxy_cert_adapt setValidAfter and setValidBefore is active, then the signing certificate validity date is used.</para></entry><entry colsep="1" rowsep="1"><para>Squid trusted certificate validity dates.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Version</para></entry><entry colsep="1" rowsep="1"><para>Version 3 when any certificate extension (e.g., subjectAltName) is mimicked (per RFC 5280). Otherwise, OpenSSL sets the version (usually to 1?)</para></entry><entry colsep="1" rowsep="1"><para>Set by OpenSSL (usually to 1?)</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Other</para></entry><entry align="center" colsep="1" nameend="col_2" namest="col_1" rowsep="1"><para>Not mimicked or set (see Limitations).</para></entry></row></tbody></tgroup></informaltable><para>All certificates generated by Squid are signed using the configured trusted CA certificate private key. This, along with the serial number generation algorithm, allows independent but identically configured Squids (including but not limited to Squid SMP workers) to generate identical certificates under similar circumstances. </para></section><section><title>Delayed error responses</title><para>When Squid fails to negotiate a secure connection with the origin server and bump-ssl-server-first is enabled, Squid remembers the error page and serves it <emphasis>after</emphasis> establishing the secure connection with the client and receiving the first encrypted client request. The error is served securely. The same approach is used for Squid redirect messages configured via <ulink url="http://www.squid-cache.org/Doc/config/deny_info#">deny_info</ulink>. This error delay is implemented because (a) browsers like FireFox and Chromium <ulink url="https://bugzilla.mozilla.org/show_bug.cgi?id=479880">do not display CONNECT errors</ulink> correctly and (b) intercepted SSL connections must wait for the first request to serve an error. </para><para>Furthermore, when Squid encounters an error, it uses a trusted certificate with minimal properties to encrypt the connection with the client. If we try to mimic the true broken certificate instead, the user will get a browser error dialog and then, if user allows, the Squid error page with essentially the same (and possibly more detailed/friendly) information about the problem. Using a trusted certificate avoids this &quot;double error&quot; effect in many cases. And, after all, the information is coming from Squid and not the origin server so it is kind of wrong to mimic broken origin server details when serving that information. </para><para>Squid closes the client connection after serving the error so that no requests are sent to the broken server. </para><para>It is important to understand that Squid can be configured to ignore or tolerate certain SSL connection establishment errors using <ulink url="http://www.squid-cache.org/Doc/config/sslproxy_cert_error#">sslproxy_cert_error</ulink>. If the error is allowed, Squid forgets about the error, mimics true broken certificate properties, and continues to talk to the server. Otherwise, Squid does not mimic and terminates the server connection as discussed above. Thus, if you want users to see broken certificate properties instead of Squid error pages, you must tell Squid to ignore the error. </para><section><title>Long domain names</title><para>Section A.1 of RFC 5280 limits a Common Name field of an SSL certificate to 64 characters. As far as we know, that implies that secure sites with longer names must use wildcard certificates. And since wildcards cannot be applied to TLDs (e.g., browsers reject a <emphasis>*.com</emphasis> wildcard), there can be no secure site with a long second-level domain label. </para><para>If Squid receives a valid true certificate, Squid does not try to enforce CN length limit and simply mimics true certificate fields as described in the table above. However, when Squid fails to connect to the origin server or fails to receive a usable true certificate, Squid has to generate a minimal fake certificate from scratch and has to deal with long domain names of the sites a user intended to visit. To shorten the name, Squid tries to replace the lower level domain label(s) with a wild card until the CN length no longer exceeds the 64 character limit. If that replacement results in a TLD wildcard such as <emphasis>*.com</emphasis> or, worse, in a bare <emphasis>*</emphasis> wildcard, then Squid produces a certificate with no CN at all. Such certificates are usually rejected by browsers with various, often misleading, errors. For example, </para><informaltable><tgroup cols="3"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">Long domain name in the request</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Certificate CN for serving Squid errors</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Comments</emphasis></para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>llanfairpwllgwyngyllgogerychwyrndrobwyll-llantysiliogogogoch.com</para></entry><entry colsep="1" rowsep="1"><para>llanfairpwllgwyngyllgogerychwyrndrobwyll-llantysiliogogogoch.com</para></entry><entry colsep="1" rowsep="1"><para>This domain name is exactly 64 characters long so it is within the CN limits.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">www.</emphasis>llanfairpwllgwyngyllgogerychwyrndrobwyll-llantysiliogogogoch.com</para></entry><entry colsep="1" rowsep="1"><para>none</para></entry><entry colsep="1" rowsep="1"><para>Squid refuses to generate a *.com wildcard and replacing just &quot;www&quot; with &quot;*&quot; would exceed the 64 character limit by 2 characters.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>this-long-domain-exceeds-64-chars-but-should-not-crash-ssl-crtd.<emphasis role="strong">example.</emphasis>com</para></entry><entry colsep="1" rowsep="1"><para>*.example.com</para></entry><entry colsep="1" rowsep="1"><para>Browsers will accept this wildcard and show Squid error page.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">www.</emphasis>this-long-domain-exceeds-64-chars-but-should-not-crash-ssl-crtd.<emphasis role="strong">example.</emphasis>com</para></entry><entry colsep="1" rowsep="1"><para>*.example.com</para></entry><entry colsep="1" rowsep="1"><para>Browsers will refuse this wildcard because they apparently do not allow a wildcard to replace more than one domain label.</para></entry></row></tbody></tgroup></informaltable><para>Hopefully, excessively long domains are rare for secure sites. TODO: Find a public secure site with a long domain name that actually works. </para></section></section><section><title>URLs with IP addresses</title><para>A user may type SSL server IP address in the address bar. Some browsers (e.g., Rekonq browser v0.7.x) send IP addresses in CONNECT requests even when the user typed a host name in the address bar. Currently, Squid cannot distinguish the two cases and assumes that an IP address in the CONNECT request implies that the user typed that address in the address bar. Besides assuming user input, Squid overall behavior here is meant to mimic what would happen if Squid was not in the loop. Here are a few cases when the user enters something like <ulink url="https://74.125.65.99/"/> instead of <ulink url="https://www.google.com/"/>: </para><informaltable><tgroup cols="3"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">Squid configuration</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Browser displays</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Comments</emphasis></para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>No SslBump</para></entry><entry colsep="1" rowsep="1"><para>Browser's internal &quot;Server's certificate does not match the URL&quot; error.</para></entry><entry colsep="1" rowsep="1"><para>This is because the server certificate does not use an IP address for CN.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>SslBump with default squid.conf</para></entry><entry colsep="1" rowsep="1"><para>Squid's SQUID_X509_V_ERR_DOMAIN_MISMATCH error page, served with CN set to the IP address from the CONNECT request.</para></entry><entry colsep="1" rowsep="1"><para>This matches no-SslBump behavior. However, see &quot;Always IP&quot; below the table.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>sslproxy_cert_error allow all</para></entry><entry colsep="1" rowsep="1"><para>Browser's internal &quot;Server's certificate does not match the URL&quot; error.</para></entry><entry colsep="1" rowsep="1"><para>This is correct behavior because Squid was told to ignore errors and was not told to adapt the origin server CN. The origin server set CN to www.google.com or equivalent while the browser was expecting an IP address.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>sslproxy_cert_error allow all</para><para>sslproxy_cert_adapt setCommonName ssl::certDomainMismatch</para></entry><entry colsep="1" rowsep="1"><para>Google page without an error.</para></entry><entry colsep="1" rowsep="1"><para>Because Squid sets fake certificate CN to the IP address from the CONNECT request. However, see &quot;Always IP&quot; below.</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>sslproxy_cert_error allow all</para><para>sslproxy_cert_adapt setCommonName{74.125.65.99} ssl::certDomainMismatch</para></entry><entry colsep="1" rowsep="1"><para>Google page without an error.</para></entry><entry colsep="1" rowsep="1"><para>Squid sets fake certificate CN to the IP address from the CONNECT request. However, see &quot;Always IP&quot; below.</para></entry></row></tbody></tgroup></informaltable><para><emphasis role="strong">Always IP</emphasis>: Configurations with this comment may not work with browsers that always use IP addresses in CONNECT requests because their second request Host header will not match the CN IP. There is nothing Squid can do here until we learn how to detect CONNECT requests from such browsers. </para><section><title>IPv6</title><para>IPv6 addresses in Request URIs are handled as discussed above. The only IPv6-related caveat is that Squid strips surrounding square brackets when it has to form a certificate CN field based on the IP address. Browsers such as Firefox, Chromium, and Safari prefer bare IPv6 addresses in CNs even if the URL has a bracketed IPv6 address. These browsers generate confusing errors when they see bracketed CNs. For example: </para><screen><![CDATA[  You attempted to reach [2001:470:1:18::120], but instead you actually reached
  a server identifying itself as [2001:470:1:18::120]. Chromium can say for sure
  that you reached [2001:470:1:18::120], but cannot verify that that is the same
  site as [2001:470:1:18::120] which you intended to reach.]]></screen></section></section></section><section><title>Limitations</title><para>Some browsers (e.g., Rekonq browser v0.7.x) send IP addresses in CONNECT requests even when the user typed a host name in the address bar. Squid cannot handle both such browsers <emphasis>and</emphasis> URLs with IP addresses instead of host names because Squid cannot distinguish one case from another. There is nothing we can do about it until somebody contributes code to reliably detect CONNECT requests from those &quot;unusual&quot; browsers. </para><para>SQUID_X509_V_ERR_DOMAIN_MISMATCH errors are not checked until the first encrypted request arrives from the client. It is impossible to check for those errors earlier when dealing with intercepted connections or when talking to a browser that does not use domain names in CONNECT requests. It is possible to check for such errors when dealing with CONNECT requests that contain intended domain name information, but Squid does not. </para><para>Certificate chains are not mimicked. </para><section><title>Certificate properties not mimicked or set</title><para>Not all true certificate properties are mimicked. Initially, we thought it is a good idea to mimic everything by default, but we quickly ran into problems with browsers rejecting fake certificates due to mismatching or otherwise invalid <emphasis>combination</emphasis> of properties (e.g., alternative names not matching CN). We now mimic only the properties that are unlikely to cause problems. However, a few other properties may still be investigated for mimicking: Certificate Policies, Subject Directory Attributes, Extended Key Usage, Freshest CRL, and Subject Information Access. </para><para>The following properties may be worth setting if configured (via the CA certificate?): Authority Key Identifier, Subject Key Identifier, Key Usage, Issuer Alternative Name, Freshest CRL, and Authority Information Access. </para><para>The following properties are probably not applicable because they deal with CA or other specialized certificates (or are too vague to be mimicked safely): Basic Constraints, Name Constraints, Policy Constraints, and Inhibit anyPolicy. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/Features/MimicSslServerCert/CategoryFeature#">CategoryFeature</ulink> </para></section></section></article>