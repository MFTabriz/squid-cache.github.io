<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/FtpRelay</title><revhistory><revision><revnumber>10</revnumber><date>2014-08-11 17:21:05</date><authorinitials>AmosJeffries</authorinitials><revremark>feature merge into trunk for 3.5 release</revremark></revision><revision><revnumber>9</revnumber><date>2014-08-11 15:35:48</date><authorinitials>AlexRousskov</authorinitials><revremark>squid-dev RFC: FTP gw source layout</revremark></revision><revision><revnumber>8</revnumber><date>2014-01-15 23:06:45</date><authorinitials>AlexRousskov</authorinitials><revremark>updated status</revremark></revision><revision><revnumber>7</revnumber><date>2013-09-09 18:38:11</date><authorinitials>AlexRousskov</authorinitials><revremark>updated status</revremark></revision><revision><revnumber>6</revnumber><date>2013-04-25 14:16:32</date><authorinitials>AlexRousskov</authorinitials><revremark>Added lp branch link.</revremark></revision><revision><revnumber>5</revnumber><date>2013-03-12 20:36:19</date><authorinitials>AlexRousskov</authorinitials><revremark>HTTP 100 should be used for FTP 1xx replies because we must preserve one FTP request - one [final] FTP response pairing. FTP does not support &quot;Spontaneous Replies&quot; despite documenting them.</revremark></revision><revision><revnumber>4</revnumber><date>2013-03-12 15:31:43</date><authorinitials>AlexRousskov</authorinitials><revremark>Per Amos request, use visible_appname_string for U-A header (if we are going to set it).</revremark></revision><revision><revnumber>3</revnumber><date>2013-03-12 15:01:24</date><authorinitials>FrancescoChemolli</authorinitials><revremark>As requested by AlexRousskov</revremark></revision><revision><revnumber>2</revnumber><date>2013-03-12 00:55:06</date><authorinitials>AlexRousskov</authorinitials><revremark>Partially addressed Amos comments</revremark></revision><revision><revnumber>1</revnumber><date>2013-03-11 23:42:39</date><authorinitials>AlexRousskov</authorinitials><revremark>Started documented native FTP proxying feature.</revremark></revision></revhistory></articleinfo><section><title>Feature: Native FTP proxying</title><itemizedlist><listitem><para><emphasis role="strong">Goal</emphasis>: Apply existing access control and content adaptation features to native FTP (port 21) traffic. Build framework for future caching of native FTP responses. </para></listitem><listitem><para><emphasis role="strong">Status</emphasis>: completed. </para></listitem><listitem><para><emphasis role="strong">Version</emphasis>: 3.5 </para></listitem><listitem><para><emphasis role="strong">Developer</emphasis>: <ulink url="https://wiki.squid-cache.org/Features/FtpRelay/AlexRousskov#">AlexRousskov</ulink> and Dmitry Kurochkin  </para></listitem><listitem><para><emphasis role="strong">More</emphasis>: lp <ulink url="https://code.launchpad.net/~measurement-factory/squid/ftp-gw">branch</ulink>; squid-dev discussions in <ulink url="http://www.squid-cache.org/mail-archive/squid-dev/201208/0178.html">August</ulink> and <ulink url="http://www.squid-cache.org/mail-archive/squid-dev/201209/0021.html">September</ulink> 2012 </para></listitem></itemizedlist></section><section><title>Functionality</title><para>This project adds an ftp_port option to squid.conf. Squid acts as an FTP-to-FTP gateway for TCP traffic sent to that port: </para><orderedlist numeration="arabic"><listitem><para>Squid listens for native FTP requests sent to the configured port. </para></listitem><listitem><para>Squid converts received FTP commands to internal HTTP wrapper requests, </para></listitem><listitem><para>Squid forwards those internal requests from the client to server side (while subjecting them to access controls and  optional content adaptation, as usual) </para></listitem><listitem><para>In the future, Squid may even forward those HTTP wrapper requests to peers, but that functionality is outside the initial implementation scope. </para></listitem><listitem><para>On the server side, Squid converts HTTP wrapper requests to FTP commands, forwarding those commands to the FTP server. </para></listitem><listitem><para>Similarly, FTP server responses are forwarded back to the FTP client, wrapped in HTTP responses. </para></listitem><listitem><para>Squid logs the FTP transaction using HTTP wrappers and existing access logging code. </para></listitem></orderedlist></section><section><title>Mapping</title><section><title>FTP command to HTTP request mapping</title><para>Each FTP command, whether understood by Squid or not, is mapped to an HTTP request. </para><informaltable><tgroup cols="2"><colspec colname="col_0"/><colspec colname="col_1"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">HTTP Request property</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Mapping algorithm</emphasis></para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Request method</para></entry><entry colsep="1" rowsep="1"><para>&quot;PUT&quot; for FTP STOR. Otherwise GET?</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Request URI</para></entry><entry colsep="1" rowsep="1"><para><code>ftp://host/</code> (for now; see Future Enhancement)</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Request protocol and version</para></entry><entry colsep="1" rowsep="1"><para>HTTP/1.1 (That is what these wrapper messages are to Squid core. Also, some ICAP services may fail on FTP/x.y)</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Host header</para></entry><entry colsep="1" rowsep="1"><para>FTP server name followed by non-standard port if any</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>FTP-Command</para></entry><entry colsep="1" rowsep="1"><para>FTP command name</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>FTP-Arguments</para></entry><entry colsep="1" rowsep="1"><para>FTP command arguments (i.e., everything after the FTP command name and before CRLF). Not present if CRLF follows command name. Present but empty of SP CRLF follow command name.</para></entry></row></tbody></tgroup></informaltable></section><section><title>FTP reply to HTTP response mapping</title><informaltable><tgroup cols="2"><colspec colname="col_0"/><colspec colname="col_1"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">HTTP Response property</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Mapping algorithm</emphasis></para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Response status code and reason phrase</para></entry><entry colsep="1" rowsep="1"><para>100 Continue for any grokked FTP 1xx response; 200 OK for any other grokked FTP server response; 500 Server Error otherwise</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Request protocol and version</para></entry><entry colsep="1" rowsep="1"><para>HTTP/1.1 (so that ICAP services do not fail on FTP/x.y)</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Date</para></entry><entry colsep="1" rowsep="1"><para>FTP reply start date</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Cache-Control</para></entry><entry colsep="1" rowsep="1"><para>&quot;private&quot; (Squid cannot cache these until we track Request URIs)</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Content-Length</para></entry><entry colsep="1" rowsep="1"><para>none if there is an associated file transfer; zero otherwise</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>FTP-Status</para></entry><entry colsep="1" rowsep="1"><para>FTP reply code (e.g., 431)</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>FTP-Reason</para></entry><entry colsep="1" rowsep="1"><para>FTP explanatory text (e.g., &quot;No such directory&quot;)</para></entry></row></tbody></tgroup></informaltable></section><section><title>Mapping of FTP body transfer</title><para>Squid does not forward HTTP bodies using HTTP constructs internally. The code will have to use existing Squid body forwarding APIs (BodyPipe for request bodies and Store for response bodies). </para><section><title>Transfer failures</title><para>Terminate body transmission as in the case of HTTP body transmission failure. In case of reply body, send an 1xx control message to the client side indicating the final FTP status code. </para></section></section><section><title>Mapping example</title><informaltable><tgroup cols="5"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><colspec colname="col_3"/><colspec colname="col_4"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">Label</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">FTP-C</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Squid-C</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">FTP-S</emphasis></para></entry><entry colsep="1" rowsep="1"><para><emphasis role="strong">Squid-S</emphasis></para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para><emphasis role="strong">Sends what</emphasis></para></entry><entry colsep="1" rowsep="1"><para>FTP command</para></entry><entry colsep="1" rowsep="1"><para>HTTP Request</para></entry><entry colsep="1" rowsep="1"><para>FTP reply</para></entry><entry colsep="1" rowsep="1"><para>HTTP response</para></entry></row><row rowsep="1"><entry align="center" colsep="1" morerows="1" nameend="col_0" namest="col_0" rowsep="1"><para> <emphasis role="strong">sender(s) and receiver(s)</emphasis></para></entry><entry colsep="1" rowsep="1"><para>client to Squid</para></entry><entry align="center" colsep="1" morerows="1" nameend="col_2" namest="col_2" rowsep="1"><para> Squid client-side to server-side</para></entry><entry colsep="1" rowsep="1"><para>server to Squid</para></entry><entry align="center" colsep="1" morerows="1" nameend="col_4" namest="col_4" rowsep="1"><para> Squid server-side to client-side</para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para>Squid to server</para></entry><entry colsep="1" rowsep="1"><para>Squid to client</para></entry><entry colsep="1" rowsep="1"/></row></tbody></tgroup></informaltable><screen><![CDATA[FTP client <--> Squid             Squid client-side <--> Squid server-side     Squid <--> FTP server
-------------------------------   ------------------------------------------   -------------------------------
]]><![CDATA[
USER anonymous@ftp.example.com    
]]><![CDATA[
                                  GET ftp://ftp.example.com/ HTTP/1.1
                                  Host: ftp.example.com
                                  FTP-Command: USER
                                  FTP-Arguments: anonymous@ftp.example.com
]]><![CDATA[
                                                                               USER anonymous@ftp.example.com
]]><![CDATA[
                                                                               331 User name okay, need password.
]]><![CDATA[
                                  HTTP/1.1 200 OK
                                  Date: ...
                                  Cache-Control: private
                                  Content-Length: 0
                                  FTP-Status: 331
                                  FTP-Reason: User name okay, need password.
]]><![CDATA[
331 User name okay, need password.
...
RETR test.gz
]]><![CDATA[
                                  GET ftp://ftp.example.com/ HTTP/1.1
                                  Host: ftp.example.com
                                  FTP-Command: RETR
                                  FTP-Arguments: test.gz
]]><![CDATA[
                                                                               RETR test.gz
]]><![CDATA[
                                                                               150 File status okay; about to open data...
]]><![CDATA[
                                  HTTP/1.1 100 Continue
                                  Date: ...
                                  Cache-Control: private
                                  FTP-Status: 150
                                  FTP-Reason: File status okay; about to open data...
]]><![CDATA[
150 File status okay; about to open data...]]></screen></section></section><section><title>Logging</title><para>Individual FTP transactions (commands and replies) are logged as HTTP transactions (with HTTP-specific information missing) and using existing access logging facilities. The following details should be available in the access log: </para><itemizedlist><listitem><para>Client IP address </para></listitem><listitem><para>Remote server name and IP address </para></listitem><listitem><para>Remote user name </para></listitem><listitem><para>FTP command sent by the client including arguments (passwords stripped, just like Squid strips URI query terms) </para></listitem><listitem><para>FTP status sent by the server to Squid </para></listitem><listitem><para>FTP status sent by Squid to to the client </para></listitem><listitem><para>FTP transaction response time (from the start of receiving FTP command to the end of sending the reply) </para></listitem><listitem><para>Size of the transferred file </para></listitem></itemizedlist><para>Note that Squid does not map FTP status codes to HTTP status codes in HTTP wrapper messages so FTP and/or logging code may need to adjust logged values to reflect the true FTP status and not the HTTP status of the wrapping HTTP message. </para></section><section><title>Future enhancements</title><para>One very useful but difficult to support feature is tracking of FTP current or requested directory across CD and similar commands. Such tracking would allow simple access controls based on request URIs. While primitive tracking is not very difficult to support, FTP directory <emphasis>links</emphasis> make proper support very tricky (and impossible in some cases): In FTP, &quot;foo/bar/..&quot; path (i.e., a sequence of &quot;CD foo&quot;, &quot;CD bar&quot;, and &quot;CD ..&quot; commands) may result in current location different than &quot;foo&quot; (i.e., the &quot;PWD&quot; command will not print &quot;foo&quot;). Eventually, Squid will probably track the URI using one or more algorithms, but this project does not include such support or the decision which URI tracking algorithm to implement. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/Features/FtpRelay/CategoryFeature#">CategoryFeature</ulink> </para></section></article>