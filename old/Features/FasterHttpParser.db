<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/FasterHttpParser</title><revhistory><revision><revnumber>18</revnumber><date>2015-03-01 01:56:52</date><authorinitials>AmosJeffries</authorinitials><revremark>update after HTTP response parser upgrade merge</revremark></revision><revision><revnumber>17</revnumber><date>2015-01-22 10:02:29</date><authorinitials>AmosJeffries</authorinitials><revremark>document the response parsing and state of progress</revremark></revision><revision><revnumber>16</revnumber><date>2015-01-17 17:45:44</date><authorinitials>AmosJeffries</authorinitials><revremark>import content of StringNgHttpParser</revremark></revision><revision><revnumber>15</revnumber><date>2015-01-17 07:21:44</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>14</revnumber><date>2015-01-17 07:20:42</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>13</revnumber><date>2015-01-17 07:18:08</date><authorinitials>AmosJeffries</authorinitials><revremark>update and clarify the current state</revremark></revision><revision><revnumber>12</revnumber><date>2014-05-04 13:14:55</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>11</revnumber><date>2013-12-07 18:39:28</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>10</revnumber><date>2013-12-07 17:57:21</date><authorinitials>AmosJeffries</authorinitials><revremark>analysis of response parsing passes</revremark></revision><revision><revnumber>9</revnumber><date>2013-12-07 14:44:38</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>8</revnumber><date>2010-09-03 15:54:03</date><authorinitials>AmosJeffries</authorinitials><revremark>outline header parsing passes.</revremark></revision><revision><revnumber>7</revnumber><date>2009-03-08 10:27:16</date><authorinitials>AmosJeffries</authorinitials><revremark>remove text from developer field so this shows on the wishlist</revremark></revision><revision><revnumber>6</revnumber><date>2008-12-26 20:05:02</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Added link to StringNgHttpParser</revremark></revision><revision><revnumber>5</revnumber><date>2008-05-18 19:39:00</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>4</revnumber><date>2008-04-22 00:36:08</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>3</revnumber><date>2008-02-14 01:50:01</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>2</revnumber><date>2007-10-09 04:46:04</date><authorinitials>AlexRousskov</authorinitials><revremark>Separate categories with a pipe symbol</revremark></revision><revision><revnumber>1</revnumber><date>2007-10-08 21:59:05</date><authorinitials>AlexRousskov</authorinitials><revremark>Moving selected Squid3 Wish List features into separate pages.</revremark></revision></revhistory></articleinfo><section><title>Feature: Faster HTTP parser</title><itemizedlist><listitem><para><emphasis role="strong">Goal</emphasis>:  Improve non-caching Squid3 performance by 20+% </para></listitem><listitem><para><emphasis role="strong">Version</emphasis>: 3.6 </para></listitem><listitem><para><emphasis role="strong">Status</emphasis>: started </para></listitem><listitem><para><emphasis role="strong">ETA</emphasis>: 2016 </para></listitem><listitem><para><emphasis role="strong">Priority</emphasis>: 1 </para></listitem><listitem><para><emphasis role="strong">Developer</emphasis>: <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/AmosJeffries#">AmosJeffries</ulink> and <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/FrancescoChemolli#">FrancescoChemolli</ulink> </para></listitem><listitem><para><emphasis role="strong">Feature Branch</emphasis>: lp:~squid/squid/parser-ng (old: lp:~kinkie/squid/http-parser-ng) </para></listitem></itemizedlist></section><section><title>Details</title><para>Avoid parsing the same HTTP header several times. Implement incremental header parsing. </para><para>One of the main expected gains from this and <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/Features/BetterStringBuffer/StringNg#">StringNg</ulink> is increased clarity and performance in HTTP parsing. The (as of <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/Squid-3.1#">Squid-3.1</ulink>) implementation of the HTTP parser (below &quot;baseline situation&quot;) is a bit byzantine and also benefits from a makeover. The code shows that attempts have been made in the pasts but have not been completed. </para><section><title>Code Architecture</title><para>Parsing handled by an <code>Http::Parser</code> child class which has an SBuf buffer and virtual <code>parse</code> method which splits the buffer content into message segments for followup processing. </para><para>Parsing of mime header block is (for now) handled as char* strings by <code>HttpMsg}} objects in turn using {{{HttpHeader</code> objects outside the <code>Parser</code> hierarchy. This object and all the logics it uses need to be refactored to operate on the SBuf presented by Http::One::Parser method <code>mimeHeaders</code> </para><para>The <code>HttpMsg</code> hierarchy objects are currently overloaded with two purposes; </para><orderedlist numeration="arabic"><listitem><para>as general purpose HTTP message state storage objects </para></listitem><listitem><para>as HTTP and ICAP response message parsing objects </para></listitem></orderedlist><section><title>going forward</title><para>Under review: </para><itemizedlist><listitem><para>conversion of ICAP I/O read buffer to SBuf </para></listitem></itemizedlist><para>Underway: </para><itemizedlist><listitem><para>add HTTP/2 frame parser </para></listitem><listitem><para>add ICAP response parser </para></listitem></itemizedlist><para>TODO: </para><itemizedlist><listitem><para>use the parsed ICAP response to interpret how the ICAP payload segments need to be parsed instead of attempting (badly) to auto-detect by throwing the <code>HttpMsg</code> parser at it. </para></listitem><listitem><para>code using the <code>HttpMsg</code> parser needs to be refactored to use the <code>Http::Parser</code> API instead and the duplicate parser removed from Squid. </para></listitem><listitem><para>refactor the <code>HttpHeader</code> parsing logics to use <code>SBuf</code> and <code>::Parser::Tokenizer</code> API. Possibly run by the new <code>Parser</code> child classes. </para></listitem><listitem><para>refactor <code>ChunkedDecoder::parse</code> to use <code>SBuf</code> and <code>::Parser::Tokenizer</code>. </para></listitem></itemizedlist></section><section><title>current state</title><para>After initial structural updates to the Http::Parser hierarchy. </para><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> the stack is asynchronous, now with incremental parse checkpoints resumed after read operations. </para><para>The <emphasis>request</emphasis> parsing system <code>Http1::RequestParser::parse</code> in Squid-3.6+ is as follows: </para><orderedlist numeration="arabic"><listitem><para>scan to skip over garbage prefix </para><itemizedlist><listitem><para>incremental checkpoint wherever it halts, (start of request-line or empty buffer) </para></listitem></itemizedlist></listitem><listitem><para>scan to find method </para><itemizedlist><listitem><para>incremental checkpoint at end of method </para></listitem></itemizedlist></listitem><listitem><para>scan to find URI and version </para><itemizedlist><listitem><para>in relaxed parser scan to find LF then work backwards </para></listitem><listitem><para>in strict parsser scan for SP delimiters with extra checkppoint after URI </para></listitem><listitem><para>incremental checkpoint at end of request-line </para></listitem></itemizedlist></listitem><listitem><para>char* loop scan for end of header chunk (Http1::Parser::findMimeBlock / headersEnd) </para><itemizedlist><listitem><para>incremental checkpoint at end of mime headers block </para></listitem></itemizedlist></listitem><listitem><para>strcmp / scanf / char* loops for parsing URL (urlParse) </para></listitem><listitem><para>char* loop scan for end of each header line (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpHeader#">HttpHeader</ulink>::parse) </para></listitem><listitem><para>strcmp scan for : delimiter on header name and generate header objects </para></listitem><listitem><para>strListGet scan for parse of header content options </para></listitem></orderedlist><para>The <emphasis>response</emphasis> parsing system <code>Http1::ResponseParser::parse</code> in Squid-3.6+ is as follows: </para><orderedlist numeration="arabic"><listitem><para>scan for message version field </para><itemizedlist><listitem><para>accepting both &quot;HTTP/1.x&quot; and &quot;ICY&quot; protocol versions </para></listitem><listitem><para>if necessary generates a fake HTTP/0.9 reply and terminates parsing. </para></listitem><listitem><para>incremental checkpoint at end of version label </para></listitem></itemizedlist></listitem><listitem><para>scan for message status code field </para><itemizedlist><listitem><para>incremental checkpoint at end of status code </para></listitem></itemizedlist></listitem><listitem><para>scan for end of first line </para><itemizedlist><listitem><para>incremental checkpoint at end of line </para></listitem></itemizedlist></listitem><listitem><para>char* loop scan for end of header chunk (Http1::Parser::findMimeBlock / headersEnd) </para><itemizedlist><listitem><para>incremental checkpoint at end of mime headers block </para></listitem></itemizedlist></listitem><listitem><para>char* loop scan for end of header chunk (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpMsg#">HttpMsg</ulink>::httpMsgIsolateStart) </para></listitem><listitem><para>strcmp scan for : delimiter on header name and generate header objects (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpHeader#">HttpHeader</ulink>::parse) </para></listitem><listitem><para>strListGet scan for parse of header content options </para></listitem></orderedlist><para>The ICAP <emphasis>response</emphasis> parsing system <code>Adaptation::Icap::ResponseParser::parse</code> in parser-ng-icap-pt2 branch is as follows: </para><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> class inherits from the <code>Http1::ResponseParser</code> parser, but replaces the stage 1 version scan with an ICAP specific scan. </para><orderedlist numeration="arabic"><listitem><para>scan for message version field </para><itemizedlist><listitem><para>accepting &quot;ICAP/1.0&quot; protocol version only </para></listitem><listitem><para>incremental checkpoint at end of version label </para></listitem></itemizedlist></listitem><listitem><para>scan for message status code field </para><itemizedlist><listitem><para>incremental checkpoint at end of status code </para></listitem></itemizedlist></listitem><listitem><para>scan for end of first line </para><itemizedlist><listitem><para>incremental checkpoint at end of line </para></listitem></itemizedlist></listitem><listitem><para>char* loop scan for end of header chunk (Http1::Parser::findMimeBlock / headersEnd) </para><itemizedlist><listitem><para>incremental checkpoint at end of mime headers block </para></listitem></itemizedlist></listitem><listitem><para>char* loop scan for end of header chunk (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpMsg#">HttpMsg</ulink>::httpMsgIsolateStart) </para></listitem><listitem><para>strcmp scan for : delimiter on header name and generate header objects (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpHeader#">HttpHeader</ulink>::parse) </para></listitem><listitem><para>strListGet scan for parse of header content options </para></listitem></orderedlist><para><inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/alert.png" width="15"/></imageobject><textobject><phrase>/!\</phrase></textobject></inlinemediaobject> NOTE: Parsing of ICAP response messages and payload segments still uses the old <code>HttpMsg</code> API documented below for HTTP responses, when the payload segment is a request it uses the <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpMsg#">HttpMsg</ulink>::parse request-line code paths. </para></section><section><title>the baseline situation</title><itemizedlist><listitem override="none"><para><emphasis>Saved for comparison.</emphasis> </para></listitem></itemizedlist><para>Initial analysis of the <emphasis>request</emphasis> parsing systems in Squid-3 showed the parser stack to be as follows: </para><para><inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/alert.png" width="15"/></imageobject><textobject><phrase>/!\</phrase></textobject></inlinemediaobject> the entire stack is asynchronous with a full reset to step 1 after read operation where the message was incompletely received. </para><orderedlist numeration="arabic"><listitem><para>scan to skip over garbage prefix </para></listitem><listitem><para>parse request line to find LF, and invalid CR and NIL (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpParser#">HttpParser</ulink>::parseRequestLine) </para><itemizedlist><listitem override="none"><para>discard prior parse information !! </para></listitem></itemizedlist></listitem><listitem><para>and again, parse request line to find SP positions (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpParser#">HttpParser</ulink>::parseRequestLine) </para><itemizedlist><listitem override="none"><para>discard prior parse information !! </para></listitem></itemizedlist></listitem><listitem><para>parse inside each request-line token to check method/URL/version syntax (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpParser#">HttpParser</ulink>::parseRequestLine) </para><itemizedlist><listitem override="none"><para>discard prior parse information !! </para></listitem></itemizedlist></listitem><listitem><para>char* loop scan for end of header chunk (headersEnd) </para></listitem><listitem><para>sscanf re- scan and sanity check request line (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpRequest#">HttpRequest</ulink>::sanityCheck) </para><itemizedlist><listitem override="none"><para>incomplete, duplicates step 2 and 3, partially duplicates step 5. </para></listitem></itemizedlist></listitem><listitem><para>strcmp parse out request method,url,version (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpRequest#">HttpRequest</ulink>::parseFirstLine) </para><itemizedlist><listitem override="none"><para>duplicates step 3 and 4 </para></listitem></itemizedlist></listitem><listitem><para>strcmp / scanf / char* loops for parsing URL (urlParse) </para></listitem><listitem><para>char* loop scan for end of each header line (headersEnd) </para></listitem><listitem><para>strcmp scan for : delimiter on header name and generate header objects </para></listitem><listitem><para>strListGet scan for parse of header content options </para></listitem></orderedlist><para>The parse sequences join at header line parsing (step 6), with some crossover at sanity checks (step 3). <emphasis>response</emphasis> parsing is as follows: </para><orderedlist numeration="lowerroman"><listitem><para>processReplyHeader calls <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpMsg#">HttpMsg</ulink>::parse </para><itemizedlist><listitem override="none"><para>discarding all previous parse information !! </para></listitem></itemizedlist><orderedlist numeration="arabic"><listitem><para>char* loop scan for end of header chunk (headersEnd) </para></listitem><listitem><para>sscanf re- scan and sanity check first line (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpReply#">HttpReply</ulink>::sanityCheck) </para><itemizedlist><listitem override="none"><para>on fail skip to stage ii below </para></listitem></itemizedlist></listitem><listitem><para>strcspn scan for end of header line </para></listitem><listitem><para>char* loop scan for end of header chunk (HttpMSg::httpMsgIsolateStart) </para></listitem><listitem><para>strcmp parse out response version, status message (<ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/HttpReply#">HttpReply</ulink>::parseFirstLine) </para></listitem><listitem><para>strcspn scan for end of header line </para></listitem><listitem><para>char* loop scan for end of header chunk (wow 6 in a row!) (HttpMSg::httpMsgIsolateStart) </para></listitem><listitem><para>strcmp scan for : delimiter on header name and generate header objects </para></listitem><listitem><para>strListGet scan for parse of header content options </para></listitem></orderedlist><para>ii. check for special case missing &quot;HTTP&quot; and &quot;ICY&quot; protocol versions </para><itemizedlist><listitem><para>generates a fake HTTP/0.9 reply </para></listitem><listitem><para>packs it into a buffer </para></listitem><listitem><para>parses the fake reply !! </para><itemizedlist><listitem override="none"><para>discarding all previous parse information !! </para></listitem><listitem override="none"><para>repeat all of stage i </para></listitem></itemizedlist></listitem></itemizedlist><para>iii. char* loop scan for end of header chunk (headersEnd) </para><itemizedlist><listitem override="none"><para>because we seem not to have scanned enough times in stage i </para></listitem></itemizedlist></listitem></orderedlist><para>TODO: document the ICAP response parsing sequence. Despite visible efforts to make it simple that is even worse than HTTP response parsing due to its need to run the whole of the response AND request parsing chains above on payloads to auto-detect which will succeed. </para><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/CategoryFeature#">CategoryFeature</ulink> | <ulink url="https://wiki.squid-cache.org/Features/FasterHttpParser/CategoryWish#">CategoryWish</ulink> </para></section></section></section></article>