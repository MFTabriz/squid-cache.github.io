<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>Features/Authentication</title><revhistory><revision><revnumber>45</revnumber><date>2016-11-01 06:03:02</date><authorinitials>GarriDjavadyan</authorinitials><revremark>minor spelling error</revremark></revision><revision><revnumber>44</revnumber><date>2016-02-03 16:26:11</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>43</revnumber><date>2015-12-16 12:31:44</date><authorinitials>AmosJeffries</authorinitials><revremark>update text on NTLM /Negotiate credential caching, and some typos</revremark></revision><revision><revnumber>42</revnumber><date>2014-09-14 11:58:25</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>41</revnumber><date>2013-04-16 11:33:10</date><authorinitials>AmosJeffries</authorinitials><revremark>tweaks soem typos. mention NTLM/Negotiate credentials caching. mention Firefox auth scheme selection bug.</revremark></revision><revision><revnumber>40</revnumber><date>2012-02-11 01:24:15</date><authorinitials>AmosJeffries</authorinitials><revremark>polish the section about auth loops and re-challenges</revremark></revision><revision><revnumber>39</revnumber><date>2011-12-29 10:09:37</date><authorinitials>AmosJeffries</authorinitials><revremark>drop 2005 date from the intro</revremark></revision><revision><revnumber>38</revnumber><date>2011-12-29 10:03:23</date><authorinitials>AmosJeffries</authorinitials><revremark>link updates and import a generic auth overview from the NegotiateAuthentcation page</revremark></revision><revision><revnumber>37</revnumber><date>2011-05-31 19:31:37</date><authorinitials>Henrik Nordström</authorinitials><revremark>Category cleanup</revremark></revision><revision><revnumber>36</revnumber><date>2011-05-31 19:27:13</date><authorinitials>Henrik Nordström</authorinitials></revision><revision><revnumber>35</revnumber><date>2011-05-31 19:23:00</date><authorinitials>Henrik Nordström</authorinitials><revremark>Authentication is an implemented feature.</revremark></revision><revision><revnumber>34</revnumber><date>2011-05-01 13:23:00</date><authorinitials>AmosJeffries</authorinitials><revremark>updated info and links on the helpers and an extra way to use two user databases.</revremark></revision><revision><revnumber>33</revnumber><date>2011-03-17 11:21:55</date><authorinitials>AmosJeffries</authorinitials><revremark>mention side-band password behaviour and writing ones own auth helper</revremark></revision><revision><revnumber>32</revnumber><date>2010-03-10 01:08:20</date><authorinitials>AmosJeffries</authorinitials><revremark>document the all hack to prevent popups. its a FAQ</revremark></revision><revision><revnumber>31</revnumber><date>2009-10-17 06:50:20</date><authorinitials>Henrik Nordström</authorinitials><revremark>corrected proxy_auth acl type</revremark></revision><revision><revnumber>30</revnumber><date>2009-10-13 09:40:37</date><authorinitials>AmosJeffries</authorinitials><revremark>update links.</revremark></revision><revision><revnumber>29</revnumber><date>2009-06-12 03:01:59</date><authorinitials>AmosJeffries</authorinitials><revremark>FAQ list again</revremark></revision><revision><revnumber>28</revnumber><date>2009-06-12 03:00:35</date><authorinitials>AmosJeffries</authorinitials><revremark>this is a feature description</revremark></revision><revision><revnumber>27</revnumber><date>2009-06-12 02:59:09</date><authorinitials>AmosJeffries</authorinitials><revremark>add title</revremark></revision><revision><revnumber>26</revnumber><date>2009-06-12 02:57:05</date><authorinitials>AmosJeffries</authorinitials><revremark>tune config examples slightly to make explicit 407 denial more apparent. some typos</revremark></revision><revision><revnumber>25</revnumber><date>2009-02-11 12:50:18</date><authorinitials>AmosJeffries</authorinitials><revremark>break winbind how-to out into its own part of config examples.</revremark></revision><revision><revnumber>24</revnumber><date>2009-02-11 11:46:18</date><authorinitials>AmosJeffries</authorinitials><revremark>all ACL can be assumed for 2.x and is implicit for 3.x, no need to state a bad version</revremark></revision><revision><revnumber>23</revnumber><date>2009-02-04 09:23:46</date><authorinitials>AmosJeffries</authorinitials><revremark>link to config examples content</revremark></revision><revision><revnumber>22</revnumber><date>2008-12-20 00:28:11</date><authorinitials>meme-net.meme.com</authorinitials><revremark>Better wording: PAM can do more than 2 authentication databases.</revremark></revision><revision><revnumber>21</revnumber><date>2008-12-20 00:16:07</date><authorinitials>meme-net.meme.com</authorinitials><revremark>Add further resources for samba/ad &amp; pam.</revremark></revision><revision><revnumber>20</revnumber><date>2008-12-20 00:10:07</date><authorinitials>meme-net.meme.com</authorinitials><revremark>If PAM is authenticatiing against AD, then squid can use PAM directly.</revremark></revision><revision><revnumber>19</revnumber><date>2008-12-19 23:53:15</date><authorinitials>meme-net.meme.com</authorinitials><revremark>PAM came from Sun, it's not just Linux.</revremark></revision><revision><revnumber>18</revnumber><date>2008-12-19 23:47:37</date><authorinitials>meme-net.meme.com</authorinitials><revremark>PAM supports multiple authentication databases.</revremark></revision><revision><revnumber>17</revnumber><date>2008-10-31 04:42:33</date><authorinitials>68.53.243.121</authorinitials><revremark>Fix winbind pipe permissions section</revremark></revision><revision><revnumber>16</revnumber><date>2008-10-02 02:10:26</date><authorinitials>AmosJeffries</authorinitials><revremark>missed a bit</revremark></revision><revision><revnumber>15</revnumber><date>2008-10-02 02:09:35</date><authorinitials>AmosJeffries</authorinitials><revremark>update example to auth all-hack used by name instead of re-defined.</revremark></revision><revision><revnumber>14</revnumber><date>2008-05-18 19:39:01</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>13</revnumber><date>2008-03-14 14:30:01</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Added detail on authentication</revremark></revision><revision><revnumber>12</revnumber><date>2007-11-08 17:31:42</date><authorinitials>GuidoSerassio</authorinitials></revision><revision><revnumber>11</revnumber><date>2007-09-05 11:54:17</date><authorinitials>218-214-25-240.people.net.au</authorinitials><revremark>Change the ActiveDirectory article to the new domain</revremark></revision><revision><revnumber>10</revnumber><date>2006-10-03 12:26:00</date><authorinitials>Henrik Nordström</authorinitials><revremark>Cleaned up a bit. Corrected some examples. Removed references to Samba-2.X.</revremark></revision><revision><revnumber>9</revnumber><date>2006-09-27 12:08:16</date><authorinitials>rpivato</authorinitials><revremark>link fixup</revremark></revision><revision><revnumber>8</revnumber><date>2006-09-24 13:34:38</date><authorinitials>rpivato</authorinitials><revremark>syntax, bad WikiName</revremark></revision><revision><revnumber>7</revnumber><date>2006-08-27 10:17:51</date><authorinitials>aldi.workaround.org</authorinitials></revision><revision><revnumber>6</revnumber><date>2006-08-21 13:13:24</date><authorinitials>kinkie</authorinitials><revremark>Trivial format fixes</revremark></revision><revision><revnumber>5</revnumber><date>2006-08-13 09:02:26</date><authorinitials>kinkie</authorinitials><revremark>Added section on other resources</revremark></revision><revision><revnumber>4</revnumber><date>2006-03-07 19:20:04</date><authorinitials>GuidoSerassio</authorinitials><revremark>Synced with FAQs</revremark></revision><revision><revnumber>3</revnumber><date>2006-03-03 09:27:36</date><authorinitials>kinkie</authorinitials></revision><revision><revnumber>2</revnumber><date>2006-01-30 13:29:18</date><authorinitials>kinkie</authorinitials><revremark>Added two chapters. Added link to index.</revremark></revision><revision><revnumber>1</revnumber><date>2006-01-25 04:29:25</date><authorinitials>kinkie</authorinitials></revision></revhistory></articleinfo><section><title>Proxy Authentication</title><section><title>Details</title><para>There are six major flavours of authentication available in the HTTP world at this moment: </para><itemizedlist><listitem><para><ulink url="http://en.wikipedia.org/wiki/BasicAuthenticationScheme#">Basic</ulink> - been around since the very beginning </para></listitem><listitem><para><ulink url="http://en.wikipedia.org/wiki/NTLM#">NTLM</ulink> - Microsoft's first attempt at single-sign-on for LAN environments </para></listitem><listitem><para><ulink url="http://en.wikipedia.org/wiki/DigestAccessAuthentication#">Digest</ulink> - w3c's attempt at having a secure authentication system </para></listitem><listitem><para><ulink url="http://en.wikipedia.org/wiki/SPNEGO#">Negotiate (aka SPNEGO)</ulink> - Microsoft's second attempt at single-sign-on. </para></listitem><listitem><para><ulink url="http://en.wikipedia.org/wiki/OAuth#">OAuth</ulink> - IETF attempt at single-sign-on </para></listitem><listitem><para><ulink url="http://en.wikipedia.org/wiki/OAuth#OAuth_2.0">OAuth 2.0 (aka Bearer)</ulink> - IETF second attempt at single-sign-on </para></listitem></itemizedlist><para><ulink url="https://wiki.squid-cache.org/Features/Authentication/Squid-2.6#">Squid-2.6</ulink> and later support Basic, NTLM (SMB LM, v1 and v2), Digest, and <ulink url="https://wiki.squid-cache.org/Features/Authentication/Features/NegotiateAuthentication#">Negotiate</ulink> (Kerberos and/or NTLM flavours). </para></section><section><title>How does Proxy Authentication work in Squid?</title><para>Users will be authenticated if squid is configured to use <emphasis>proxy_auth</emphasis> ACLs (see next question). </para><para>Browsers send the user's authentication credentials in the HTTP <emphasis>Authorization:</emphasis> request header. </para><para>If Squid gets a request and the <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> rule list gets to a <emphasis>proxy_auth</emphasis> ACL or an <emphasis>external</emphasis> ACL (<ulink url="http://www.squid-cache.org/Doc/config/external_acl_type#">external_acl_type</ulink>) with <emphasis>%LOGIN</emphasis> parameter, Squid looks for the <emphasis>Authorization:</emphasis> header.  If the header is present, Squid decodes it and extracts a user credentials. </para><para>If the header is missing, Squid returns an HTTP reply with status 407 (Proxy Authentication Required). The user agent (browser) receives the 407 reply and then attempts to locate the users credentials. Sometimes this means a background lookup, sometimes a popup prompt for the user to enter a name and password.  The name and password are encoded, and sent in the <emphasis>Authorization</emphasis> header for subsequent requests to the proxy. </para><para><emphasis>NOTE</emphasis>: The name and password are encoded using &quot;base64&quot; (See section 11.1 of RFC <ulink url="https://tools.ietf.org/rfc/rfc2616#">2616</ulink>).  However, base64 is a binary-to-text encoding only, it does NOT encrypt the information it encodes.  This means that the username and password are essentially &quot;cleartext&quot; between the browser and the proxy.  Therefore, you probably should not use the same username and password that you would use for your account login. </para><para>Authentication is actually performed outside of main Squid process. When Squid starts, it spawns a number of authentication subprocesses. These processes read user credentials on stdin, and reply with &quot;OK&quot; or &quot;ERR&quot; on stdout.  This technique allows you to use a number of different authentication protocols (named &quot;schemes&quot; in this context). When multiple authentication schemes are offered by the server (Squid in this case), it is up to the User-Agent to choose one and authenticate using it. By RFC it should choose the safest one it can handle; in practice usually Microsoft Internet Explorer chooses the first one it's been offered that it can handle, and Mozilla browsers are bug-compatible with the Microsoft system in this field. </para><para>In addition to the well known Basic authentication Squid also supports the NTLM, Negotiate and Digest authentication schemes which provide more secure authentication methods, in that where the password is not exchanged in plain text over the wire. Each scheme have their own set of helpers and <ulink url="http://www.squid-cache.org/Doc/config/auth_param#">auth_param</ulink> settings. Notice that helpers for different authentication schemes use different protocols to talk with squid, so they can't be mixed. </para><para>For information on how to set up NTLM authentication see <ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Ntlm#">NTLM config examples</ulink>. </para><para>The Squid source code bundles with a few authentication backends (&quot;<emphasis>helpers</emphasis>&quot;) for authentication. These include: </para><itemizedlist><listitem><para>DB: Uses a SQL database. </para></listitem><listitem><para>getpwam: Uses the old-fashioned Unix password file. </para></listitem><listitem><para>LDAP: Uses the Lightweight Directory Access Protocol. </para></listitem><listitem><para>MSNT: Uses a Windows NT authentication domain. </para></listitem><listitem><para>MSNT-multi-domain: Allows login to one of multiple Windows NT domains. </para></listitem><listitem><para>NCSA: Uses an NCSA-style username and password file. </para></listitem><listitem><para>NIS (or YP): Uses the NIS database </para></listitem><listitem><para>PAM: Uses the Unix Pluggable Authentication Modules scheme. </para></listitem><listitem><para>POP3: Uses an email server to validate credentials. Useful for single-signon to proxy and email. </para></listitem><listitem><para>RADIUS: Uses a RADIUS server for login validation. </para></listitem><listitem><para>SASL: Uses SASL libraries. </para></listitem><listitem><para>SMB: Uses a SMB server like Windows NT or Samba. </para></listitem><listitem><para>SSPI: Windows native authenticator </para></listitem></itemizedlist><para>Documentation for each of these helpers can be found at <ulink url="http://www.squid-cache.org/Doc/man/"/>. Due to its simplicity Basic authentication has by far the most helpers, but the other schemes also have several helpers available. </para><para>In order to authenticate users, you need to compile and install one of the supplied authentication helpers, one of <ulink url="http://www.squid-cache.org/Misc/related-software.html#authenticators">the others</ulink>, or supply your own. </para><para>You tell Squid which authentication helper program to use with the <ulink url="http://www.squid-cache.org/Doc/config/auth_param#">auth_param</ulink> directive in squid.conf. Specify the name of the program, plus any command line options if necessary. For example: </para><screen><![CDATA[auth_param basic program /usr/local/squid/bin/ncsa_auth /usr/local/squid/etc/passwd]]></screen><para>(full configuration details for the specific helper you choose can be found in the manual pages linked above). </para></section><section><title>How do I use authentication in access controls?</title><para>Make sure that your authentication program is installed and working correctly.  You can test it by hand. </para><para>Add some <emphasis>proxy_auth</emphasis> ACL entries to your squid configuration. For example: </para><screen><![CDATA[acl foo proxy_auth REQUIRED
http_access allow foo
http_access deny all]]></screen><para>The REQUIRED term means that any already authenticated user will match the ACL named <emphasis>foo</emphasis>. </para><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/alert.png" width="15"/></imageobject><textobject><phrase>/!\</phrase></textobject></inlinemediaobject> Note that <emphasis role="strong">allow</emphasis> will NOT trigger the 407 authentication denial to fetch new auth details if the user is not correctly logged in already. Some browsers will send <emphasis>anonymous</emphasis> auth details by default. </para></listitem></itemizedlist><para>A slightly better way to do this and ensure the browser auth gets validated is: </para><screen><![CDATA[acl foo proxy_auth REQUIRED
http_access deny !foo
http_access allow localnet
http_access deny all]]></screen><para>Squid allows you to provide fine-grained controls by specifying individual user names.  For example: </para><screen><![CDATA[acl foo proxy_auth REQUIRED
acl bar proxy_auth lisa sarah frank joe
acl daytime time 08:00-17:00
http_access allow foo daytime
http_access allow bar
http_access deny all]]></screen><para>In this example, users named lisa, sarah, joe, and frank are allowed to use the proxy at all times.  Other users are allowed only during daytime hours. </para><para>The <ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples#">ConfigExamples</ulink> area contains some detailed examples: </para><para><orderedlist><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Bypass"><emphasis role="strong">ConfigExamples/Authenticate/Bypass</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Groups"><emphasis role="strong">ConfigExamples/Authenticate/Groups</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Kerberos"><emphasis role="strong">ConfigExamples/Authenticate/Kerberos</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Ldap"><emphasis role="strong">ConfigExamples/Authenticate/Ldap</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/LoggingOnly"><emphasis role="strong">ConfigExamples/Authenticate/LoggingOnly</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/MultipleSources"><emphasis role="strong">ConfigExamples/Authenticate/MultipleSources</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Mysql"><emphasis role="strong">ConfigExamples/Authenticate/Mysql</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Ncsa"><emphasis role="strong">ConfigExamples/Authenticate/Ncsa</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Ntlm"><emphasis role="strong">ConfigExamples/Authenticate/Ntlm</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/NtlmCentOS5"><emphasis role="strong">ConfigExamples/Authenticate/NtlmCentOS5</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/NtlmWithGroups"><emphasis role="strong">ConfigExamples/Authenticate/NtlmWithGroups</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/Radius"><emphasis role="strong">ConfigExamples/Authenticate/Radius</emphasis></ulink></listitem><listitem><ulink url="https://wiki.squid-cache.org/Features/Authentication/ConfigExamples/Authenticate/WindowsActiveDirectory"><emphasis role="strong">ConfigExamples/Authenticate/WindowsActiveDirectory</emphasis></ulink></listitem></orderedlist><!--The macro FullSearchCached caused an error and should be blacklisted. It returned the data '

' which caused the docbook-formatter to choke. Please file a bug.--> </para></section><section><title>How do I ask for authentication of an already authenticated user?</title><para>If a user is authenticated at the proxy you cannot &quot;log out&quot; and re-authenticate. The user usually has to close and re-open the browser windows to be able to re-login at the proxy. A simple configuration will probably look like this: </para><screen><![CDATA[acl my_auth proxy_auth REQUIRED
http_access deny !my_auth
http_access allow my_auth
http_access deny all]]></screen><para>There is a trick which can force the user to authenticate with a different account in certain situations. This happens if you deny access with an authentication related ACL <emphasis role="strong">last</emphasis> in the <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> deny statement. Example configuration: </para><screen><![CDATA[acl my_auth proxy_auth REQUIRED
acl google_users proxy_auth user1 user2 user3
acl google dstdomain .google.com
http_access deny google !google_users
http_access allow my_auth
http_access deny all]]></screen><para>In this case if the user requests <emphasis>www.google.com</emphasis> then the first <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> line matches and triggers re-authentication unless the user is one of the listed users. </para><para>Remember: it is the last ACL on a <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> line that determines whether authentication is performed. If the ACL deals with authentication a new challenge is triggered. If you didn't want that you would need to switch the order of ACLs so that you get <code>http_access deny !google_users google</code> or to use the loop prevention method outlned below. </para><para>But you might also run into a loop of constant authentication challenges if you are not careful. </para></section><section><title>How do I prevent Login Popups?</title><para>The login dialog box which pops up asking for username and password is a feature of your web browser. It only happens when the web browser has no working credentials it can hand to Squid when challenged for login. </para><para>Squid will only challenge for credentials when they are not sent and required: </para><screen><![CDATA[acl mustLogin proxy_auth REQUIRED]]></screen><para>this might cause a login popup. However modern browsers have a built-in password manager or access to the operating system credentials where they can locate a first attempt. This is commonly called single-sign-on. It is worth noting that despite popular advertising would indicate, single-sign-on does work with any HTTP authentication mechanism since it is a client browser feature not a HTTP or proxy feature. </para><para>If the browser is unable to find any initial details you WILL get the login popup. Regardless of what we do in Squid. </para><para>To prevent incorrect login details being re-challenged after sign-on has failed all you have to do is prevent the login ACL being the last on the authentication line. </para><para>For example, this normal configuration will cause a login re-challenge until working details are presented: </para><screen><![CDATA[http_access deny mustLogin]]></screen><para>This <emphasis role="strong">all hack</emphasis> will present a plain access denied page without challenging for different credentials: </para><screen><![CDATA[http_access deny mustLogin all]]></screen></section><section><title>How do I prevent Authentication Loops?</title><para>Another more subtle version of the above login looping happens when the loop is triggered by a group check rather than a username check. </para><para>Assume that you use LDAP group lookups and want to deny access based on an LDAP group (e.g. only members of a certain LDAP group are allowed to reach certain web sites). In this case you may trigger re-authentication although you don't intend to. This config is likely wrong for you: </para><screen><![CDATA[acl ldapgroup-allowed external LDAP_group PROXY_ALLOWED
]]><![CDATA[
http_access deny !ldapgroup-allowed
http_access allow all]]></screen><para>The <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> deny line would force the user to re-authenticate time and again if he/she is not member of the PROXY_ALLOWED group. This is perhaps not what you want. You rather wanted to deny access to non-members. </para><para>You need to rewrite this <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> line so that an ACL matches that has nothing to do with authentication. This is the correct example: </para><screen><![CDATA[acl ldapgroup-allowed external LDAP_group PROXY_ALLOWED
]]><![CDATA[
http_access deny !ldapgroup-allowed all
http_access allow all]]></screen><para>This way the <ulink url="http://www.squid-cache.org/Doc/config/http_access#">http_access</ulink> line still matches. But it's the <emphasis>all</emphasis> ACL which is now last in the line. Since <emphasis>all</emphasis> is a static ACL (that always matches) and has nothing to do with authentication you will find that the access is just denied. </para><para>See also: <ulink url="http://www.squid-cache.org/mail-archive/squid-users/200511/0339.html"/> </para></section><section><title>Does Squid cache authentication lookups?</title><para>It depends on the authentication scheme; Squid does some caching when it can. </para><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> Note: Caching credentials has nothing to do with how often the user needs to re-authenticate himself. It is the browser who maintains the session, and re-authentication is a business between the user and his browser, not the browser and Squid. The browser authenticates on behalf of the user on every request sent to Squid. What the Squid parameters control is only how often Squid will ask the defined helper if the password is still valid. </para></listitem></itemizedlist><itemizedlist><listitem><para>Successful Basic authentication results are cached for one hour by default. That means (in the worst case) it is possible for someone to keep using your cache up to an hour after they have been removed from the authentication database. You can control the expiration time with the <emphasis><ulink url="http://www.squid-cache.org/Doc/config/auth_param#">auth_param</ulink> basic credentialsttl</emphasis> configuration option. </para></listitem><listitem><para>Successful NTLM and Negotiate authentication results are tied to the client TCP connection state and each new request is validated against the stored credentials token. Credentials are thus &quot;cached&quot; only for as long as that TCP connection persists, each new TCP connection requires an entirely different authentication. </para></listitem></itemizedlist></section><section><title>Are passwords stored in clear text or encrypted?</title><para>In the basic scheme passwords is exchanged in plain text. In the other schemes only cryptographic hashes of the password is exchanged. </para><para>Squid stores cleartext passwords in its basic authentication memory cache. </para><para>Squid writes cleartext usernames and passwords when talking to the external basic authentication processes.  Note, however, that this interprocess communication occurs over TCP connections bound to the loopback interface or private UNIX pipes.  Thus, its not possible for processes on other computers or local users without root privileges to &quot;snoop&quot; on the authentication traffic. </para><para>Each authentication program must select its own scheme for persistent storage of passwords and usernames. </para><para>For the digest scheme Squid never sees the actual password, but the backend helper needs either plaintext passwords or Digest specific hashes of the same. </para><para>In the NTLM or Negotiate schemes Squid also never sees the actual password. Usually this is connected to a Windows realm or Kerberos realm and how these authentication services stores the password is outside of this document but usually it's not in plain text. </para><para>In side-band authentication, using the <ulink url="http://www.squid-cache.org/Doc/config/external_acl_type#">external_acl_type</ulink> directive. There is a <emphasis>password=</emphasis> value which is possibly transfered to Squid from the helper. This value is entirely <emphasis role="strong">optional</emphasis> and may in fact have no relation to a real password so we cannot be certain what risks are actually involved. When received it is generally treated by Squid as a cleartext Basic authentication password and it may be passed a such to peer proxies or services. </para></section><section><title>Can I use different authentication mechanisms together?</title><para>Yes, with limitations. </para><para>Commonly deployed user-agents support at least one and up to four different authentication protocols (also called <emphasis>schemes</emphasis>). </para><para>Those schemes are explained in detail elsewhere (see <ulink url="https://wiki.squid-cache.org/Features/Authentication/Features/NegotiateAuthentication#">Features/NegotiateAuthentication</ulink> and <ulink url="https://wiki.squid-cache.org/Features/Authentication/SquidFaq/TroubleShooting#">SquidFaq/TroubleShooting</ulink>). You <emphasis role="underline">can</emphasis> enable more than one at any given moment, just configure the relevant <ulink url="http://www.squid-cache.org/Doc/config/auth_param#">auth_param</ulink> sections for each different scheme you want to offer to the browsers. </para><para>RFC <ulink url="https://tools.ietf.org/rfc/rfc2617#">2617</ulink>, chapter 4.6, states: <emphasis>A user agent MUST choose to use the strongest auth-scheme it understands</emphasis>. Of course definition of <emphasis>strongest</emphasis> may vary </para><informaltable><tgroup cols="2"><colspec colname="col_0"/><colspec colname="col_1"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para> <inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/alert.png" width="15"/></imageobject><textobject><phrase>/!\</phrase></textobject></inlinemediaobject> </para></entry><entry colsep="1" rowsep="1"><para> Due to a <emphasis role="strong">bug</emphasis> in common User-Agents (most notably some Microsoft Internet Explorer and Firefox versions) the <emphasis role="underline">order</emphasis> the auth-schemes are configured <emphasis role="underline">is</emphasis> relevant. Early versions of MSIE instead chooses the <emphasis role="underline">first</emphasis> auth-scheme (in the order they are offered) it understands. </para></entry></row></tbody></tgroup></informaltable><para>In other words, you <emphasis role="strong">SHOULD</emphasis> use this order for the <emphasis>auth_params</emphasis> directives: </para><orderedlist numeration="arabic"><listitem><para>negotiate </para></listitem><listitem><para>ntlm </para></listitem><listitem><para>digest </para></listitem><listitem><para>basic </para></listitem></orderedlist><para>omitting those you do not plan to offer. </para><para>Once the admin decides to offer multiple auth-schemes to the clients, Squid <emphasis role="underline">can not</emphasis> force the clients to choose one over the other. </para></section><section><title>Can I use more than one user-database?</title><para>Generally speaking the answer is no, at least not from within Squid. </para><para>Unix's PAM authentication method is quite flexible and can authenticate in an either/or/both fashion from multiple authentication sources. </para><para>You can configure two different authentication schemes with different user database. However since there is no control over which the browser chooses to use. This is an unreliable option, if it works for you great, if not there is nothing we can do to help. </para><para>The web server Basic authentication scheme provides another approach, where you can cook a proxy script which relays the requests to different authenticators and applies an 'OR' type of logic. For all other auth-schemes this cannot be done; this is not a limitation in squid, but it's a feature of the authentication protocols themselves: allowing multiple user-databases would open the door for replay attacks to the protocols. </para></section><section><title>References</title><itemizedlist><listitem><para><ulink url="http://samba.org/samba/docs/man/Samba3-HOWTO/winbind.html">Winbind: Use of Domain Accounts</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/Samba-HOWTO-Collection/domain-member.html">Domain Membership</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/winbindd.8.html">winbindd man page</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/wbinfo.1.html">wbinfo man page</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/nmbd.8.html">nmbd man page</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/smbd.8.html">smbd man page</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/smb.conf.5.html">smb.conf man page</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/smbclient.1.html">smbclient man page</ulink> </para></listitem><listitem><para><ulink url="http://samba.org/samba/docs/man/manpages-3/ntlm_auth.1.html">ntlm_auth man page</ulink> </para></listitem></itemizedlist></section><section><title>Authentication in interception and transparent modes</title><para>Simply said, it's not possible to authenticate users using proxy authentication schemes when running in interception or transparent modes. See <ulink url="https://wiki.squid-cache.org/Features/Authentication/SquidFaq/InterceptionProxy#">SquidFaq/InterceptionProxy</ulink> for details on why. </para></section><section><title>Can I write my own authenticator?</title><para>Squid has a large range of versatile helpers to integrate with a very large number of popular authentication backends. Including custom-built corporate databases. Take a look through the bundled helpers manuals and online search engines. You will likely find someone has already done the hard work. </para><para>However, you may still find the need to write your own one for some system which has not been dreamed of yet. The protocol(s) Squid uses to communicate with its authentication helpers are very simple and documented in detail on the <ulink url="https://wiki.squid-cache.org/Features/Authentication/Features/AddonHelpers#">Features/AddonHelpers</ulink> page. </para></section><section><title>Other Resources</title><itemizedlist><listitem><para><ulink url="http://www.papercut.com/kb/Main/ConfiguringSquidProxyToAuthenticateWithActiveDirectory">Configuring Squid Proxy To Authenticate With Active Directory</ulink> </para></listitem><listitem><para><ulink url="http://wiki.samba.org/index.php/Samba_&amp;_Active_Directory">Samba &amp; Active Directory</ulink> </para></listitem><listitem><para><ulink url="http://www.kernel.org/pub/linux/libs/pam/Linux-PAM-html/Linux-PAM_SAG.html">The Linux-PAM System Administrators' Guide</ulink> </para></listitem></itemizedlist><!--rule (<hr>) is not applicable to DocBook--><para> Back to the <ulink url="https://wiki.squid-cache.org/Features/Authentication/SquidFaq#">SquidFaq</ulink> </para><para><ulink url="https://wiki.squid-cache.org/Features/Authentication/CategoryFeature#">CategoryFeature</ulink> </para></section></section></article>