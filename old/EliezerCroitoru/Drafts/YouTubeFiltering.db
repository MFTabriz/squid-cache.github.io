<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>EliezerCroitoru/Drafts/YouTubeFiltering</title><revhistory><revision><revnumber>1</revnumber><date>2021-04-01 01:22:05</date><authorinitials>Eliezer Croitoru</authorinitials></revision></revhistory></articleinfo><para>Most <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/MikroTik#">MikroTik</ulink> devices are pretty Router/Switch level and despite the fact that they have a proxy service it's not usable for HTTPS/SNI/etc. With <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/MikroTik#">MikroTik</ulink> the only option is to use some external service or device. The only real working solution I can recommend is some level of proxy or content filtering aware SSL deep inspection device/software. (The solution is for desktops and as for mobile devices you will need to test first to make sure it fit your needs) </para><para>I wrote an example for a filtering service which is based on Fortinet/RedWood/Squid/Checkpoint/others and customized url categorizing. I am using <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/RedWood#">RedWood</ulink> in production and have used Squid for a very long time but it lacks support for HTTP2 so there for <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/RedWood#">RedWood</ulink>. The example service and the sources(<ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/GoLang#">GoLang</ulink> and python ontop of docker compose) can be seen at: <ulink url="https://github.com/elico/yt-classification-service-example"/> </para><para>Technically speaking what you will need to define in the proxy or appliance if it can decrypt SSL is a policy which will include the relevant <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/YouTube#">YouTube</ulink> and other services url patterns. For <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/YouTube#">YouTube</ulink> to work eventually you will need to allow their video CDN network which is under the domain *.googlevideo.com. It is pretty safe to just allow all of the subdomains since google will require you to access their &quot;Web portal&quot;(technically speaking) urls like: <code>http://*.youtube.com/watch?v={video_id}...</code> Once you have the list of urls you want to allow on the youtube.com domain you will need to decide on the general policy which is either allow or deny all videos. To block all videos you will need to eventually block the pattern <code>http://*.youtube.com/watch?v=*</code>. In case you want to block also youtube thumbnail images and video snippets you will need to add another patterns to the setup. Another piece which is not covered in the code is <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/YouTube#">YouTube</ulink> APIs which can provide to the end user &quot;googlevideo.com&quot; links. One such a service name is: <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/LiteTube#">LiteTube</ulink> which embeds the googlevideo.com urls inside the html of the page. I am not aware of someone else then me that have implemented a prediction of the relevant googlevideo.com links for a video and allow only these. However I have not published this code yet, I do expect big appliances and cloud services companies to implement this without my help.. </para><para>If you are familiar with regex and bash enough you would be able to learn the relevant patterns from another script/code I wrote for the <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/CheckPoint#">CheckPoint</ulink> embedded NGFW 1500 series which is based on R80.20 at: <ulink url="https://github.com/elico/checkpoint-vid-filtering-managment"/> </para><para>Probably the relevant REGEX for this purpose are: </para><screen><![CDATA[(^|.*\.)youtube\.com/embed/##VID##
(^|.*\.)youtube\.com/watch\?v=##VID##
(^|.*\.)ytimg\.com/.*/##VID##/
(^|.*\.)youtu\.be/.*##VID##.*]]></screen><para>Please pay attention that the url query parameters position can be changed per request so you might need to tweak the regex if you will have someone trying to override these restrictions. </para><para>I don't know the scenario but I always recommend on educating first before the issues comes if possible. This is what why I wrote this long response. </para><para>I have been working on public white lists of <ulink url="https://wiki.squid-cache.org/EliezerCroitoru/Drafts/YouTubeFiltering/YouTube#">YouTube</ulink> videos not everyone shares the same ideals of me so it's very hard to whitelist and expect everyone to agree with this. </para><para>If you or anyone wants to implement squid with ssl bump and have a service that does the same you might want to look at the sources this ruby service I wrote at: <ulink url="https://github.com/elico/squid-external-matchers/blob/master/youtube-id-matcher.rb"/> </para></article>