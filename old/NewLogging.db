<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>NewLogging</title><revhistory><revision><revnumber>3</revnumber><date>2008-05-18 19:38:57</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>2</revnumber><date>2008-02-19 00:32:39</date><authorinitials>AmosJeffries</authorinitials><revremark>this is a wishlist category item</revremark></revision><revision><revnumber>1</revnumber><date>2007-03-21 09:20:25</date><authorinitials>AdrianChadd</authorinitials></revision></revhistory></articleinfo><section><title>New Logging Stuff</title><section><title>What is it?</title><para>The Squid logging stuff isn't: </para><itemizedlist><listitem><para>fast enough - stdio, same execution thread as Squid </para></listitem><listitem><para>flexible enough - only can write to a file; can't write over the network, to MySQL, etc. </para></listitem></itemizedlist><para>The aim of this is to enumerate a replacement logging facility for Squid which will be fast and flexible. </para></section><section><title>Previous attempts</title><itemizedlist><listitem><para>Some dead sourceforge project I think? Logging over TCP; saw messages being &quot;lost&quot; and thus was never finished </para></listitem><listitem><para>s26_logfile sourceforge branch - Adrian's initial attempt at simply breaking the logging out to an external process; didn't lose messages and showed great promise but wasn't finished. </para></listitem></itemizedlist></section><section><title>Stuff learnt doing s26_logfile</title><itemizedlist><listitem><para>Logs need to be rotated at the point where the person runs &quot;squid -k rotate&quot;; this means the rotate command has to be in-line with the rest of the logging message data. It was initially implemented as a signal which worked great but missed out on those messages which were &quot;in-flight&quot; in the kernel socket buffer between processes, or still buffered in Squid and awaiting sending to the helper </para></listitem><listitem><para>stdio by default does character by character reading in certain situations - make sure you use setvbuf() appropriately or your performance will suck (ie, a -lot- of single byte read() syscalls.) </para></listitem></itemizedlist></section><section><title>Stuff the new logfile thing should do</title><itemizedlist><listitem><para>Could be implemented varnish-style - shared memory ring buffer - fast, efficient, perhaps not portable to embedded environments (but is Squid currently portable to embedded environments? <inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/smile.png" width="15"/></imageobject><textobject><phrase>:)</phrase></textobject></inlinemediaobject> </para></listitem><listitem><para>UNIX stream sockets / pipes / loopback TCP: mostly portable everywhere, well-understood semantics. Need to be careful that you structure your messages in such a way that the OS has a chance of wrapping the messages up in VM trickery rather than having to copy the data around. Best way to ensure this - have your messages a fixed multiple of the page size and hope the application malloc() doesn't recycle those pages too quickly. Grr! </para></listitem><listitem><para>Still, even at 10,000 req/sec with an average logging line length of 160 characters thats 1.52 megabytes a second of data to copy; not exactly a huge amount for modern machines. </para></listitem><listitem><para>It shouldn't bother trying to enumerate the logging entries at all in the first pass. Just have them formatted in Squid and sent over as lines. It'd be nice if they were TLV encoded (it'd make the receiver's job easier if it wants to do any kind of processing - eg import into MySQL) but that can be version 2. </para></listitem><listitem><para>.. version the messages. </para></listitem><listitem><para>Sequence the messages - that way people implementing the logging process by blit-data-over-UDP will already have a nice, monotonically-incrementing sequence number they can use and don't have to fondle the packet themselves </para></listitem><listitem><para>Have certain &quot;control&quot; sequences: </para><itemizedlist><listitem><para>&quot;Rotate logfiles now&quot; </para></listitem><listitem><para>&quot;Flush what you have to disk now&quot; </para></listitem><listitem><para>&quot;Flush and shutdown&quot; </para></listitem><listitem><para>What else? </para></listitem></itemizedlist></listitem><listitem><para>s26_logfile treated individual logfile lines as commands - a command was simply a line, and most of them would be logging lines. The most efficient method would be to bunch the logfile lines up into a big chunk that can be written all at once to disk or the UDP socket but, to be honest, people will probably like having each line seperately enumerated. </para></listitem></itemizedlist></section><section><title>Implementation details</title><itemizedlist><listitem><para>Doing this using the Squid helper framework is fine </para></listitem><listitem><para>But you want to queue large amounts of data to write, not just write() line by line into the logging pipe; that makes 0 sense. </para></listitem><listitem><para>Change the Squid logfile*() routine semantics a little; ie: </para><itemizedlist><listitem><para>&quot;start of line&quot; </para></listitem><listitem><para>&quot;append data&quot;  </para></listitem><listitem><para>&quot;end of line&quot; </para></listitem><listitem><para>Again, this is slightly overkill, but I think the current code assumes it can write the logfile lines out partially and have it assembled correctly at the end. Tsk. </para></listitem></itemizedlist></listitem><listitem><para>Break the logging framework out into an API that can be served by different implementations, ie: </para><itemizedlist><listitem><para>&quot;sync logging&quot; - ie, like now </para></listitem><listitem><para>&quot;syslog logging&quot; - which is currently implemented as #ifdef's everywhere but probably shouldn't be </para></listitem><listitem><para>&quot;logfile helper&quot; - what this document discusses </para></listitem></itemizedlist></listitem></itemizedlist></section><section><title>Initial logging helpers?</title><itemizedlist><listitem><para>&quot;Write this to disk please&quot; </para></listitem><listitem><para>Find a volunteer to write a &quot;write this to disk _AND_ write out to MySQL too whilst you're at it&quot; </para></listitem><listitem><para>Find another volunteer to write a &quot;write this to disk and/or TCP socket please.&quot; </para></listitem><listitem><para>Grab the Wikipedia patch which does logging over UDP and massage it into this framework </para></listitem><listitem><para>Anthing else? </para></listitem></itemizedlist></section><section><title>Version 2?</title><itemizedlist><listitem><para>TLV the logfile lines (which should be easy for the custom logfile format) </para></listitem><listitem><para>shared memory ring buffers? </para></listitem><listitem><para>What else? </para></listitem></itemizedlist><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/NewLogging/CategoryFeature#">CategoryFeature</ulink> <ulink url="https://wiki.squid-cache.org/NewLogging/CategoryWish#">CategoryWish</ulink> </para></section></section></article>