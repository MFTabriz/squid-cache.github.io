<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ConfigExamples/ClusteringTproxySquid</title><revhistory><revision><revnumber>4</revnumber><date>2021-07-03 10:55:00</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>3</revnumber><date>2012-07-20 09:23:53</date><authorinitials>AmosJeffries</authorinitials><revremark>revert wiki syntax type</revremark></revision><revision><revnumber>2</revnumber><date>2012-07-20 09:03:48</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>1</revnumber><date>2012-07-20 09:03:27</date><authorinitials>Eliezer Croitoru</authorinitials></revision></revhistory></articleinfo><section><title>Clustering Tproxy Squid With Linux Router</title><para>by <emphasis>Eliezer Croitoru</emphasis> </para><para><emphasis role="strong">Warning</emphasis>: Any example presented here is provided &quot;as-is&quot; with no support or guarantee of suitability. If you have any further questions about these examples please email the squid-users mailing list. </para><section><title>Linux router and WCCP</title><para>WCCP stands for <ulink url="http://en.wikipedia.org/wiki/Web_Cache_Communication_Protocol">&quot;Web Cache Communication Protocol&quot;</ulink> </para><para>What is good about WCCP? WCCP allows web cache clustering with built in fail-over mechanism and semi auto configuration management. </para><para>It gives the Network administrator quiet in mind that if something in the cache cluster is not functioning the clients wont suffer from it. </para><para>WCCP can be implemented for http and other protocols. many Network administrator will implement the Web cache infrastructure close to the edge of the network to gain bandwidth, </para><para>Some cache architectures built to cooperate with the edge routing system: Peerapp exinda F5-sol1880 </para><para>if you do use Cisco you can use WCCP but in other cases such as If you are using Linux router As edge Router server\BGP\Route reflector it's another story. Even Vyatta the leading Open-source routing platform dont have support for WCCP. </para><para>To implement Web cache on the edge you need to throw some routing and iptables rules. </para></section><section><title>Outline</title><para>I will give a simple scenario and some basic rules and baselines. </para><para>In linux routing we have a &quot;main&quot; and &quot;local&quot; routing table for all traffic. &quot;Local&quot; is for psychically connected devices and &quot;main&quot; is for all other destinations. </para><para>There is a very good feature in linux routing system that allows custom Routing Tables. The idea is that based on &quot;ip rules&quot; we can define specific packets by &quot;src&quot; &quot;dst&quot; &quot;dev&quot; and &quot;fwmark&quot; to be routed specifically as we want. </para><para>It can be via specific up-link\port or in our case Cache proxy\cluster. </para><para>Compared to the CLI of cisco or juniper it can seem like annoying or joke to some but Linux has a very low limit on pps and there for very powerful. </para><itemizedlist><listitem><para>the cache proxy clusters can sit in a private network despite the fact they serve public addressees. </para><itemizedlist><listitem override="none"><para>it is involving natting so take a moment to think about the cost. </para></listitem></itemizedlist></listitem></itemizedlist><para>We will configure the linux router to mark all web (port 80) traffic(out to the net and back). based on the mark we will forward all the traffic using routing rule to specific &quot;cache&quot; table. The cache table consist of the list of cache proxy available.  The routes in the table will be load balanced using <ulink url="https://wiki.squid-cache.org/ConfigExamples/ClusteringTproxySquid/RoundRobin#">RoundRobin</ulink> Algorithm. (later i will maybe will do something more sophisticated)  </para></section><section><title>Topology</title><para>On the network: </para><itemizedlist><listitem><para>all the routing on the edge router is managed VIA routing Daemon(Bird). </para></listitem><listitem><para>all the cache proxies have routing Daemon connected to the edge routers to choose the right path\gw. </para></listitem></itemizedlist><para><inlinemediaobject><imageobject><imagedata fileref="http://www1.ngtech.co.il/squid/cachecluster.png"/></imageobject><textobject><phrase>http://www1.ngtech.co.il/squid/cachecluster.png</phrase></textobject></inlinemediaobject> </para></section><section><title>Basic assumptions on you</title><para>You know the difference between TPROXY and intercept mode of squid. </para><para>you do know basic\advanced Networking. </para><para>you do have experience using iptables iproute2(ip) and know a thing or two about routing Daemons(Quagga,Openbgpd,Bird)  </para></section><section><title>Linux Edge Configuration</title><para>Since we will use iptables you must understand we will *NOT* by any way use connection tracking!! the only layer we will use is IP\Layer 3 filtering. the only iptables modules needed for the task on the router are: </para><screen><![CDATA[ip_tables
iptable_mangle
iptable_filter
x_tables
xt_mark]]></screen><para>You must load them manually to avoid auto-loading of other modules. </para><para>Requirements on ubuntu: Basic ubuntu server ships with iptunnel iproute2 and all iptables modules needed for the task. </para><programlisting format="linespecific" language="highlight" linenumbering="numbered" startinglinenumber="1"><lineannotation><![CDATA[#!/usr/bin/bash]]></lineannotation>
<lineannotation></lineannotation>
<token><![CDATA[echo]]></token><![CDATA[ ]]><phrase><![CDATA["Loading modules.."]]></phrase>
<![CDATA[modprobe -a nf_tproxy_core xt_TPROXY xt_socket xt_mark ip_gre gre]]>


<methodname><![CDATA[LOCALIP]]></methodname><![CDATA[=]]><phrase><![CDATA["10.80.2.2"]]></phrase>
<methodname><![CDATA[CISCODIRIP]]></methodname><![CDATA[=]]><phrase><![CDATA["10.80.2.1"]]></phrase>
<methodname><![CDATA[CISCOIPID]]></methodname><![CDATA[=]]><phrase><![CDATA["192.168.10.127"]]></phrase>

<token><![CDATA[echo]]></token><![CDATA[ ]]><phrase><![CDATA["changing routing and reverse path stuff.."]]></phrase>
<token><![CDATA[echo]]></token><![CDATA[ 0 > /proc/sys/net/ipv4/conf/lo/rp_filter]]>
<token><![CDATA[echo]]></token><![CDATA[ 1 > /proc/sys/net/ipv4/ip_forward]]>

<token><![CDATA[echo]]></token><![CDATA[ ]]><phrase><![CDATA["creating tunnel..."]]></phrase>
<![CDATA[iptunnel add wccp0 mode gre remote ]]><methodname><![CDATA[$CISCOIPID]]></methodname><![CDATA[ ]]><token><![CDATA[local]]></token><![CDATA[ ]]><methodname><![CDATA[$LOCALIP]]></methodname><![CDATA[ dev eth1]]>
<![CDATA[ifconfig wccp0 127.0.1.1/32 up]]>

<token><![CDATA[echo]]></token><![CDATA[ ]]><phrase><![CDATA["creating routing table for tproxy..."]]></phrase>
<![CDATA[ip rule add fwmark 1 lookup 100]]>
<![CDATA[ip route add ]]><token><![CDATA[local]]></token><![CDATA[ 0.0.0.0/0 dev lo table 100]]>

<token><![CDATA[echo]]></token><![CDATA[ ]]><phrase><![CDATA["creating iptables tproxy rules..."]]></phrase>
<![CDATA[iptables -A INPUT  -i lo -j ACCEPT]]>
<![CDATA[iptables -A INPUT  -p icmp -m icmp --icmp-type any -j ACCEPT]]>
<![CDATA[iptables -A FORWARD -i lo -j ACCEPT]]>
<![CDATA[iptables -A INPUT  -s ]]><methodname><![CDATA[$CISCODIRIP]]></methodname><![CDATA[ -p udp -m udp --dport 2048 -j ACCEPT]]>
<![CDATA[iptables -A INPUT -i wccp0 -j ACCEPT]]>
<![CDATA[iptables -A INPUT -p gre -j ACCEPT]]>

<![CDATA[iptables -t mangle -F]]>
<![CDATA[iptables -t mangle -A PREROUTING -d ]]><methodname><![CDATA[$LOCALIP]]></methodname><![CDATA[ -j ACCEPT]]>
<![CDATA[iptables -t mangle -N DIVERT]]>
<![CDATA[iptables -t mangle -A DIVERT -j MARK --set-mark 1]]>
<![CDATA[iptables -t mangle -A DIVERT -j ACCEPT]]>
<![CDATA[iptables -t mangle -A PREROUTING -p tcp -m socket -j DIVERT]]>
<![CDATA[iptables -t mangle -A PREROUTING -p tcp --dport 80 -j TPROXY --tproxy-mark 0x1/0x1 --on-port 3129]]>
</programlisting><para>add into squid.conf the next lines: </para><screen><![CDATA[#add change the src subnet to the list of clients subnets allowed.
acl clients src 10.80.0.0/16
]]><![CDATA[
http_access allow clients
]]><![CDATA[
http_port 127.0.0.1:3128 
http_port 3129 tproxy
]]><![CDATA[
# replace 10.80.2.1 with your cisco router directly connected interface
wccp2_router 10.80.2.1
wccp_version 2
wccp2_rebuild_wait on
wccp2_forwarding_method 1
wccp2_return_method 1
wccp2_service standard 0
wccp2_service dynamic 80
wccp2_service dynamic 90
wccp2_service_info 80 protocol=tcp flags=src_ip_hash priority=240 ports=80
wccp2_service_info 90 protocol=tcp flags=dst_ip_hash,ports_source priority=240 ports=80]]></screen></section><section><title>Cisco settings</title><screen><![CDATA[conf t
]]><![CDATA[
ip access-list extended wccp
 permit ip 10.80.3.0 0.0.0.255 any
ip access-list extended wccp_to_inside
 permit ip any 10.80.3.0 0.0.0.255
exit
ip wccp version 2
ip wccp web-cache
ip wccp 80 redirect-list wccp
ip wccp 90 redirect-list wccp_to_inside
]]><![CDATA[
interface FastEthernet0/0
 ip wccp 80 redirect out
 ip wccp 90 redirect in
]]><![CDATA[
interface FastEthernet0/1
 ip wccp redirect exclude in]]></screen></section><section><title>Building Squid</title><para>On customed built of squid you must include: </para><screen><![CDATA[--enable-linux-netfilter --enable-wccpv2]]></screen><!--rule (<hr>) is not applicable to DocBook--><itemizedlist><listitem override="none"><para><ulink url="https://wiki.squid-cache.org/ConfigExamples/ClusteringTproxySquid/CategoryConfigExample#">CategoryConfigExample</ulink> </para></listitem></itemizedlist></section></section></article>