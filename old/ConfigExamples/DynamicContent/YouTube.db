<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ConfigExamples/DynamicContent/YouTube</title><revhistory><revision><revnumber>14</revnumber><date>2021-07-03 11:27:02</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>13</revnumber><date>2017-04-24 09:36:10</date><authorinitials>Eliezer Croitoru</authorinitials></revision><revision><revnumber>12</revnumber><date>2011-11-07 03:55:26</date><authorinitials>AmosJeffries</authorinitials><revremark>document php binary location problem. Also fix hash-bang display. It turns out to be a wiki comment token in those verbatum quotes</revremark></revision><revision><revnumber>11</revnumber><date>2011-06-02 01:08:52</date><authorinitials>AmosJeffries</authorinitials><revremark>bit of polish to make the fit better. spelling check. A few of the pro/con claims were wrong. I've left reasons for consideration. moved volatility comment to the headers it applies to the whole page.</revremark></revision><revision><revnumber>10</revnumber><date>2011-06-02 00:23:35</date><authorinitials>AmosJeffries</authorinitials><revremark>squid 3.1+ do cache dynamic content where possible.</revremark></revision><revision><revnumber>9</revnumber><date>2011-06-01 06:44:47</date><authorinitials>JoshuaOSullivan</authorinitials><revremark>Added my own personal solution</revremark></revision><revision><revnumber>8</revnumber><date>2011-04-20 23:22:38</date><authorinitials>AmosJeffries</authorinitials><revremark>add how to achieve while retaining squid-3 features (cheat).</revremark></revision><revision><revnumber>7</revnumber><date>2010-03-03 13:07:39</date><authorinitials>FrancescoChemolli</authorinitials><revremark>included Discussion on the topic</revremark></revision><revision><revnumber>6</revnumber><date>2009-07-26 07:23:35</date><authorinitials>AmosJeffries</authorinitials><revremark>correct refresh_pattern and cache deny to match our current recommendadtions.</revremark></revision><revision><revnumber>5</revnumber><date>2009-02-11 13:43:29</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>4</revnumber><date>2009-02-11 13:40:49</date><authorinitials>AmosJeffries</authorinitials><revremark>updates</revremark></revision><revision><revnumber>3</revnumber><date>2008-05-18 19:38:58</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>2</revnumber><date>2007-09-16 23:11:26</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>1</revnumber><date>2007-09-16 23:03:12</date><authorinitials>AmosJeffries</authorinitials></revision></revhistory></articleinfo><section><title>Caching YouTube Content</title><para><emphasis role="strong">Warning</emphasis>: Any example presented here is provided &quot;as-is&quot; with no support or guarantee of suitability. If you have any further questions about these examples please email the squid-users mailing list. </para><para>This page is ongoing development. Not least because it must keep up with youtube.com alterations. If you start to experience problems with any of these configs please first check back here for updated config. </para><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> <inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> <inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> Google\<ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/YouTube#">YouTube</ulink> changed their system to be more secure and due to this the article in it's current state is not applicable. You will need to use Content Adaptation to achive YT caching and it's not a beginne's task. </para><section><title>Outline</title><para>The default configuration of squid older than 3.1 prevents the caching of <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/ConfigExamples/DynamicContent#">dynamic content</ulink> and youtube.com specifically implement several 'features' that prevent their flash videos being effectively distributed by caches. </para><para>This page details the publicly available tactics used to overcome at least some of this and allow caching of a lot of youtube.com content. Be advised this demonstrated configuration has a mixed success rate, it works for some but others have reported it strangely not working at all. </para><para>Each configuration action is detailed with its reason and effect so if you find one that is wrong or missing please let us know. </para></section><section><title>Partial Solution 1: Local Web Server</title><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> A more polished, mature and expensive! version of this is available commercially as <ulink url="http://cachevideos.com/">VideoCache</ulink>. </para><para><emphasis>by JoshuaOSullivan</emphasis> </para></listitem></itemizedlist><para>With some luck and dodgy coding, I have managed to get youtube caching working. </para><para>My method requires a mostly normal squid setup, with a URL rewriter script which rewrites any requests destined for youtube to relay through a special caching web server script ie, <ulink url="http://www.youtube.com/watch?v=avaSdC0QOUM"/> becomes <ulink url="http://10.13.37.25/per.php?url=http%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DavaSdC0QOUM%0A"/> </para><para>This script checks the URL, uses readfile() to pass them all through except those which correspond to the flvs we want to hold on to. When these .flv URLs are encountered, they are fopen()'ed to find the size of the video, and the URL is parsed to find the id of the video. These seem to be constant for the same video of the same resolution. A file name is generated of the form &quot;id-size&quot;. This is the file naming format I have used, it allows differentiating between videos of the same source, but different resolution, as well as ensuring videos in the cache are not corrupted (correct size -&gt; things are probably good) </para><para>Once this filename is generated, a cache folder is searched, and if found, delivered to the user. The connection to youtube is then closed without any more data (except the headers containing file info) being downloaded. In the event the filename is not found in the folder, the video is downloaded in blocks (fread() in a while loops), and delivered to the user while simultaneously being saved to a file. </para><para>Pros of this solution: </para><itemizedlist><listitem><para>works with any Squid version </para></listitem><listitem><para>easily adaptable for other CDN </para></listitem></itemizedlist><para>Cons </para><itemizedlist><listitem><para>As of current, users cannot login, as I have not implemented passing POST data in my scripts. I have informed my users that I don't care, you might </para></listitem><listitem><para>If two people watch an uncached video at the same time, it will be downloaded by both. </para></listitem><listitem><para>It requires a webserver running at all times </para></listitem><listitem><para>Squid will not be holding the files, your webserver will have to hold them (and manage cache size by some other means) </para></listitem></itemizedlist><para>My explanation is likely lacking, email osullijosh &lt;at&gt; ecs.vuw.ac.nz for any questions. </para><section><title>squid.conf configuration</title><screen><![CDATA[# determine which URLs are going to be caught
acl youtube dstdomain .youtube.com
]]><![CDATA[
# pass requests 
url_rewrite_program /etc/squid/phpredir.php
url_rewrite_access allow youtube
]]><![CDATA[
# leave caching up to the local web server
cache deny youtube]]></screen><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> <emphasis role="strong">/usr/bin/php</emphasis> may not be the correct path or name for PHP on your system. Be sure to check and update this following example as needed. </para></listitem><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-error.png" width="16"/></imageobject><textobject><phrase>{X}</phrase></textobject></inlinemediaobject> also take care to remove the space between <emphasis># !</emphasis>. It is there to avoid a wiki bug. </para></listitem></itemizedlist><para>phpredir.php: </para><screen><![CDATA[# !/usr/bin/php
<?php
]]><![CDATA[
while ( $input = fgets(STDIN) ) {
  // Split the output (space delimited) from squid into an array.
  $input=explode(" ",$input);
  if(preg_match("@youtube@",$input[0])){
        $input[0]=urlencode($input[0]);
        $input= implode(" ",$input);
        echo "http://10.13.37.25/per.php?url=$input"; //URL of my web server
  }else
        echo ""; // empty line means no re-write by Squid.
}
?>]]></screen><para>per.php:  </para><screen><![CDATA[<?php
        
        $file_path="/var/www/videos";
        $logfile="$file_path/cache.log";
        $url=urldecode($_GET['url']);
        $urlptr=fopen($_GET['url'],"r");
        $blocksize=32*1024;
        
        //attempt to get. a 404 shouldn't happen, but...
        if($urlptr===FALSE){
                header("Status: 404 Not Found");
                die();
        }
        
        //find content type and length
        foreach($http_response_header as $line){
                if(substr_compare($line,'Content-Type',0,12,true)==0)
                        $content_type=$line;
                else if(substr_compare($line,'Content-Length',0,14,true)==0){
                        $content_length=$line;
                }
        }
        
        
        /**Youtube will detect if requests are coming form the wrong ip (ie, if only video requests are redirected, so, we must redirect all requests to youtube.
        As such, we must capture all requests t youtube. Most are unimportant, so we can pass them straight through **/
        if(!preg_match("@.*youtube.*videoplayback.*@",$url)){
                fpassthru($urlptr);
                fclose($urlptr);
                exit(0);
        } 
        
        //send content type and length
        header($content_type);
        header($content_length);
        
        //find youtube id;
        $url_exploded=explode('&',$url);
        $id="";
        foreach($url_exploded as $line){
                if(substr($line,0,3)==='id=')
                        $id=substr($line,3);
        }
        //Get the supposed file size
        $length=intval(substr($content_length,16));
        file_put_contents($logfile,"\nFound id=$id, content-type: $content_type content-length=$content_length\n",FILE_APPEND);
        
        //Do we have it? delivar if we do
        $fname="$file_path/$id-$length";
//Check if we have the file, and it is the correct size. incorrect size implies corruption
        if(file_exists($fname) &&filesize($fname)==$length){
                readfile($fname);
                logdata("HIT",$url,$fname);
                exit(0);
        }
        
        //file not in cache? Get it, send it & save it
        logdata("MISS",$url,$fname);
        $fileptr=fopen($fname,"w");
        //no validity check, simply don't write the file if we can't open it. prevents noticeable failure/
        
        while(!feof($urlptr)){
                $line=fread($urlptr,$blocksize);
                echo $line;
                if($fileptr) fwrite($fileptr,$line);
        }
        fclose($urlptr);
        if($fileptr) fclose($fileptr);
        
        function logdata($type,$what, $fname){
        $file_path="/var/www/videos";
        $logfile="$file_path/cache.log";
                $line="@ ".time()."Cache $type url: $what file: $fname client:".$_SERVER['REMOTE_ADDR']."\n";
                file_put_contents($logfile,$line,FILE_APPEND);
                }
?>]]></screen></section></section><section><title>Partial Solution 2: Squid Storage De-duplication</title><para>Some private modifications of squid have apparently achieved youtube.com caching. However, there is presently no simple solution available to the general public. </para><para>To cache youtube.com files you will need to enable caching of <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/ConfigExamples/DynamicContent#">dynamic content</ulink>. Along with some other measures which technically break the HTTP standards. </para><para>***SECURITY NOTE:*** Some of the required configuration (quick_abort_min + large maximum_object_size) requires collapsed-forwarding feature to protect from high bandwidth consumption and possible cache DDoS attacks. Squid-3 do not have that feature at this time. <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/Squid-2.7#">Squid-2.7</ulink> is recommended for use with these settings. </para><para>If you require Squid-3 for features this functionality can be achieved by configuring a <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/Squid-2.7#">Squid-2.7</ulink> proxy as a <ulink url="http://www.squid-cache.org/Doc/config/cache_peer#">cache_peer</ulink> dedicated to caching and serving the media content. </para><section><title>Missing Pieces</title><para>This configuration is still not complete, youtube.com performs some behavior which squid as yet cannot handle by itself. Thus the private ports are variations, rather than configurations. </para><itemizedlist><listitem><para>Each video request from youtube.com contains a non-random but changing argument next to the video name. Squid cannot yet keep only *part* of a query-string for hashing. Its an all-or-nothing deal straight out of the box. </para></listitem><listitem><para>The youtube.com load balancing methods make use of many varying sub-domains. Again any given video appears to be able to come from several of these. And again squid has an all-or-nothing deal on its URI hashing for domains. </para></listitem></itemizedlist><para>The combined solution to both of these is to add a feature to squid for detecting identical content and differing URL. Possibly limited by ACL to a certain site range, etc. Anyone able to donate time and/or money for this would be greatly loved by many. </para><para>UPDATE: see the <ulink url="http://www.squid-cache.org/Doc/config/storeurl_rewrite_program#">storeurl_rewrite_program</ulink> feature in <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/Squid-2.7#">Squid-2.7</ulink> and the <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/ConfigExamples/DynamicContent/YouTube/Discussion#">discussion</ulink> about this entry. </para></section><section><title>Squid Configuration File</title><screen><![CDATA[# REMOVE these lines from squid.conf
]]><![CDATA[
acl QUERY urlpath_regex cgi-bin \?
cache deny QUERY]]></screen><screen><![CDATA[# Break HTTP standard for flash videos. Keep them in cache even if asked not to.
refresh_pattern -i \.flv$ 10080 90% 999999 ignore-no-cache override-expire ignore-private
]]><![CDATA[
# Apparently youtube.com use 'Range' requests
# - not seen, but presumably when a video is stopped for a long while then resumed, (or fast-forwarded).
# - convert range requests into a full-file request, so squid can cache it
# NP: BUT slows down their _first_ load time.
quick_abort_min -1 KB
]]><![CDATA[
# Also videos are LARGE; make sure you aren't killing them as 'too big to save'
# - squid defaults to 4MB, which is too small for videos and even some sound files
maximum_object_size 4 GB
]]><![CDATA[
# Let the clients favorite video site through with full caching
# - they can come from any of a number of youtube.com subdomains.
# - this is NOT ideal, the 'merging' of identical content is really needed here
acl youtube dstdomain .youtube.com
cache allow youtube
]]><![CDATA[
]]><![CDATA[
# kept to demonstrate that the refresh_patterns involved above go before this.
# You may be missing the CGI pattern, it will need to be added if so.
refresh_pattern -i (/cgi-bin/|\?)   0   0%      0
refresh_pattern .                   0   0%   4320]]></screen></section></section><section><title>Discussion</title><para>See <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/Features/StoreUrlRewrite#">Features/StoreUrlRewrite</ulink> </para><para>See <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/Features/StoreID#">Features/StoreID</ulink> </para><!--rule (<hr>) is not applicable to DocBook--><itemizedlist><listitem override="none"><para><anchor id="C1"/> </para></listitem></itemizedlist><para>... lets figure out what the hell is going on with Google Video and Youtube stuff so we can cache the current setup. </para><para>-- <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/AdrianChadd#">AdrianChadd</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2008-09-11 08:17:06' which caused the docbook-formatter to choke. Please file a bug.--> </para><itemizedlist><listitem override="none"><para><anchor id="C2"/> </para></listitem></itemizedlist><para>A way to show you what Dynamic Content is really  </para><para><ulink url="http://www.youtube.com/watch?v=gGJvDEDN9mE"/> </para><para><ulink url="http://freevideolectures.com/Course/2712/Human-Computer-Interaction-Seminar-2009-2010/9"/> </para><para><ulink url="http://www1.ngtech.co.il/squid/How%20Dynamic%20Content%20Affects%20the%20Way%20People%20Find%20Online.mp4"/> </para><para>-- <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/Eliezer%20Croitoru#">Eliezer Croitoru</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2013-05-23 07:07:44' which caused the docbook-formatter to choke. Please file a bug.--> </para><section><title>Caching YT is impossible with Squid only now</title><!--rule (<hr>) is not applicable to DocBook--><para> Here is explanation, why. </para><para>Look at this examples: </para><para><ulink url="http://r5---sn-35153iuxa-unxe.googlevideo.com/videoplayback?fexp=9406000%2C9407051%2C9407155%2C9408211%2C9408710%2C9409069%2C9412774%2C9413139%2C9415365%2C9415485%2C9415943%2C9416023%2C9416126%2C9417124%2C9417707%2C9418059%2C9418153%2C9418493&amp;dur=59.960&amp;sparams=clen%2Cdur%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Csource%2Cupn%2Cexpire&amp;expire=1439682732&amp;mime=video%2Fmp4&amp;itag=133&amp;sver=3&amp;clen=1839270&amp;ipbits=0&amp;source=youtube&amp;upn=frjLRrUbi30&amp;gir=yes&amp;lmt=1390059363089578&amp;initcwndbps=1195000&amp;ms=au&amp;id=o-AFtTXtXwRjwha7q4BIYCS_f8XSmhujqIPz6WRCWmx_EV&amp;mv=m&amp;pl=24&amp;mt=1439661107&amp;signature=0BA3264E0527BDDC776638FF63E24FD4F2AD1372.A0C4A1C8494FE45D67DE46ED7E1539171D2E8EAD&amp;keepalive=yes&amp;ip=178.88.163.102&amp;key=yt5&amp;mn=sn-35153iuxa-unxe&amp;mm=31&amp;cpn=-XIWTPF1Iu3UkqEX&amp;alr=yes&amp;ratebypass=yes&amp;c=WEB&amp;cver=html5&amp;range=0-65535"/> </para><para><ulink url="http://r5---sn-35153iuxa-unxe.googlevideo.com/videoplayback?fexp=9406000%2C9407051%2C9407155%2C9408211%2C9408710%2C9409069%2C9412774%2C9413139%2C9415365%2C9415485%2C9415943%2C9416023%2C9416126%2C9417124%2C9417707%2C9418059%2C9418153%2C9418493&amp;dur=59.960&amp;sparams=clen%2Cdur%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Csource%2Cupn%2Cexpire&amp;expire=1439683037&amp;mime=video%2Fmp4&amp;itag=133&amp;sver=3&amp;clen=1839270&amp;ipbits=0&amp;source=youtube&amp;upn=a2jh61YtqHM&amp;gir=yes&amp;lmt=1390059363089578&amp;initcwndbps=1218750&amp;ms=au&amp;id=o-AHbHLu8KLwkKVRnFxBUAFqCsWdaoHdR8MbT7zYKmxOGA&amp;mv=m&amp;pl=24&amp;mt=1439661351&amp;signature=6B28C1212CF8B05876CD15FD4DF6CBF342A15986.682D57B2BDF46853531FF277AD0931B5C15745FA&amp;keepalive=yes&amp;ip=178.88.163.102&amp;key=yt5&amp;mn=sn-35153iuxa-unxe&amp;mm=31&amp;cpn=HacivF1pjo2272wc&amp;alr=yes&amp;ratebypass=yes&amp;c=WEB&amp;cver=html5&amp;range=0-65535"/> </para><para><ulink url="http://r5---sn-35153iuxa-unxe.googlevideo.com/videoplayback?mn=sn-35153iuxa-unxe&amp;mm=31&amp;source=youtube&amp;gir=yes&amp;ip=178.88.163.102&amp;ms=au&amp;id=o-AI2bwmp_Mpl28tzIDWg_j0aTozbjYeIPlGDTWSn0-gHM&amp;pl=24&amp;mv=m&amp;mt=1439661712&amp;dur=59.960&amp;mime=video%2Fmp4&amp;itag=133&amp;upn=nS9JOknbYiQ&amp;keepalive=yes&amp;ipbits=0&amp;sver=3&amp;signature=2042566511E016C1C380EC6EAB0C9839378A12B6.24BB86B78C3F30CC2D4245906FEF84696164DA0E&amp;fexp=9406000%2C9407051%2C9407155%2C9408211%2C9408710%2C9409069%2C9412774%2C9413139%2C9415365%2C9415485%2C9415943%2C9416023%2C9416126%2C9417124%2C9417707%2C9418059%2C9418153%2C9418493&amp;initcwndbps=1242500&amp;key=yt5&amp;expire=1439683425&amp;clen=1839270&amp;lmt=1390059363089578&amp;sparams=clen%2Cdur%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Csource%2Cupn%2Cexpire&amp;cpn=y4z2lMWMr1g0zeGX&amp;alr=yes&amp;ratebypass=yes&amp;c=WEB&amp;cver=html5&amp;range=0-65535"/> </para><para><ulink url="http://r5---sn-35153iuxa-unxe.googlevideo.com/videoplayback?signature=E6BE88A8621D30A9FEBEFCC545DACD976E24F152.2E0B41CF3B0713A679E3BDBE9B71735BC70E5993&amp;fexp=9408495%2C9408710%2C9409069%2C9409217%2C9410705%2C9413011%2C9415365%2C9415435%2C9415485%2C9416023%2C9416126%2C9416362%2C9416768%2C9417707%2C9418153%2C9418201%2C9418824%2C9418882%2C9419230&amp;initcwndbps=1280000&amp;gir=yes&amp;mime=video%2Fmp4&amp;key=yt5&amp;sver=3&amp;ipbits=0&amp;dur=59.960&amp;expire=1439683757&amp;lmt=1390059363089578&amp;pl=24&amp;itag=133&amp;source=youtube&amp;upn=TlciCXHbQH8&amp;id=o-AANRXe1AltjgV9Yl__yZAXOCbsOzzrhydaw_y2njb7lu&amp;keepalive=yes&amp;mm=31&amp;mn=sn-35153iuxa-unxe&amp;clen=1839270&amp;ip=178.88.163.102&amp;ms=au&amp;mt=1439662059&amp;mv=m&amp;sparams=clen%2Cdur%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Csource%2Cupn%2Cexpire&amp;cpn=6VD7ksNhBJK_4EHp&amp;alr=yes&amp;ratebypass=yes&amp;c=WEB&amp;cver=html5&amp;range=0-65535"/> </para><para><ulink url="http://r3---sn-35153iuxa-5a5s.googlevideo.com/videoplayback?id=o-AFcvbt-nnQgfr6HPCQLNqVlVAzCosYMGMkaARnpuPtsW&amp;dur=60.000&amp;mime=video%2Fmp4&amp;ms=au&amp;mt=1439663689&amp;pl=24&amp;itag=133&amp;sparams=clen%2Cdur%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Csource%2Cupn%2Cexpire&amp;mm=31&amp;ip=178.88.163.102&amp;mn=sn-35153iuxa-5a5s&amp;clen=1837672&amp;key=yt5&amp;keepalive=yes&amp;sver=3&amp;expire=1439685358&amp;initcwndbps=2405000&amp;upn=v-G4ILh-Gg8&amp;source=youtube&amp;signature=F0E8C077C79BDF05E63E29A43190A1498C73795D.EB4B87990375AE2C9863485BC6D353796B6929B0&amp;mv=m&amp;lmt=1434266179273944&amp;fexp=9408495%2C9408710%2C9409069%2C9409217%2C9410705%2C9413011%2C9415365%2C9415435%2C9415485%2C9416023%2C9416126%2C9416362%2C9416768%2C9417707%2C9418153%2C9418201%2C9418824%2C9418882%2C9419230&amp;gir=yes&amp;ipbits=0&amp;cpn=SbTcv_VClyQmafvK&amp;alr=yes&amp;ratebypass=yes&amp;c=WEB&amp;cver=html5&amp;range=0-65535"/> </para><para><ulink url="http://r5---sn-35153iuxa-5a5s.googlevideo.com/videoplayback?ip=178.88.163.102&amp;sver=3&amp;sparams=clen%2Cdur%2Cgir%2Cid%2Cinitcwndbps%2Cip%2Cipbits%2Citag%2Ckeepalive%2Clmt%2Cmime%2Cmm%2Cmn%2Cms%2Cmv%2Cpl%2Csource%2Cupn%2Cexpire&amp;id=o-ADz-7pyAmDndNVnrBX4ZZ4kM0QCNWAho2PwH-yvfjp3U&amp;initcwndbps=2426250&amp;mn=sn-35153iuxa-5a5s&amp;source=youtube&amp;mm=31&amp;upn=0F-VJ--jogA&amp;dur=59.960&amp;mv=m&amp;mt=1439673781&amp;fexp=9408495%2C9408710%2C9409069%2C9409217%2C9410705%2C9413011%2C9415365%2C9415435%2C9415485%2C9416023%2C9416126%2C9416362%2C9416768%2C9417707%2C9418153%2C9418201%2C9418824%2C9418882%2C9419230&amp;ms=au&amp;itag=133&amp;key=yt5&amp;mime=video%2Fmp4&amp;ipbits=0&amp;signature=23AB8C6EE125EC9470D741ECE57804BDD90425BA.91CE882EB213F4D6ED8F6932711831E63CF39D2F&amp;clen=1839270&amp;gir=yes&amp;expire=1439695516&amp;keepalive=yes&amp;pl=24&amp;lmt=1390059363089578&amp;cpn=_uCyDYRGixDVRAQ9&amp;alr=yes&amp;ratebypass=yes&amp;c=WEB&amp;cver=html5&amp;range=0-65535"/> </para><para>This is the same 5 sec video piece, got during day.  </para><para><emphasis role="strong">Note</emphasis>: All video ID's is unique. But this is the same clip. </para><para><emphasis role="strong">Question</emphasis>: Does anybody seen permanent part of all URL's? </para><para><emphasis role="strong">Answer</emphasis>: No. Google CDN generates unique ID for streaming servers (googlevideo) on JSON starting clip page. This ID is unchanged during watch, but changes in next runs. Also, audio and video now delivers separately, with independent streams. This ID decodes by HTML5 JS-based player, which is delivers to client browser at session starts. Player changes, like crypto algo, every week or two. So, most of all all YT caching solution on market are fake. They can't REALLY caching YT. </para><para>In theory, there is possible to write special store ID rewrite helper for YT. All we need - associate external video ID in youtube/watch/v=<emphasis role="strong">abcdefg</emphasis> with temporary session streams ID for following googlevideo gets and save it in cache with replaced real ID. Just extract generated ID from JSON starting page structure and replace backend servers ID before storing files. </para><para>In practice, best solution for today I found is NOT caching googlevideo.com domain, NOT caching youtube.com/watch/v= pages (try and see <inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/smile4.png" width="15"/></imageobject><textobject><phrase>;)</phrase></textobject></inlinemediaobject> why). The only solution is caching images/css/js from YT with store ID. If Google return static video ID, we can cache YT video again. But now it is impossible by any way. </para><para>-- <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/YuriVoinov#">YuriVoinov</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2015-08-16 01:17:00' which caused the docbook-formatter to choke. Please file a bug.--> </para></section><section><title>Knowing what to cache</title><para>My example is my favorite band; </para><para><ulink url="http://www.youtube.com/watch?v=pNL7nHWhMh0&amp;feature=PlayList&amp;p=E5F2BD7B040088AA&amp;index=0"/> </para><para>The video file and header below. </para><screen><![CDATA[http://www.youtube.com/get_video?video_id=pNL7nHWhMh0&t=OEgsToPDskJNnO0O5GuQtKoNgB-xSmhH'
]]><![CDATA[
Date: Thu, 11 Sep 2008 16:03:46 GMT
Server: Apache
Expires: Tue, 27 Apr 1971 19:44:06 EST
Cache-Control: no-cache
Location: http://v19.cache.googlevideo.com/get_video?video_id=pNL7nHWhMh0&origin=ash-v98.ash.youtube.com&signature=8CF859579781C2A297786C0433EFD3D0DA77985A.907C75B4F75160E1B33A82CB1B294D462B2324D9&ip=125.60.228.22&ipbits=2&expire=1221159826&key=yt1&sver=2
Keep-Alive: timeout=300
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: text/html; charset=utf-8]]></screen><para>Above header means redirect and it should not be cache. The Cache-Control:no-cache insures that. Now we follow redirect and we get the file. The reply header showed below. Which is the file we need to cache. </para><screen><![CDATA[Expires: Thu, 11 Sep 2008 17:03:50 GMT
Cache-Control: max-age=86400
Content-Type: video/flv
Accept-Ranges: bytes
Etag: "1903944549"
Content-Length: 7949664
Server: lighttpd/1.4.18
Last-Modified: Thu, 09 Aug 2007 16:18:19 GMT
Connection: close
Date: Thu, 11 Sep 2008 16:03:50 GMT]]></screen></section><section><title>To cache that content:</title><para>add this to squid.conf </para><screen><![CDATA[#  The keyword for all youtube video files are "get_video?", "videodownload?" and "videoplayback" plus the id,
acl store_rewrite_list urlpath_regex \/(get_video\?|videodownload\?|videoplayback.*id)]]></screen><para>[ UPDATE: if you still have cache deny QUERY line. Go do this: <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/ConfigExamples/DynamicContent#">ConfigExamples/DynamicContent</ulink> ] </para><para>and the storeurl feature </para><screen><![CDATA[storeurl_access allow store_rewrite_list
storeurl_access deny all
storeurl_rewrite_program /usr/local/etc/squid/storeurl.pl
storeurl_rewrite_children 1
storeurl_rewrite_concurrency 10]]></screen><para>and refresh pattern </para><screen><![CDATA[#youtube's videos
refresh_pattern (get_video\?|videoplayback\?|videodownload\?) 5259487 99999999% 5259487 override-expire ignore-reload ignore-private negative-ttl=0]]></screen><para>Storeurl script(where concurrency is &gt; 0) or the storeurl.pl above. concurrency 10 is faster than children 10. </para><screen><![CDATA[#your perl location in here, mine is #!/usr/bin/perl
$|=1;
while (<>) {
    @X = split;
    $x = $X[0] . " ";
if ($X[1] =~ /(youtube|google).*videoplayback\?/){
        @itag = m/[&?](itag=[0-9]*)/;
        @id = m/[&?](id=[^\&]*)/;
        @range = m/[&?](range=[^\&\s]*)/;
        print $x . "http://video-srv.youtube.com.SQUIDINTERNAL/@id&@itag@range\n";
    } else {
        print $x . $X[1] . "\n";
    }
}]]></screen><para>[UPDATE: &amp;range suppose to be partial contents... you may redirect them without &quot;&amp;range=xxx-xxx&quot; to cache the whole content] </para></section><section><title>The bug</title><para>It happens when the redirect content has no Cache-Control:no-cache header </para><screen><![CDATA[http://www.youtube.com/watch?v=mfHlA3fmJG0&feature=related
]]><![CDATA[
http://www.youtube.com/get_video?video_id=mfHlA3fmJG0&t=OEgsToPDskK2_KHdgtTJ7LFT8pxWayTb
Date: Thu, 11 Sep 2008 15:33:23 GMT
Server: Apache
Expires: Tue, 27 Apr 1971 19:44:06 EST
Cache-Control: no-cache
Location: http://v18.cache.googlevideo.com/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=046AAA380AE72BD92666F04FE5E6421EEAA8C035.B87EDB4B5C2F7731E25DE61B0C81937A0134ADD1&ip=125.60.228.22&ipbits=2&expire=1221158003&key=yt1&sver=2
Keep-Alive: timeout=300
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: text/html; charset=utf-8
]]><![CDATA[
http://v18.cache.googlevideo.com/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=046AAA380AE72BD92666F04FE5E6421EEAA8C035.B87EDB4B5C2F7731E25DE61B0C81937A0134ADD1&ip=125.60.228.22&ipbits=2&expire=1221158003&key=yt1&sver=2
Location: http://208.117.253.103/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=046AAA380AE72BD92666F04FE5E6421EEAA8C035.B87EDB4B5C2F7731E25DE61B0C81937A0134ADD1&ip=125.60.228.22&ipbits=2&expire=1221158003&key=yt1&sver=2
Expires: Thu, 11 Sep 2008 15:48:25 GMT
Cache-Control: public,max-age=900
Connection: close
Date: Thu, 11 Sep 2008 15:33:25 GMT
Server: gvs 1.0
]]><![CDATA[
http://208.117.253.103/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=046AAA380AE72BD92666F04FE5E6421EEAA8C035.B87EDB4B5C2F7731E25DE61B0C81937A0134ADD1&ip=125.60.228.22&ipbits=2&expire=1221158003&key=yt1&sver=2
Expires: Thu, 11 Sep 2008 16:33:26 GMT
Cache-Control: public,max-age=3600
Content-Type: video/flv
Accept-Ranges: bytes
Etag: "765088821"
Content-Length: 10357890
Server: lighttpd/1.4.18
Last-Modified: Sat, 13 Oct 2007 10:58:26 GMT
Connection: close
Date: Thu, 11 Sep 2008 15:33:26 GMT]]></screen><para>This is the header that will compromise. Uses redirect without no-cache </para><screen><![CDATA[http://v18.cache.googlevideo.com/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=046AAA380AE72BD92666F04FE5E6421EEAA8C035.B87EDB4B5C2F7731E25DE61B0C81937A0134ADD1&ip=125.60.228.22&ipbits=2&expire=1221158003&key=yt1&sver=2
Location: http://208.117.253.103/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=046AAA380AE72BD92666F04FE5E6421EEAA8C035.B87EDB4B5C2F7731E25DE61B0C81937A0134ADD1&ip=125.60.228.22&ipbits=2&expire=1221158003&key=yt1&sver=2
Expires: Thu, 11 Sep 2008 15:48:25 GMT
Cache-Control: public,max-age=900
Connection: close
Date: Thu, 11 Sep 2008 15:33:25 GMT
Server: gvs 1.0]]></screen><para>And the result is </para><screen><![CDATA[http://www.youtube.com/get_video?video_id=mfHlA3fmJG0&t=OEgsToPDskL6YzrwgHy6u70-jZ1DC_el
Location: http://208.117.253.103/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=2E57B84A8F23742666E884CF3B2C51A4277EBB2C.126363C8AFBDD2DBD3312BB8911EA2364F723561&ip=125.60.228.22&ipbits=2&expire=1221157983&key=yt1&sver=2
Expires: Thu, 11 Sep 2008 15:48:03 GMT
Cache-Control: public,max-age=900
Date: Thu, 11 Sep 2008 15:33:03 GMT
Server: gvs 1.0
Age: 5356
Content-Length: 0
X-Cache: HIT from Server
Connection: keep-alive
Proxy-Connection: keep-alive
]]><![CDATA[
http://208.117.253.103/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=2E57B84A8F23742666E884CF3B2C51A4277EBB2C.126363C8AFBDD2DBD3312BB8911EA2364F723561&ip=125.60.228.22&ipbits=2&expire=1221157983&key=yt1&sver=2
Location: http://208.117.253.103/get_video?video_id=mfHlA3fmJG0&origin=sjl-v120.sjl.youtube.com&signature=2E57B84A8F23742666E884CF3B2C51A4277EBB2C.126363C8AFBDD2DBD3312BB8911EA2364F723561&ip=125.60.228.22&ipbits=2&expire=1221157983&key=yt1&sver=2
Expires: Thu, 11 Sep 2008 15:48:03 GMT
Cache-Control: public,max-age=900
Date: Thu, 11 Sep 2008 15:33:03 GMT
Server: gvs 1.0
Age: 5356
Content-Length: 0
X-Cache: HIT from Server
Connection: keep-alive
Proxy-Connection: keep-alive]]></screen><para>The content that is being cache is the redirect file which is empty. Which will also loop back to redirect content. </para><para>If only we could deny these Location reply header to storeurl will solve the problem and for additional tuning for its performance if we only pass bigger files to storeurl. </para><section><title>Temporary work around</title><para>change this on your squid.conf </para><screen><![CDATA[minimum_object_size 512 bytes]]></screen><para>This will ignore content 512 bytes and below. Since redirect file is smaller. The <emphasis role="strong">Disadvantage</emphasis> is this will ignore all content below 512 bytes in your cache. </para><para>If you have other idea that could help please email me <ulink url="mailto:chudy_fernandez@yahoo.com">chudy_fernandez@yahoo.com</ulink> . </para><!--rule (<hr>) is not applicable to DocBook--><itemizedlist><listitem override="none"><para><anchor id="C3"/> </para></listitem></itemizedlist><para>Right, so you need to deny caching the temporary redirect from Google so you can always hit your local cache for the initial URL? The problem is that the store URL stuff is rewriting the URL on the -request-. Its pointless to rewrite the store URL on -reply- because you'd not be able to handle a cache hit that way. <inlinemediaobject><imageobject><imagedata depth="15" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/smile.png" width="15"/></imageobject><textobject><phrase>:)</phrase></textobject></inlinemediaobject> </para><para>This could be done separately from the store URL stuff. Whats needed is a way to set the cachability of something based on a -reply- ACL. </para><para>That way you could match on the HTTP status code and the Location URL; and just say &quot;don't bother caching this&quot;; the client would then request the redirected URL (which is presumably the video) from you. </para><para>Do you think that'd be enough? </para><para>-- <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/AdrianChadd#">AdrianChadd</ulink> <!--The macro DateTime caused an error and should be blacklisted. It returned the data '2008-09-14 09:20:00' which caused the docbook-formatter to choke. Please file a bug.--> </para><!--rule (<hr>) is not applicable to DocBook--></section><section><title>Fixed</title><para>Diff file below.. </para><itemizedlist><listitem override="none"><para><anchor id="C302"/> </para></listitem></itemizedlist><screen><![CDATA[Index: src/client_side.c
===================================================================
--- src/client_side.c   (revision 134)
+++ src/client_side.c   (working copy)
@@ -2408,6 +2408,17 @@
                is_modified = 0;
        }
     }
+       /* bug fix for 302 moved_temporarily loop bug when using storeurl*/
+       if (mem->reply->sline.status >= 300 && mem->reply->sline.status < 400) {
+       if (httpHeaderHas(&e->mem_obj->reply->header, HDR_LOCATION))
+       if (!strcmp(http->uri,httpHeaderGetStr(&e->mem_obj->reply->header, HDR_LOCATION))) {
+               debug(33, 2) ("clientCacheHit: Redirect Loop Detected: %s\n",http->uri);
+               http->log_type = LOG_TCP_MISS;
+               clientProcessMiss(http);
+                       return;
+       }
+       }
+       /* bug fix end here*/
     stale = refreshCheckHTTPStale(e, r);
     debug(33, 2) ("clientCacheHit: refreshCheckHTTPStale returned %d\n", stale);
     if (stale == 0) {]]></screen><para><emphasis role="strong">Squid version:</emphasis> squid-2.HEAD-20081105 also works on 2.7 series </para><para>Good luck! </para><para><ulink url="mailto:Chudy_Fernandez@yahoo.com">Chudy_Fernandez@yahoo.com</ulink> </para></section></section><!--rule (<hr>) is not applicable to DocBook--><para> <ulink url="https://wiki.squid-cache.org/ConfigExamples/DynamicContent/YouTube/CategoryConfigExample#">CategoryConfigExample</ulink> </para></section></section></article>