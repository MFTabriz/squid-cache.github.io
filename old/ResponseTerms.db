<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ResponseTerms</title><revhistory><revision><revnumber>4</revnumber><date>2019-07-22 13:52:36</date><authorinitials>AlexRousskov</authorinitials><revremark>Detailed &quot;last response&quot;.</revremark></revision><revision><revnumber>3</revnumber><date>2019-07-22 13:31:21</date><authorinitials>AlexRousskov</authorinitials><revremark>minor fixes and polishing; added TODOs to document the next steps for this page</revremark></revision><revision><revnumber>2</revnumber><date>2019-07-17 16:14:34</date><authorinitials>EduardBg</authorinitials></revision><revision><revnumber>1</revnumber><date>2019-07-17 16:13:39</date><authorinitials>EduardBg</authorinitials></revision></revhistory></articleinfo><section><title>Response Terminology</title><para>This page documents various response-related terms. This terminology <ulink url="https://github.com/squid-cache/squid/pull/398">will be</ulink> used, for example, to describe logformat %codes dealing with responses. </para><para>TODO: Transform into a more general [Configuration] Terminology page. This move should probably be done before PR <ulink url="https://github.com/squid-cache/squid/pull/398">#398</ulink> changes are committed. </para><para>TODO: The diagram below can be clarified a lot by using an image instead of an ASCII art. Graphical diagrams is one of the reasons we may want to document terminology here, on the wiki, instead of in squid.conf.documented. On the other hand, we can probably teach configuration <ulink url="http://www.squid-cache.org/Doc/config/">renderer</ulink> to to show images that use some simple embedding syntax in squid.conf.documented. The latter would help address the &quot;which Squid version uses which terminology&quot; problem. </para><screen><![CDATA[client <-- (sent) -- Squid server <-- (received) -- Squid client <-- (virgin) -- origin server or cache peer
client <-- (sent) -- Squid server <-- (received) -- cache
client <-- (sent) -- Squid server <-- (received) -- error generator
client <-- (sent) -- Squid server <-- (received) -- pre-cache REQMOD request satisfaction service
client <-- (sent) -- Squid server <-- (received) -- pre-cache RESPMOD adaptation service(s) <-- Squid client <-- (virgin) -- origin server or cache peer]]></screen><para>* <emphasis role="strong">received</emphasis>: a response received by Squid. Typical sources include origin servers, cache peers, adaptation services, and the cache store. Another possible source of received replies is a pre-cache REQMOD adaptation service working in a request satisfaction mode. Unless restricted further, received replies include both interim and final responses. </para><para>* <emphasis role="strong">sent</emphasis> : A response that was massaged (e.g., by http_reply_access rules) and forwarded by the Squid server to a Squid client. Most sent replies come from received responses that were adjusted for Squid client use. This category also includes responses that were meant to be sent but could not be (fully) written to the network due to exceptional circumstances such as an unexpected client connection termination. </para><para>* <emphasis role="strong">adapted</emphasis>: A response received from a RESPMOD adaptation service (eCAP or ICAP). </para><para>* <emphasis role="strong">(internally) generated</emphasis>: A response (usually an &quot;error page&quot;) created from scratch by Squid itself. Replies can be generated at virtually any transaction processing stage, both before and after caching and adaptation layers. </para><para>* <emphasis role="strong">final</emphasis>: A response that ends the corresponding protocol transaction (e.g., HTTP 200 OK). </para><para>* <emphasis role="strong">interim</emphasis>: Not a final response (e.g., HTTP 100 Continue). In most deployment environments, most transactions do not have interim responses. </para><para>* <emphasis role="strong">last</emphasis>: A single transaction may deal with zero or more interim responses and at most one final response. Usually, a logformat %code is expanded to the latest <emphasis>at %code expansion time</emphasis> response (i.e. the final response or, if there is no final response, the interim response closest to the final response). Since logformat %codes may be expanded when setting annotations and communicating with helpers, external ACLs, and adaptation services, the same %code may expand to different values within the same transaction, depending on the timing of that %code use. </para></section></article>