<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>BuildFarm/DockerBuildFarm</title><revhistory><revision><revnumber>8</revnumber><date>2021-06-22 22:07:35</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>7</revnumber><date>2020-01-27 21:39:51</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>6</revnumber><date>2020-01-25 04:49:26</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>5</revnumber><date>2020-01-25 04:45:32</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>4</revnumber><date>2018-10-21 13:20:16</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Fix ToC</revremark></revision><revision><revnumber>3</revnumber><date>2018-10-21 13:19:48</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>2</revnumber><date>2015-10-29 11:06:50</date><authorinitials>AmosJeffries</authorinitials><revremark>update the docker editing instructions, scripts have changed slightly at some point.</revremark></revision><revision><revnumber>1</revnumber><date>2014-12-17 22:36:25</date><authorinitials>FrancescoChemolli</authorinitials></revision></revhistory></articleinfo><section><title>Docker-based build farm setup</title><section><title>Host</title><para>The build farm itself runs on <emphasis>buildmaster.squid-cache.org</emphasis>. You need a login there to perform any of the following. </para><para>All content is in /srv/jenkins, which is the home directory of the jenkins user. The only external hook is <code>/etc/rc.local</code>, to start jenkins up. </para><para>Jenkins runs as user <code>jenkins</code>; it connects to remote hosts using ssh (some have their own service calling in via jnlp), and starts up docker-based slaves on demand when there is a build to be done. </para></section><section><title>Docker setup and conventions</title><para>Each slave is based on an image. The list of available images can be obtained (as root or jenkins) with the command <code>docker images</code>. The ones that are relevant for the farm are named with the convention <code>farm-&lt;osname&gt;-&lt;osversion&gt;</code>. Known-good recovery points are tagged with the date of the recovery point - the convention is thus <code>farm-&lt;osname&gt;-&lt;osversion&gt;:&lt;yymmdd&gt;</code>. </para><para>The <code>/home/jenkins</code> directory of each slave is meant to host the build environment for that slave, and is mapped from the host directory <code>/srv/jenkins/docker-images/&lt;osname&gt;-&lt;osversion&gt;</code>. </para><para>In <code>/srv/jenkins/docker-images</code> there are also a few utility commands to support managing containers. </para><itemizedlist><listitem override="none"><para><code>./interactive &lt;containername&gt;</code> </para><itemizedlist><listitem override="none"><para>run container &quot;farm-&lt;containername&gt;&quot; interactively. Its use-case is to manage the software installed in the container image. </para></listitem></itemizedlist></listitem><listitem override="none"><para><code>./slave &lt;containername&gt;</code> </para><itemizedlist><listitem override="none"><para>script meant to launch the jenkins slave with the appropriate command-line arguments </para></listitem></itemizedlist></listitem></itemizedlist></section><section><title>Image management</title><para>Images are built from dockerfiles in jenkins@buildmaster:~/docker-images/dockerfiles (it's a local git repository). In order to update an image, edit the relevant dockerfile, then in the top directory, </para><screen><![CDATA[$ make <image name> [<image name> ...]]]></screen><para>To clean older versions if images: </para><screen><![CDATA[$ make clean]]></screen></section><section><title>Host installation</title><para>The host needed to run the images can be installed using this commands list (assuming a debian host) </para><screen><![CDATA[apt -y update && apt -y upgrade && apt -y install openjdk-11-jre-headless docker.io
useradd -m -u 1000 -G docker jenkins
]]><![CDATA[
(optional)
docker pull --all-tags squidcache/buildfarm]]></screen></section><section><title>Autoscale on-demand builds</title><para>These run on buildmaster, here's how the concepts fit together: - builds need to be tied to a node labelled &quot;docker-build-host&quot;. This label is provided by the <ulink url="https://wiki.squid-cache.org/BuildFarm/DockerBuildFarm/DigitalOcean#">DigitalOcean</ulink> plugin, which instantiates a new cloud VM on demand, and tears it down when not used. The cloud initialiser installs what is needed to run a slave. If it is a matrix build, there needs to be a &quot;slaves&quot; matrix axis with a single label to enforce this, or jobs will be run everywhere - The build command is: </para><itemizedlist><listitem override="none"><para><code>docker run --rm -u jenkins -v `pwd`:`pwd` -w `pwd` squidcache/buildfarm:${OS} /bin/bash -l ./test-builds.sh --verbose ${tests} </code> where OS is either a matrix axis or an OS label. </para></listitem></itemizedlist><para>- the docker images to be used are hosted on the docker hub, as labels of squidcache/buildfarm - in order to build and push these images, go to jenkins@buildmaster:~/docker-images/dockerfiles, and <code>make all push</code> </para></section></section></article>