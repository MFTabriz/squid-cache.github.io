<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>SquidCodingGuidelines</title><revhistory><revision><revnumber>35</revnumber><date>2021-08-12 04:42:39</date><authorinitials>AmosJeffries</authorinitials><revremark>update to clarify requirements QA review has been requesting a lot regarding CamelCase,class layouts, and remove obsolete exclusion for C++ includes.</revremark></revision><revision><revnumber>34</revnumber><date>2020-04-04 08:35:08</date><authorinitials>FrancescoChemolli</authorinitials></revision><revision><revnumber>33</revnumber><date>2020-02-11 23:56:34</date><authorinitials>AmosJeffries</authorinitials><revremark>extracted non-C++ language details to their own supplementary pages</revremark></revision><revision><revnumber>32</revnumber><date>2020-02-11 23:45:27</date><authorinitials>AmosJeffries</authorinitials><revremark>move automake details to child page</revremark></revision><revision><revnumber>31</revnumber><date>2016-02-08 12:23:03</date><authorinitials>AmosJeffries</authorinitials><revremark>mention some limits on convenience library names. the character limitation is imposed by external dependency tracking tools</revremark></revision><revision><revnumber>30</revnumber><date>2015-08-27 16:48:39</date><authorinitials>FrancescoChemolli</authorinitials><revremark>Updated Big3 to c++11 Big5</revremark></revision><revision><revnumber>29</revnumber><date>2015-08-27 15:54:23</date><authorinitials>FrancescoChemolli</authorinitials><revremark>It's not just squid 3 anymore</revremark></revision><revision><revnumber>28</revnumber><date>2014-02-21 00:23:34</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>27</revnumber><date>2014-02-21 00:20:45</date><authorinitials>AmosJeffries</authorinitials><revremark>updated file #include policies for non-wrapping C++ standard headers effective 2014-02-21.</revremark></revision><revision><revnumber>26</revnumber><date>2013-10-24 17:57:37</date><authorinitials>AmosJeffries</authorinitials><revremark>update fiel #include guidelines to clarify what is now being enforced. remove section on 3.1 and older specific guideliens. new code for 3.1 is discouraged.</revremark></revision><revision><revnumber>25</revnumber><date>2013-04-04 17:35:59</date><authorinitials>AlexRousskov</authorinitials><revremark>Avoid mixing naming patterns with class layout section descriptions.</revremark></revision><revision><revnumber>24</revnumber><date>2013-04-04 17:30:17</date><authorinitials>AlexRousskov</authorinitials><revremark>Removed &quot;the&quot; prefix. A name should use either underscore suffix or &quot;the&quot; prefix, not both! For consistency, we should standardize on one approach and underscore wins, on most levels.</revremark></revision><revision><revnumber>23</revnumber><date>2013-03-30 04:41:36</date><authorinitials>AmosJeffries</authorinitials><revremark>make our word capitalization exampel match the naming guidelines</revremark></revision><revision><revnumber>22</revnumber><date>2013-03-30 04:34:23</date><authorinitials>AmosJeffries</authorinitials><revremark>polish the layout of the naming styles to clarify what the options are talking about</revremark></revision><revision><revnumber>21</revnumber><date>2012-08-28 13:44:11</date><authorinitials>AmosJeffries</authorinitials><revremark>we now enforce removal of multiple empty lines, and squid-old.h is gone, should not be used by new code anyway - so drop its mention.</revremark></revision><revision><revnumber>20</revnumber><date>2012-07-03 18:11:35</date><authorinitials>AlexRousskov</authorinitials><revremark>spellcheck</revremark></revision><revision><revnumber>19</revnumber><date>2012-07-03 17:49:37</date><authorinitials>AlexRousskov</authorinitials><revremark>clarified that local variable declaration does not need extra braces in a conditional; TODO: find the official term for &quot;conditional&quot;</revremark></revision><revision><revnumber>18</revnumber><date>2012-07-02 23:25:54</date><authorinitials>AmosJeffries</authorinitials><revremark>document () requirement and changes to squid.h requirements which were made a few months back.</revremark></revision><revision><revnumber>17</revnumber><date>2012-07-02 14:32:29</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added mention of preference to prefix increment/decrement</revremark></revision><revision><revnumber>16</revnumber><date>2011-03-03 13:59:15</date><authorinitials>AmosJeffries</authorinitials></revision><revision><revnumber>15</revnumber><date>2011-03-01 12:48:11</date><authorinitials>AmosJeffries</authorinitials><revremark>updates to match discussion outcomes regarding config.h and squid.h, link const-correctnes help site</revremark></revision><revision><revnumber>14</revnumber><date>2010-10-21 12:32:13</date><authorinitials>AmosJeffries</authorinitials><revremark>link-back to dev resources page.</revremark></revision><revision><revnumber>13</revnumber><date>2010-10-20 15:22:26</date><authorinitials>FrancescoChemolli</authorinitials><revremark>added link to configure-in-refactoring feature page</revremark></revision><revision><revnumber>12</revnumber><date>2010-10-19 23:56:41</date><authorinitials>AmosJeffries</authorinitials><revremark>menu alignment tweaks and note on C code.</revremark></revision><revision><revnumber>11</revnumber><date>2010-10-19 23:53:00</date><authorinitials>AmosJeffries</authorinitials><revremark>structure the page for a menu. add autoconf guidelines now that its been cleaned up</revremark></revision><revision><revnumber>10</revnumber><date>2009-11-16 10:46:37</date><authorinitials>AmosJeffries</authorinitials><revremark>update notes on format enforced C++ styles.</revremark></revision><revision><revnumber>9</revnumber><date>2009-11-16 10:35:27</date><authorinitials>AmosJeffries</authorinitials><revremark>Thanks to Henrik we now have consistent and enforced Makefile variables.</revremark></revision><revision><revnumber>8</revnumber><date>2009-09-03 06:27:40</date><authorinitials>AmosJeffries</authorinitials><revremark>polish some descriptions (no material changes)</revremark></revision><revision><revnumber>7</revnumber><date>2009-04-07 12:03:28</date><authorinitials>AmosJeffries</authorinitials><revremark>a bit more from testbed</revremark></revision><revision><revnumber>6</revnumber><date>2009-04-07 11:55:07</date><authorinitials>AmosJeffries</authorinitials><revremark>update with descisions made during SourceLayout, cleanup, astyle srcformat, and testbed construction</revremark></revision><revision><revnumber>5</revnumber><date>2008-09-19 22:23:47</date><authorinitials>AlexRousskov</authorinitials><revremark>polished grammar</revremark></revision><revision><revnumber>4</revnumber><date>2008-09-19 22:22:06</date><authorinitials>AlexRousskov</authorinitials><revremark>updated, polished, offered more choices where there is no consensus yet</revremark></revision><revision><revnumber>3</revnumber><date>2008-08-19 15:38:52</date><authorinitials>FrancescoChemolli</authorinitials><revremark>proposed extension to the suggested names for getters, setters, testers</revremark></revision><revision><revnumber>2</revnumber><date>2008-05-18 19:38:59</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>1</revnumber><date>2006-08-19 22:09:51</date><authorinitials>kinkie</authorinitials></revision></revhistory></articleinfo><itemizedlist><listitem><para><ulink url="http://www.parashift.com/c++-faq-lite/const-correctness.html#faq-18.5">const-correctness help</ulink> </para></listitem><listitem><para>Back to <ulink url="https://wiki.squid-cache.org/SquidCodingGuidelines/DeveloperResources#">DeveloperResources</ulink>. </para></listitem></itemizedlist><para>see also <!--The macro Navigation doesn't work with the DocBook formatter.--> </para><itemizedlist><listitem override="none"><para><inlinemediaobject><imageobject><imagedata depth="16" fileref="https://wiki.squid-cache.org/wiki/squidtheme/img/icon-info.png" width="16"/></imageobject><textobject><phrase>{i}</phrase></textobject></inlinemediaobject> details labeled ENFORCED are checked and forced by source testing mechanisms. </para></listitem></itemizedlist><section><title>C++ Guidelines</title><section><title>Source formatting guidelines</title><itemizedlist><listitem><para>We have an <emphasis>astyle</emphasis> wrapper that formats the code without breaking it. </para></listitem><listitem><para>If you have astyle version 3.1 please format your changes with ~/scripts/formater.pl </para></listitem><listitem><para>This formatter is run regularly over the entire code to enforce certain guidelines but it helps reduce trouble if your code matches those guidelines when submitted. </para></listitem></itemizedlist><para>ENFORCED: </para><itemizedlist><listitem><para>4-space indentation, no tabs </para></listitem><listitem><para>no trailing whitespace on <emphasis role="strong">any</emphasis> line </para></listitem><listitem><para>no sets of multiple empty lines. One is enough to separate things. </para></listitem><listitem><para>one space between <emphasis role="strong">if</emphasis> and its parameter <emphasis role="strong">()</emphasis> brackets </para></listitem><listitem><para>construct open braces <emphasis role="strong">{</emphasis> begin on the same line as their construct (if, while) </para></listitem><listitem><para>within a conditional, assignment must be surrounded with <emphasis role="strong">(</emphasis> braces: <code>if ((a = b))...</code></para><para>but a local variable declaration and initialization must not be: <code>if (T a = b)...</code>. </para></listitem></itemizedlist><para>NP: The formater is known to enforce some weird indentation at times. Notably after #if ... #endif directives. If you find these, please ignore for now. They will be corrected in a later version of the formater. </para></section><section><title>Mandatory coding rules</title><itemizedlist><listitem><para>Document, at least briefly, every new type, class, member, or global. Doxygen format is appreciated. </para></listitem><listitem><para>The Big Five (Three plus Two) </para><itemizedlist><listitem><para>Big Three: copy constructor, destructor, and assignment operator </para></listitem><listitem><para>Move methods: move constructor and move assignment operator </para><orderedlist numeration="arabic"><listitem><para>If the class works well without any of the Big3 methods, do not define any of the Big3 methods. </para></listitem><listitem><para>If you have to define one of Big3, declare all of Big3. </para></listitem><listitem><para>If class has a non-default destructor, you may decide to define one of the Move methods. If you define one Move method, declare the other Move method as well. </para></listitem><listitem><para>use <code>= default</code> declaration whenever possible if it is sufficient and <code>=delete</code> declaration when method is prohibited. </para></listitem></orderedlist></listitem></itemizedlist></listitem><listitem><para>Naming conventions as covered in <ulink url="https://wiki.squid-cache.org/SquidCodingGuidelines/Features/SourceLayout#">Features/SourceLayout</ulink> are to be used. </para></listitem></itemizedlist></section><section><title>Suggested coding rules</title><itemizedlist><listitem><para>Use internally consistent naming scheme (see below for choices). </para></listitem><listitem><para>Words in global names and all type names are <ulink url="https://wiki.squid-cache.org/SquidCodingGuidelines/CamelCase#">CamelCase</ulink> capitalized: </para><itemizedlist><listitem><para>including the first word. </para></listitem><listitem><para>acronyms are to be downcased to fit (ie Http) </para></listitem><listitem><para>This includes namespaces, class types, global variables, static class members, and macros. </para></listitem></itemizedlist></listitem><listitem><para>Use const qualifiers in declarations as much as appropriate. </para></listitem><listitem><para>Use bool for boolean types. </para></listitem><listitem><para>Avoid macros. </para></listitem><listitem><para>Do not start names with an underscore. </para></listitem><listitem><para>Do not end a member name with underscore. Unless the name collides with a method name. </para></listitem><listitem><para>Use prefix form for increment and decrement operators (i.e. <code>++c</code> instead of <code>c++</code>) </para></listitem><listitem><para>When a method is inherited and overloaded locally it should be grouped under a one-line comment naming the API where it comes from. </para></listitem></itemizedlist><section><title>Word capitalization example</title><screen><![CDATA[  namespace Foo // namespace name CamelCased
  {
]]><![CDATA[
  class ClassStats; // class type name CamelCased
]]><![CDATA[
  class ClassName
  {
  public:
    static ClassStats &Stats(); // static methods use CameCased
]]><![CDATA[
    void clear();
]]><![CDATA[
  private:
    static ClassStats Stats_; // static member CamelCased. Underscore since name collides with Stats() method
]]><![CDATA[
    int internalState;
  };
]]><![CDATA[
  extern void ReportUsage(ostream &); // global function CamelCased]]></screen></section></section><section><title>Class declaration layout</title><screen><![CDATA[  class Foo : public Bar
  {
    CBDATA_* or MEMPROXY_* special macro.
]]><![CDATA[
  public:
    all public typedef
]]><![CDATA[
    all constructors and operators
    Foo destructor (if any)
]]><![CDATA[
    /* Bar API */
    all methods overloaded from FooBar parent class
]]><![CDATA[
    all public static methods
    all public member methods
]]><![CDATA[
    all public static variables
    all public member variables
]]><![CDATA[
  protected:
    all protected static methods
    all protected member methods
]]><![CDATA[
    all protected static variables
    all protected member variables
]]><![CDATA[
  private:
    all private static methods
    all private member methods
]]><![CDATA[
    all private static variables
    all private member variables
  };]]></screen></section><section><title>Member naming</title><para>Pick one of the applicable styles described below and stick to it. For old classes, try to pick the style which is closer to the style being used. </para><orderedlist numeration="arabic"><listitem><para><emphasis role="strong">Accessors</emphasis> </para><itemizedlist><listitem override="none"><para>Explicit <emphasis role="strong">set</emphasis>, <emphasis role="strong">get</emphasis>, <emphasis role="strong">has</emphasis> : </para><itemizedlist><listitem override="none"><screen><![CDATA[      void setMember(const Member &);
      const Member &getMember() const; // may also return a copy
      Member &getMember();
      bool hasMember() const;]]></screen></listitem></itemizedlist></listitem><listitem override="none"><para><emphasis role="strong">OR</emphasis> Compact: </para><itemizedlist><listitem override="none"><screen><![CDATA[      void member(const Member &);
      const Member &member() const; // may also return a copy
      Member &member();
      bool hasMember() const;]]></screen></listitem></itemizedlist></listitem></itemizedlist></listitem><listitem><para><emphasis role="strong">Data members</emphasis> </para><itemizedlist><listitem><para>For public data members, do not use underscore suffix. Use verb prefixes for boolean members. </para><itemizedlist><listitem override="none"><screen><![CDATA[      int counter;
      int next;
      bool isClean;
      bool sawHeader;]]></screen></listitem></itemizedlist></listitem><listitem><para>For protected and private data members: May use underscore suffix to emphasize that the data member is not public and must use underscore suffix if the data member name would otherwise clash with a method name. Use verb prefixes for boolean members. </para><itemizedlist><listitem override="none"><screen><![CDATA[      int counter_;
      int next_;
      bool isClean_;
      bool sawHeader_;]]></screen></listitem></itemizedlist></listitem></itemizedlist></listitem><listitem><para><emphasis role="strong">State checks</emphasis> </para><itemizedlist><listitem><para>prefixed with an appropriate verb: <emphasis role="strong">is</emphasis>, <emphasis role="strong">has/have</emphasis>, <emphasis role="strong">can</emphasis>  </para><itemizedlist><listitem override="none"><screen><![CDATA[      bool canVerb() const;
      bool hasNoun() const;
      bool haveNoun() const; // if class name is plural
      bool isAdjective() const; // but see below]]></screen></listitem></itemizedlist></listitem><listitem><para><emphasis role="strong">Avoid</emphasis> negative words because double negation in if-statements will be confusing; let the caller negate when needed. </para><itemizedlist><listitem override="none"><screen><![CDATA[      bool notAdjective() const; // XXX: avoid due to !notAdjective()]]></screen></listitem></itemizedlist></listitem><listitem><para>The verb <emphasis role="strong">is</emphasis> may be omitted, especially if the result cannot be confused with a command (the confusion happens if the adjective after <emphasis>is</emphasis> can be interpreted as a verb): </para><itemizedlist><listitem override="none"><screen><![CDATA[      bool isAtEnd() const; // OK, but excessive
      bool atEnd() const; // OK, no confusion
]]><![CDATA[
      bool isFull() const;  // OK, but excessive
      bool full() const;  // OK, no confusion
]]><![CDATA[
      bool clear() const; // XXX: may look like a command to clear state
      bool empty() const; // XXX: may look like a "become empty" command]]></screen></listitem></itemizedlist></listitem></itemizedlist></listitem></orderedlist></section><section><title>File #include guidelines</title><orderedlist numeration="arabic"><listitem><para>minimal system includes </para></listitem><listitem><para>custom headers provided by Squid: </para><itemizedlist><listitem><para>place internal header includes above system includes </para></listitem><listitem><para>omit wrappers </para></listitem><listitem><para>always include with double-quotes (&quot;&quot;) </para></listitem><listitem><para>ENFORCED: sort alphabetically </para></listitem><listitem><para>use full path (only src/ prefix may be omitted) </para></listitem></itemizedlist></listitem><listitem><para>system C++ headers (without any extension suffix): </para><itemizedlist><listitem><para>always include with &lt;&gt; </para></listitem><listitem><para><emphasis role="strong">omit</emphasis> any HAVE_ wrapper </para></listitem><listitem><para>sort alphabetically </para></listitem><listitem><para>if the file is not portable, do not use it </para></listitem></itemizedlist></listitem><listitem><para>system C headers (with a .h suffix): </para><itemizedlist><listitem><para>always include with &lt;&gt; </para></listitem><listitem><para><emphasis role="strong">mandatory</emphasis> HAVE_FOO_H wrapper </para></listitem><listitem><para>avoid where C++ alternative is available </para></listitem><listitem><para>sort alphabetically </para><itemizedlist><listitem><para>should import order-dependent headers through libcompat </para></listitem></itemizedlist></listitem></itemizedlist></listitem></orderedlist><para>ENFORCED: </para><itemizedlist><listitem><para>sort internal includes alphabetically </para></listitem></itemizedlist><para><emphasis role="strong">.cc</emphasis> files only: </para><itemizedlist><listitem><para>include squid.h as their first include file. </para></listitem></itemizedlist><para><emphasis role="strong">.h</emphasis> and <emphasis role="strong">.cci</emphasis> files </para><itemizedlist><listitem><para>DO NOT include squid.h </para></listitem></itemizedlist><para>Layout Example: </para><screen><![CDATA[// local includes sorted alphabetically with squid.h first
#include "squid.h"
#include "comm/forward.h"
#include "local.h"
]]><![CDATA[
// system C++ includes alphabetically sorted and not-wrapped
#include <cstdlib>
#include <iostream>
]]><![CDATA[
// System C includes alphabetically sorted and wrapped
#if HAVE_ACCESS_H
#include <access.h>
#endif
#if HAVE_GETOPT_H
#include <getopt.h>
#endif]]></screen></section><section><title>Component Macros in C++</title><para>Squid uses autoconf defined macros to eliminate experimental or optional components at build time. </para><itemizedlist><listitem><para>name in C++ code should start with USE_ </para></listitem><listitem><para>test with #if and #if !  rather than #ifdef or #ifndef </para></listitem><listitem><para>should be wrapped around all code related solely to a component; including compiler directives and #include statements </para></listitem></itemizedlist><para>ENFORCED: </para><itemizedlist><listitem><para>MUST be used inside .h to wrap relevant code. </para></listitem></itemizedlist></section></section></article>