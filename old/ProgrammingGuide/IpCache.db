<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ProgrammingGuide/IpCache</title><revhistory><revision><revnumber>2</revnumber><date>2008-05-18 19:38:59</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>1</revnumber><date>2006-08-21 08:42:20</date><authorinitials>kinkie</authorinitials></revision></revhistory></articleinfo><section><title>IP Cache and FQDN Cache</title><section><title>Introduction</title><para>The IP cache is a built-in component of squid providing Hostname to IP-Number translation functionality and managing the involved data-structures. Efficiency concerns require mechanisms that allow non-blocking access to these mappings. The IP cache usually doesn't block on a request except for special cases where this is desired (see below). </para></section><section><title>Data Structures</title><para>The data structure used for storing name-address mappings is a small hashtable (<emphasis>static hash_table *ip_table</emphasis>), where structures of type <emphasis>ipcache_entry</emphasis> whose most interesting members are: </para><screen><![CDATA[struct _ipcache_entry {
        char *name;
        time_t lastref;
        ipcache_addrs addrs;
        struct _ip_pending *pending_head;
        char *error_message;
        unsigned char locks;
        ipcache_status_t status:3;
}]]></screen></section><section><title>External overview</title><para>Main functionality is provided through calls to: </para><itemizedlist><listitem><para><code>ipcache_nbgethostbyname(const char *name, IPH *handler, void *handlerdata)</code> </para><itemizedlist><listitem override="none"><para>where <emphasis>name</emphasis> is the name of the host to resolve, <emphasis>handler</emphasis> is a pointer to the function to be called when the reply from the IP cache (or the DNS if the IP cache misses) and <emphasis>handlerdata</emphasis> is information that is passed to the handler and does not affect the IP cache. </para></listitem></itemizedlist></listitem><listitem><para><code>ipcache_gethostbyname(const char *name,int flags)</code> </para><itemizedlist><listitem override="none"><para>is different in that it only checks if an entry exists in it's data-structures and does not by default contact the </para><para>DNS, unless this is requested, by setting the <emphasis>flags</emphasis> to <emphasis>IP_BLOCKING_LOOKUP</emphasis> or <emphasis>IP_LOOKUP_IF_MISS</emphasis>. </para></listitem></itemizedlist></listitem><listitem><para><code>ipcache_init()</code> </para><itemizedlist><listitem override="none"><para>is called from <emphasis>mainInitialize()</emphasis> after disk initialization and prior to the reverse fqdn cache initialization </para></listitem></itemizedlist></listitem><listitem><para><code>ipcache_restart()</code> </para><itemizedlist><listitem override="none"><para>is called to clear the IP cache's data structures, cancel all pending requests. </para><para>Currently, it is only called from <emphasis>mainReconfigure</emphasis>. </para></listitem></itemizedlist></listitem></itemizedlist></section><section><title>Internal Operation</title><para>Internally, the execution flow is as follows: On a miss, <emphasis>ipcache_getnbhostbyname</emphasis> checks whether a request for this name is already pending, and if positive, it creates a new entry using <emphasis>ipcacheAddNew</emphasis> with the <emphasis>IP_PENDING</emphasis> flag set . Then it calls <emphasis>ipcacheAddPending</emphasis> to add a request to the queue together with data and handler.  Else, <emphasis>ipcache_dnsDispatch()</emphasis> is called to directly create a DNS query or to <emphasis>ipcacheEnqueue()</emphasis> if all no DNS port is free.  <emphasis>ipcache_call_pending()</emphasis> is called regularly to walk down the pending list and call handlers. LRU clean-up is performed through <emphasis>ipcache_purgelru()</emphasis> according to the <emphasis>ipcache_high</emphasis> threshold. </para></section></section></article>