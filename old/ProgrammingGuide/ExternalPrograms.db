<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ProgrammingGuide/ExternalPrograms</title><revhistory><revision><revnumber>2</revnumber><date>2008-05-18 19:39:00</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>1</revnumber><date>2006-08-21 07:44:43</date><authorinitials>kinkie</authorinitials></revision></revhistory></articleinfo><section><title>External Programs</title><section><title>dnsserver</title><para>Because the standard <code>gethostbyname(3)</code> library call blocks, Squid must use external processes to actually make these calls.  Typically there will be ten <code>dnsserver</code> processes spawned from Squid.  Communication occurs via TCP sockets bound to the loopback interface.  The functions in <code>dns.c</code> are primarily concerned with starting and stopping the dnsservers.  Reading and writing to and from the dnsservers occurs in the IP and FQDN cache modules. </para></section><section><title>pinger</title><para>Although it would be possible for Squid to send and receive ICMP messages directly, we use an external process for two important reasons: </para><orderedlist numeration="arabic"><listitem><para>Because squid handles many filedescriptors simultaneously, we get much more accurate RTT measurements when ICMP is handled by a separate process. </para></listitem><listitem><para>Superuser privileges are required to send and receive ICMP.  Rather than require Squid to be started as root, we prefer to have the smaller and simpler <emphasis>pinger</emphasis> program installed with setuid permissions. </para></listitem></orderedlist></section><section><title>unlinkd</title><para>The <code>unlink(2)</code> system call can cause a process to block for a significant amount of time.  Therefore we do not want to make unlink() calls from Squid.  Instead we pass them to this external process. </para></section><section><title>redirector</title><para>A redirector process reads URLs on stdin and writes (possibly changed) URLs on stdout.  It is implemented as an external process to maximize flexibility. </para></section></section></article>