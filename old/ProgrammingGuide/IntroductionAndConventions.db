<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>ProgrammingGuide/IntroductionAndConventions</title><revhistory><revision><revnumber>2</revnumber><date>2008-05-18 19:38:55</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>1</revnumber><date>2006-08-21 07:40:25</date><authorinitials>kinkie</authorinitials></revision></revhistory></articleinfo><section><title>Introduction</title><para>The Squid source code has evolved more from empirical observation and tinkering, rather than a solid design process.  It carries a legacy of being &quot;touched&quot; by numerous individuals, each with somewhat different techniques and terminology. </para><para>Squid is a (mostly) single-process proxy server.  Every request is handled by the main process, with the exception of FTP.  However, Squid does not use a <emphasis>threads package</emphasis> such has Pthreads.  While this might be easier to code, it suffers from portability and performance problems.  Instead Squid maintains data structures and state information for each active request. </para><para>The code is often difficult to follow because there are no explicit state variables for the active requests.  Instead, thread execution progresses as a sequence of <emphasis>callback functions</emphasis> which get executed when I/O is ready to occur, or some other event has happened.  As a callback function completes, it is responsible for registering the next callback function for subsequent I/O. </para><para>Note there is only a pseudo-consistent naming scheme.  In most cases functions are named like <code>moduleFooBar()</code>.  However, there are also some functions named like <code>module_foo_bar()</code>. </para><para>Note that the Squid source changes rapidly, and some parts of this document may become out-of-date.  If you find any inconsistencies, please feel free to modify this document. </para></section><section><title>Conventions</title><para>Function names and file names will be written in a courier font, such as <code>store.c</code> and <code>storeRegister()</code>.  Data structures and their members will be written in an italicized font, such as <emphasis>StoreEntry</emphasis>. </para></section><section><title>Coding Conventions</title><section><title>Infrastructure</title><para>Most custom types and tools are documented in the code or the relevant portions of this manual. Some key points apply globally however. </para><section><title>Fixed width types</title><para>If you need to use specific width types - such as a 16 bit unsigned integer, use one of the following types. To access them simply include &quot;config.h&quot;. </para><itemizedlist><listitem><para>int16_t   - 16 bit signed. </para></listitem><listitem><para>u_int16_t - 16 bit unsigned. </para></listitem><listitem><para>int32t    - 32 bit signed. </para></listitem><listitem><para>u_int32_t - 32 bit unsigned. </para></listitem><listitem><para>int64_t   - 64 bit signed. </para></listitem><listitem><para>u_int64_t - 64 bit unsigned. </para></listitem></itemizedlist></section></section></section></article>