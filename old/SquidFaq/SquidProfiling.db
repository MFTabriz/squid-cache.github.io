<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>SquidFaq/SquidProfiling</title><revhistory><revision><revnumber>4</revnumber><date>2010-10-19 22:35:26</date><authorinitials>AmosJeffries</authorinitials><revremark>typo</revremark></revision><revision><revnumber>3</revnumber><date>2010-10-19 12:35:11</date><authorinitials>AmosJeffries</authorinitials><revremark>add list of load tools.</revremark></revision><revision><revnumber>2</revnumber><date>2008-05-18 19:39:00</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>1</revnumber><date>2007-01-30 10:23:49</date><authorinitials>AdrianChadd</authorinitials></revision></revhistory></articleinfo><section><title>Profiling Squid Servers</title><para>Is Squid running too slow? Would you like to investigate why and try to help us make Squid perform faster? Here's a few pointers. </para><section><title>What should I be looking at?</title><para>In short: everything. Disk IO, memory use, CPU use, network use. You need to get a handle on what your equipment is capable of and identify things that are out of whack. It doesn't take much practice to be able to do this, so don't worry too much! </para><section><title>CPU usage</title><para>Squid is a CPU-intensive application (since, after all, it spends all of its time processing incoming data and generating data to send.) But there's many different types of CPU usage which can identify what you're running out of. </para><itemizedlist><listitem><para>CPU spent in user-space: This is the CPU time spent by the Squid process itself. </para></listitem><listitem><para>CPU spent in kernel-space: This could be anything kernel-related, but generally reflects non-device kernel processing. So stuff like queueing/dequeueing disk and network IO, filesystem processing and some network layer processing. </para></listitem><listitem><para>CPU spent in interrupt-space: This is generally CPU spent dealing with physical devices - Disk and Network. You should generally spend very little time in interrupt space with well-programmed device drivers and well-behaving hardware. Things, however, aren't always well-behaved. </para></listitem><listitem><para>CPU spent in &quot;IOWAIT&quot; - somewhat of a Linux-ism as far as I'm aware, this reflects the amount of time the CPU is spending waiting for IO to complete. This is generally because your device(s) require more attention than they should need to complete stuff. </para></listitem></itemizedlist></section><section><title>Resource usage</title><para>The commonly available UNIX tools &quot;vmstat&quot; and &quot;iostat&quot; let you scratch the surface of your current server resource usage. &quot;vmstat&quot; will generally display information pertaining to memory usage, CPU usage, device interrupts, disk IO (in and out) and the amount of system paging going on. &quot;iostat&quot; lets you drill down into the IO operations scheduled on each physical disk. </para><para>I generally run them as &quot;vmstat 1&quot; and &quot;iostat 1&quot;, keeping an eye on things. You should also consider setting up graphing to track various resource variables and watch usage trends. </para></section><section><title>What sort of things impact the performance of my Squid ?</title><para>Squid will start suffering if you run out of any of your server resources. There's a few things that frequently occur: </para><itemizedlist><listitem><para>You just plain run out of CPU. This is where all of your resources are low save your kernel and user CPU usage. This may be because you're still using poll() or select() for your network IO which just don't scale under modern loads. </para></listitem><listitem><para>Some crappy hardware (such as slow IDE disks and really cheap network cards) aren't that great at shoveling data around and require a lot of hand-holding by the CPU. If you see your interrupt/IOWAIT times up then it might be due to your hardware choices. I've seen this sort of thing happen with desktop-grade hardware pretending to be a server - eg the Sun &quot;Desktop&quot; hardware running Linux and using SATA disks. Lots of disk IO == Lots of time spent in IOWAIT. </para></listitem><listitem><para>Some hardware allows you to &quot;tune&quot; how much overhead it imposes on the system. Gigabit network cards are a good example of this. You trade off a few ms of latency versus a high interrupt load, but this doesn't matter on a server which is constantly handling packets. Take a look at your hardware documentation and see whats available. </para></listitem><listitem><para>Linux servers spending a lot of time in IOWAIT can also be because you're overloading your disks with IO. See what your disk IO looks like in vmstat. You could look at moving to the aufs/diskd <ulink url="http://www.squid-cache.org/Doc/config/cache_dir#">cache_dir</ulink> if you're using UFS. COSS also can drastically drop IOWAIT times under heavy disk loads. </para></listitem><listitem><para>You're swapping! This happens quite often when people wind up <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> and don't watch how much RAM Squid is actually using. Watch the output of &quot;vmstat&quot; and see how much free memory is available. If you see your server paging memory in and out of disk then you're in trouble. Either decrease <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> or add more physical RAM. </para></listitem></itemizedlist></section><section><title>How can I see what Squid is actually doing?</title><para>(ie, how do I profile Squid?) </para><para>The best thing you can do to identify where all your CPU usage is going is to use a process or system profiler. Personally, I use oprofile. gprof isn't at all accurate with modern CPU clockspeeds. There's other options - hwpmc under FreeBSD, for example, can do somewhat what oprofile can but it currently has trouble getting any samples from Squid in userspace. Grr. &quot;perfmon&quot; is also an option if you don't have root access on the server. </para><para>OProfile under Linux is easy to use and has quite a low overhead. </para><para>Here's how I use oprofile: </para><itemizedlist><listitem><para>Install oprofile </para></listitem><listitem><para>Check whats available - <emphasis>opcontrol -l</emphasis> </para></listitem><listitem><para>If you see a single line regarding &quot;timer interrupt mode&quot;, you're stuffed. Go read the OProfile FAQ and see if you can enable ACPI. You won't get any meaningful results out of OProfile in timer interrupt mode. </para></listitem><listitem><para>Set it up - <emphasis>opcontrol --setup -c 4 -p library,kernel --no-vmlinux</emphasis> (if you have a vmlinux image, read the opcontrol manpage for instructions on telling opcontrol where its hiding.) </para></listitem><listitem><para>Start it up - <emphasis>opcontrol --start</emphasis> </para></listitem><listitem><para>Wait a few minutes - a busy squid server will quickly generate a lot of profiling information! </para></listitem><listitem><para>Then use <emphasis>opreport -l /path/to/squid/binary</emphasis> to grab out information on Squid CPU use. </para></listitem></itemizedlist><para>Just remember: </para><itemizedlist><listitem><para>Make sure you've got the debugging libraries and library symbols installed - under Ubuntu thats 'libc6-dbg'. </para></listitem><listitem><para>Don't try using it under timer interrupt mode, it'll suffer similar accuracy issues to gprof and other timer-based profilers. </para></listitem></itemizedlist></section></section></section><section><title>Load Testing Tools</title><para>It's also useful to profile the connection and request limits. Here are some tools for testing behaviour at various request and connection loads. </para><itemizedlist><listitem><para><ulink url="http://www.web-polygraph.org/">WebPolygraph</ulink> </para></listitem><listitem><para><ulink url="http://httpd.apache.org/docs/current/programs/ab.html">ApacheBench</ulink> </para></listitem><listitem><para><ulink url="http://sourceforge.net/projects/spizd/">SPIZD</ulink> </para></listitem></itemizedlist></section></article>