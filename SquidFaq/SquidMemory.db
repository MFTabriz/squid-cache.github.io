<?xml version="1.0" encoding="utf-8"?><!DOCTYPE article  PUBLIC '-//OASIS//DTD DocBook XML V4.4//EN'  'http://www.docbook.org/xml/4.4/docbookx.dtd'><article><articleinfo><title>SquidFaq/SquidMemory</title><revhistory><revision><revnumber>17</revnumber><date>2018-02-09 12:54:43</date><authorinitials>AmosJeffries</authorinitials><revremark>remove dlmalloc FQA and add one about 'cached Memory' being large.</revremark></revision><revision><revnumber>16</revnumber><date>2016-06-15 10:11:22</date><authorinitials>Marcus Kool</authorinitials><revremark>added a note about Operating System memory usage</revremark></revision><revision><revnumber>15</revnumber><date>2013-11-24 22:01:14</date><authorinitials>NathanHoad</authorinitials><revremark>Fix a typo</revremark></revision><revision><revnumber>14</revnumber><date>2013-03-21 12:08:22</date><authorinitials>AmosJeffries</authorinitials><revremark>wiki-link config directives and document</revremark></revision><revision><revnumber>13</revnumber><date>2010-07-28 16:53:05</date><authorinitials>Marcus Kool</authorinitials></revision><revision><revnumber>12</revnumber><date>2010-02-19 13:12:35</date><authorinitials>FrancescoChemolli</authorinitials><revremark>fixed link</revremark></revision><revision><revnumber>11</revnumber><date>2009-10-05 21:06:24</date><authorinitials>Henrik Nordström</authorinitials></revision><revision><revnumber>10</revnumber><date>2009-10-05 20:16:04</date><authorinitials>Henrik Nordström</authorinitials><revremark>Clarify large/small pointer architectures by simply using 32/64-bit instead.</revremark></revision><revision><revnumber>9</revnumber><date>2008-05-18 19:38:56</date><authorinitials>localhost</authorinitials><revremark>converted to 1.6 markup</revremark></revision><revision><revnumber>8</revnumber><date>2006-09-13 07:04:53</date><authorinitials>kinkie</authorinitials><revremark>Small language fixups.</revremark></revision><revision><revnumber>7</revnumber><date>2006-09-13 00:18:55</date><authorinitials>AdrianChadd</authorinitials></revision><revision><revnumber>6</revnumber><date>2006-08-29 10:13:11</date><authorinitials>kinkie</authorinitials><revremark>Smallish syntax fixes, fixed anchors</revremark></revision><revision><revnumber>5</revnumber><date>2006-03-03 09:23:24</date><authorinitials>kinkie</authorinitials></revision><revision><revnumber>4</revnumber><date>2006-02-10 13:13:04</date><authorinitials>kinkie</authorinitials><revremark>Fixed link</revremark></revision><revision><revnumber>3</revnumber><date>2006-02-10 13:08:45</date><authorinitials>kinkie</authorinitials><revremark>Markup fix</revremark></revision><revision><revnumber>2</revnumber><date>2006-02-07 23:04:15</date><authorinitials>kinkie</authorinitials><revremark>Markup Fixes, added link to index, removed reference to NOVM (obsolete version)</revremark></revision><revision><revnumber>1</revnumber><date>2006-01-24 21:44:53</date><authorinitials>kinkie</authorinitials></revision></revhistory></articleinfo><section><title>Why does Squid use so much memory!?</title><para>Squid uses a lot of memory for performance reasons.  It takes much, much longer to read something from disk than it does to read directly from memory. </para><para>A small amount of metadata for each cached object is kept in memory. This is the <emphasis>StoreEntry</emphasis> data structure.  This is 56-bytes on 32-bit architectures and 88-bytes on 64-bit architectures.  In addition, there is a 16-byte cache key (MD5 checksum) associated with each <emphasis>StoreEntry</emphasis>.  This means there are 72 or 104 bytes of metadata in memory for every object in your cache.  A cache with 1,000,000 objects therefore requires 72MB of memory for <emphasis>metadata only</emphasis>. In practice it requires much more than that. </para><para>Uses of memory by Squid include: </para><informaltable><tgroup cols="3"><colspec colname="col_0"/><colspec colname="col_1"/><colspec colname="col_2"/><tbody><row rowsep="1"><entry colsep="1" rowsep="1"><para> reason  </para></entry><entry colsep="1" rowsep="1"><para> parameter  </para></entry><entry colsep="1" rowsep="1"><para> explanation </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> Disk buffers for reading and writing </para></entry><entry colsep="1" rowsep="1"><para> - </para></entry><entry colsep="1" rowsep="1"><para> - </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> Network I/O buffers </para></entry><entry colsep="1" rowsep="1"><para> <ulink url="http://www.squid-cache.org/Doc/config/read_ahead_gap#">read_ahead_gap</ulink> * </para></entry><entry colsep="1" rowsep="1"><para> D </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> IP Cache contents </para></entry><entry colsep="1" rowsep="1"><para> <ulink url="http://www.squid-cache.org/Doc/config/ipcache_size#">ipcache_size</ulink> </para></entry><entry colsep="1" rowsep="1"><para> DNS </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> FQDN Cache contents </para></entry><entry colsep="1" rowsep="1"><para> <ulink url="http://www.squid-cache.org/Doc/config/fqdncache_size#">fqdncache_size</ulink> </para></entry><entry colsep="1" rowsep="1"><para> DNS </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> Netdb ICMP measurement database </para></entry><entry colsep="1" rowsep="1"><para> - </para></entry><entry colsep="1" rowsep="1"><para> N </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> Per-request state information, including full request and reply headers </para></entry><entry colsep="1" rowsep="1"><para> - </para></entry><entry colsep="1" rowsep="1"><para> D </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> Miscellaneous statistics collection </para></entry><entry colsep="1" rowsep="1"><para> - </para></entry><entry colsep="1" rowsep="1"><para> D </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> Index of on-disk cache (metadata, kept in memory) </para></entry><entry colsep="1" rowsep="1"><para> <ulink url="http://www.squid-cache.org/Doc/config/cache_dir#">cache_dir</ulink> </para></entry><entry colsep="1" rowsep="1"><para> I </para></entry></row><row rowsep="1"><entry colsep="1" rowsep="1"><para> In-memory cache with &quot;hot objects&quot; </para></entry><entry colsep="1" rowsep="1"><para> <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> </para></entry><entry colsep="1" rowsep="1"><para> M+I </para></entry></row></tbody></tgroup></informaltable><para>Explanation of letters: </para><informaltable><tgroup cols="2"><colspec colname="col_0"/><colspec colname="col_1"/><tbody><row rowsep="1"><entry align="center" colsep="1" rowsep="1"><para> . </para></entry><entry colsep="1" rowsep="1"><para> explanation </para></entry></row><row rowsep="1"><entry align="center" colsep="1" rowsep="1"><para> D </para></entry><entry colsep="1" rowsep="1"><para> dynamic; more memory is used if more users visit more websites </para></entry></row><row rowsep="1"><entry align="center" colsep="1" rowsep="1"><para> I </para></entry><entry colsep="1" rowsep="1"><para> 10 MB of memory per 1 GB on disk for 32-bit Squid</para><para>14 MB of memory per 1 GB on disk for 64-bit Squid </para></entry></row><row rowsep="1"><entry align="center" colsep="1" rowsep="1"><para> N </para></entry><entry colsep="1" rowsep="1"><para> not used often </para></entry></row><row rowsep="1"><entry align="center" colsep="1" rowsep="1"><para> M </para></entry><entry colsep="1" rowsep="1"><para> rule of thumb: cache_mem is usually one third of the total memory consumption. </para><para>On top of the value configured there is also memory used by the index of these objects (see 'I'). </para></entry></row><row rowsep="1"><entry align="center" colsep="1" rowsep="1"><para> DNS </para></entry><entry colsep="1" rowsep="1"><para> not recommended to change.  Only increase for very large caches or if there is a slow DNS server </para></entry></row></tbody></tgroup></informaltable><itemizedlist><listitem><para><ulink url="http://www.squid-cache.org/Doc/config/read_ahead_gap#">read_ahead_gap</ulink> only caps the window of data read from a server and not yet delivered to the client. There are at least two buffers (client-to-server and server-to-client directions) and an additional one for each ICAP service the current transaction is going through. </para></listitem></itemizedlist><para>There is also memory used indirectly: the Operating System has buffers for TCP connections and file system I/O. </para></section><section><title>How can I tell how much memory my Squid process is using?</title><para>One way is to simply look at <emphasis>ps</emphasis> output on your system. For BSD-ish systems, you probably want to use the <emphasis>-u</emphasis> option and look at the <emphasis>VSZ</emphasis> and <emphasis>RSS</emphasis> fields: </para><screen><![CDATA[wessels ~ 236% ps -axuhm
USER       PID %CPU %MEM   VSZ  RSS     TT  STAT STARTED       TIME COMMAND
squid     9631  4.6 26.4 141204 137852  ??  S    10:13PM   78:22.80 squid -NCYs]]></screen><para>For SYSV-ish, you probably want to use the <emphasis>-l</emphasis> option. When interpreting the <emphasis>ps</emphasis> output, be sure to check your <emphasis>ps</emphasis> manual page.  It may not be obvious if the reported numbers are kbytes, or pages (usually 4 kb). </para><para>A nicer way to check the memory usage is with a program called <emphasis>top</emphasis>: </para><screen><![CDATA[last pid: 20128;  load averages:  0.06,  0.12,  0.11                   14:10:58
46 processes:  1 running, 45 sleeping
CPU states:     % user,     % nice,     % system,     % interrupt,     % idle
Mem: 187M Active, 1884K Inact, 45M Wired, 268M Cache, 8351K Buf, 1296K Free
Swap: 1024M Total, 256K Used, 1024M Free
]]><![CDATA[
  PID USERNAME PRI NICE SIZE    RES STATE    TIME   WCPU    CPU COMMAND
 9631 squid     2   0   138M   135M select  78:45  3.93%  3.93% squid]]></screen><para>Finally, you can ask the Squid process to report its own memory usage.  This is available on the Cache Manager <emphasis>info</emphasis> page. Your output may vary depending upon your operating system and Squid version, but it looks similar to this: </para><screen><![CDATA[Resource usage for squid:
Maximum Resident Size: 137892 KB
Memory usage for squid via mstats():
Total space in arena:  140144 KB
Total free:              8153 KB 6%]]></screen><para>If your RSS (Resident Set Size) value is much lower than your process size, then your cache performance is most likely suffering due to Paging. See also <ulink url="https://wiki.squid-cache.org/SquidFaq/SquidMemory/SquidFaq/CacheManager#">../CacheManager</ulink> </para></section><section><title>Why does Squid use so much cache memory?</title><para>It can appear that a machine running Squid is using a huge amount of memory &quot;cached Mem&quot; </para><screen><![CDATA[ KiB Mem:   4037016 total,  3729152 used,   307864 free,   120508 buffers
 KiB Swap:  8511484 total,        0 used,  8511484 free.  2213580 cached Mem]]></screen><para>This is normal behaviour in Linux - everything that's once read from disk is cached in RAM, as long as there is free memory. If the RAM is needed in another way, the cache in memory will be reduced. See also <ulink url="https://www.linuxatemyram.com/"/> </para><para>Machines running Squid can show unusual amounts of this disk I/O caching happening because Squid caches contain a lot of files and access them randomly. </para></section><section><title>My Squid process grows without bounds.</title><para>You might just have your <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> parameter set too high.  See <emphasis>What can I do to reduce Squid's memory usage?</emphasis> below. </para><para>When a process continually grows in size, without levelling off or slowing down, it often indicates a memory leak.  A memory leak is when some chunk of memory is used, but not free'd when it is done being used. </para><para>Memory leaks are a real problem for programs (like Squid) which do all of their processing within a single process.  Historically, Squid has had real memory leak problems.  But as the software has matured, we believe almost all of Squid's memory leaks have been eliminated, and new ones are least easy to identify. </para><para>Memory leaks may also be present in your system's libraries, such as <emphasis>libc.a</emphasis> or even <emphasis>libmalloc.a</emphasis>.  If you experience the ever-growing process size phenomenon, we suggest you first try <link linkend="alternate-malloc">#alternate-malloc</link>. </para></section><section><title>I set cache_mem to XX, but the process grows beyond that!</title><para>The <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> parameter <emphasis role="strong">does NOT</emphasis> specify the maximum size of the process.  It only specifies how much memory to use for caching &quot;hot&quot; (very popular) replies.   Squid's actual memory usage is depends very strongly on your <ulink url="http://www.squid-cache.org/Doc/config/cache_dir#">cache_dir</ulink> sizes (disk space) and your incoming request load.  Reducing <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> will usually also reduce the process size, but not necessarily, and there are other ways to reduce Squid's memory usage (see below). </para><para>See also <link linkend="how-much-ram">How much memory do I need in my Squid server?</link>. </para></section><section><title>How do I analyze memory usage from the cache manager output?</title><para><emphasis>Note: This information is specific to Squid-1.1 versions</emphasis> </para><para>Look at your <emphasis>cachemgr.cgi</emphasis> <emphasis>Cache Information</emphasis> page.  For example: </para><screen><![CDATA[Memory usage for squid via mallinfo():
       Total space in arena:   94687 KB
       Ordinary blocks:        32019 KB 210034 blks
       Small blocks:           44364 KB 569500 blks
       Holding blocks:             0 KB   5695 blks
       Free Small blocks:       6650 KB
       Free Ordinary blocks:   11652 KB
       Total in use:           76384 KB 81%
       Total free:             18302 KB 19%
]]><![CDATA[
Meta Data:
StoreEntry                246043 x 64 bytes =  15377 KB
IPCacheEntry              971 x   88 bytes  =     83 KB
Hash link                 2 x   24 bytes    =      0 KB
URL strings                                 =  11422 KB
Pool MemObject structures 514 x  144 bytes  =     72 KB (    70 free)
Pool for Request structur 516 x 4380 bytes  =   2207 KB (  2121 free)
Pool for in-memory object 6200 x 4096 bytes =  24800 KB ( 22888 free)
Pool for disk I/O         242 x 8192 bytes =   1936 KB (  1888 free)
Miscellaneous                              =   2600 KB
total Accounted                            =  58499 KB]]></screen><para>First note that <emphasis>mallinfo()</emphasis> reports 94M in &quot;arena.&quot;  This is pretty close to what <emphasis>top</emphasis> says (97M). </para><para>Of that 94M, 81% (76M) is actually being used at the moment.  The rest has been freed, or pre-allocated by <emphasis>malloc(3)</emphasis> and not yet used. </para><para>Of the 76M in use, we can account for 58.5M (76%).  There are some calls to <emphasis>malloc(3)</emphasis> for which we can't account. </para><para>The <emphasis>Meta Data</emphasis> list gives the breakdown of where the accounted memory has gone.  45% has gone to <emphasis>StoreEntry</emphasis> and URL strings.  Another 42% has gone to buffering hold objects in VM while they are fetched and relayed to the clients (<emphasis>Pool for in-memory object</emphasis>). </para><para>The pool sizes are specified by <emphasis>squid.conf</emphasis> parameters. In version 1.0, these pools are somewhat broken:  we keep a stack of unused pages instead of freeing the block.  In the <emphasis>Pool for in-memory object</emphasis>, the unused stack size is 1/2 of <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink>.  The <emphasis>Pool for disk I/O</emphasis> is hardcoded at 200.  For <emphasis>MemObject</emphasis> and <emphasis>Request</emphasis> it's 1/8 of your system's <emphasis>FD_SETSIZE</emphasis> value. </para><para>If you need to lower your process size, we recommend lowering the max object sizes in the 'http', 'ftp' and 'gopher' config lines. You may also want to lower <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> to suit your needs. But if you make <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> too low, then some objects may not get saved to disk during high-load periods.  Newer Squid versions allow you to set <ulink url="http://www.squid-cache.org/Doc/config/memory_pools#">memory_pools</ulink> OFF to disable the free memory pools. </para></section><section><title>The &quot;Total memory accounted&quot; value is less than the size of my Squid process.</title><para>We are not able to account for <emphasis role="strong">all</emphasis> memory that Squid uses.  This would require excessive amounts of code to keep track of every last byte. We do our best to account for the major uses of memory. </para><para>Also, note that the <emphasis>malloc</emphasis> and <emphasis>free</emphasis> functions have their own overhead.  Some additional memory is required to keep track of which chunks are in use, and which are free.  Additionally, most operating systems do not allow processes to shrink in size. When a process gives up memory by calling <emphasis>free</emphasis>, the total process size does not shrink.  So the process size really represents the maximum size your Squid process has reached. </para></section><section><title>xmalloc: Unable to allocate 4096 bytes!</title><para>by <ulink url="https://wiki.squid-cache.org/SquidFaq/SquidMemory/HenrikNordstr%C3%B6m#">HenrikNordström</ulink> </para><para>Messages like &quot;FATAL: xcalloc: Unable to allocate 4096 blocks of 1 bytes!&quot; appear when Squid can't allocate more memory, and on most operating systems (inclusive BSD) there are only two possible reasons: </para><itemizedlist><listitem><para>The machine is out of swap </para></listitem><listitem><para>The process' maximum data segment size has been reached </para></listitem></itemizedlist><para>The first case is detected using the normal swap monitoring tools available on the platform (<emphasis>pstat</emphasis> on SunOS, perhaps <emphasis>pstat</emphasis> is used on BSD as well). </para><para>To tell if it is the second case, first rule out the first case and then monitor the size of the Squid process. If it dies at a certain size with plenty of swap left then the max data segment size is reached without no doubts. </para><para>The data segment size can be limited by two factors: </para><itemizedlist><listitem><para>Kernel imposed maximum, which no user can go above </para></listitem><listitem><para>The size set with ulimit, which the user can control. </para></listitem></itemizedlist><para>When squid starts it sets data and file ulimit's to the hard level. If you manually tune ulimit before starting Squid make sure that you set the hard limit and not only the soft limit (the default operation of ulimit is to only change the soft limit). root is allowed to raise the soft limit above the hard limit. </para><para>This command prints the hard limits: </para><screen><![CDATA[ulimit -aH]]></screen><para>This command sets the data size to unlimited: </para><screen><![CDATA[ulimit -HSd unlimited]]></screen><para><emphasis role="strong">BSD/OS</emphasis> </para><para>by <emphasis>Arjan de Vet</emphasis> </para><para>The default kernel limit on BSD/OS for datasize is 64MB (at least on 3.0 which I'm using). </para><para>Recompile a kernel with larger datasize settings: </para><screen><![CDATA[maxusers        128
# Support for large inpcb hash tables, e.g. busy WEB servers.
options         INET_SERVER
# support for large routing tables, e.g. gated with full Internet routing:
options         "KMEMSIZE=\(16*1024*1024\)"
options         "DFLDSIZ=\(128*1024*1024\)"
options         "DFLSSIZ=\(8*1024*1024\)"
options         "SOMAXCONN=128"
options         "MAXDSIZ=\(256*1024*1024\)"]]></screen><para>See <emphasis>/usr/share/doc/bsdi/config.n</emphasis> for more info. </para><para>In /etc/login.conf I have this: </para><screen><![CDATA[default:\
        :path=/bin /usr/bin /usr/contrib/bin:\
        :datasize-cur=256M:\
        :openfiles-cur=1024:\
        :openfiles-max=1024:\
        :maxproc-cur=1024:\
        :stacksize-cur=64M:\
        :radius-challenge-styles=activ,crypto,skey,snk,token:\
        :tc=auth-bsdi-defaults:\
        :tc=auth-ftp-bsdi-defaults:
]]><![CDATA[
#
# Settings used by /etc/rc and root
# This must be set properly for daemons started as root by inetd as well.
# Be sure reset these values back to system defaults in the default class!
#
daemon:\
        :path=/bin /usr/bin /sbin /usr/sbin:\
        :widepasswords:\
        :tc=default:
#       :datasize-cur=128M:\
#       :openfiles-cur=256:\
#       :maxproc-cur=256:\]]></screen><para>This should give enough space for a 256MB squid process. </para><para><emphasis role="strong">FreeBSD (2.2.X)</emphasis> </para><para>by [wessels Duane Wessels] </para><para>The procedure is almost identical to that for BSD/OS above. Increase the open filedescriptor limit in <emphasis>/sys/conf/param.c</emphasis>: </para><screen><![CDATA[int     maxfiles = 4096;
int     maxfilesperproc = 1024;]]></screen><para>Increase the maximum and default data segment size in your kernel config file, e.g. <emphasis>/sys/conf/i386/CONFIG</emphasis>: </para><screen><![CDATA[options         "MAXDSIZ=(512*1024*1024)"
options         "DFLDSIZ=(128*1024*1024)"]]></screen><para>We also found it necessary to increase the number of mbuf clusters: </para><screen><![CDATA[options         "NMBCLUSTERS=10240"]]></screen><para>And, if you have more than 256 MB of physical memory, you probably have to disable BOUNCE_BUFFERS (whatever that is), so comment out this line: </para><screen><![CDATA[#options        BOUNCE_BUFFERS          #include support for DMA bounce buffers]]></screen><para>Also, update limits in <emphasis>/etc/login.conf</emphasis>: </para><screen><![CDATA[# Settings used by /etc/rc
#
daemon:\
        :coredumpsize=infinity:\
        :datasize=infinity:\
        :maxproc=256:\
        :maxproc-cur@:\
        :memoryuse-cur=64M:\
        :memorylocked-cur=64M:\
        :openfiles=4096:\
        :openfiles-cur@:\
        :stacksize=64M:\
        :tc=default:]]></screen><para>And don't forget to run &quot;cap_mkdb /etc/login.conf&quot; after editing that file. </para><para><emphasis role="strong">OSF, Digital Unix</emphasis> </para><para>by <emphasis>Ong Beng Hui</emphasis> </para><para>To increase the data size for Digital UNIX, edit the file <emphasis>/etc/sysconfigtab</emphasis> and add the entry... </para><screen><![CDATA[proc:
        per-proc-data-size=1073741824]]></screen><para>Or, with csh, use the limit command, such as </para><screen><![CDATA[> limit datasize 1024M]]></screen><para>Editing <emphasis>/etc/sysconfigtab</emphasis> requires a reboot, but the limit command doesn't. </para></section><section><title>fork: (12) Cannot allocate memory</title><para>When Squid is reconfigured (SIGHUP) or the logs are rotated (SIGUSR1), some of the helper processes (dnsserver) must be killed and restarted.  If your system does not have enough virtual memory, the Squid process may not be able to fork to start the new helper processes. This is due to the UNIX way of starting child processes using the fork() system call which temporary duplicates the whole Squid process, and when rapidly starting many child processes such as on &quot;squid -k rotate&quot; the memory usage can temporarily grow to many times the normal memory usage due to several temporary copies of the whole process. </para><para>The best way to fix this is to increase your virtual memory by adding swap space.  Normally your system uses raw disk partitions for swap space, but most operating systems also support swapping on regular files (Digital Unix excepted).  See your system manual pages for <emphasis>swap</emphasis>, <emphasis>swapon</emphasis>, and <emphasis>mkfile</emphasis>. Alternatively you can use the sleep_after_fork directive to make Squid sleep a little while invoking helpers to allow the helper to start up before trying to start the next one. This can be helpful if you find that Squid sometimes fail to restart all helpers on &quot;squid -k reconfigure&quot;. </para></section><section><title>What can I do to reduce Squid's memory usage?</title><para>If your cache performance is suffering because of memory limitations, you might consider buying more memory.  But if that is not an option, There are a number of things to try: </para><itemizedlist><listitem><para>Try a different malloc library (see below) </para></listitem><listitem><para>Reduce the <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> parameter in the config file.  This controls how many &quot;hot&quot; objects are kept in memory.  Reducing this parameter will not significantly affect performance, but you may recieve some warnings in <emphasis>cache.log</emphasis> if your cache is busy. </para></listitem><listitem><para>Turn the <ulink url="http://www.squid-cache.org/Doc/config/memory_pools#">memory_pools</ulink> OFF in the config file.  This causes Squid to give up unused memory by calling <emphasis>free()</emphasis> instead of holding on to the chunk for potential, future use. Generally speaking, this is a bad idea as it will induce heap fragmentation. Use  <ulink url="http://www.squid-cache.org/Doc/config/memory_pools_limit#">memory_pools_limit</ulink> instead. </para></listitem><listitem><para>Reduce the <ulink url="http://www.squid-cache.org/Doc/config/cache_swap_low#">cache_swap_low</ulink> or <ulink url="http://www.squid-cache.org/Doc/config/cache_dir#">cache_dir</ulink> parameter in your config file.  This will reduce the number of objects Squid keeps.  Your overall hit ratio may go down a little, but your cache will perform significantly better. </para></listitem></itemizedlist><para><anchor id="alternate-malloc"/> </para></section><section><title>Using an alternate malloc library</title><para>Many users have found improved performance and memory utilization when linking Squid with an external malloc library.  We recommend either GNU malloc, or dlmalloc. </para><section><title>GNU malloc</title><para>To make Squid use GNU malloc follow these simple steps: </para><itemizedlist><listitem><para>Download the GNU malloc source, available from one of <ulink url="http://www.gnu.org/order/ftp.html">The GNU mirrors</ulink>. </para></listitem><listitem><para>Compile it </para></listitem></itemizedlist><screen><![CDATA[% gzip -dc malloc.tar.gz | tar xf -
% cd malloc
% vi Makefile     # edit as needed
% make]]></screen><itemizedlist><listitem><para>Copy libmalloc.a to your system's library directory and be sure to name it <emphasis>libgnumalloc.a</emphasis>. </para></listitem></itemizedlist><screen><![CDATA[% su
# cp malloc.a /usr/lib/libgnumalloc.a]]></screen><itemizedlist><listitem><para>(Optional) Copy the GNU malloc.h to your system's include directory and be sure to name it <emphasis>gnumalloc.h</emphasis>.  This step is not required, but if you do this, then Squid will be able to use the <emphasis>mstat()</emphasis> function to report memory usage statistics on the cachemgr info page. </para></listitem></itemizedlist><screen><![CDATA[# cp malloc.h /usr/include/gnumalloc.h]]></screen><itemizedlist><listitem><para>Reconfigure and recompile Squid </para></listitem></itemizedlist><screen><![CDATA[% make distclean
% ./configure ...
% make
% make install]]></screen><para>As Squid's configure script runs, watch its output.  You should find that it locates libgnumalloc.a and optionally gnumalloc.h. </para><para><anchor id="how-much-ram"/> </para></section></section><section><title>How much memory do I need in my Squid server?</title><para>As a rule of thumb on Squid uses approximately 10 MB of RAM per GB of the total of all cache_dirs (more on 64 bit servers such as Alpha), plus your cache_mem setting and about an additional 10-20MB. It is recommended to have at least twice this amount of physical RAM available on your Squid server. For a more detailed discussion on Squid's memory usage see the sections above. </para><para>The recommended extra RAM besides what is used by Squid is used by the operating system to improve disk I/O performance and by other applications or services running on the server. This will be true even of a server which runs Squid as the only tcp service, since there is a minimum level of memory needed for process management, logging, and other OS level routines. </para><para>If you have a low memory server, and a large disk, then you will not necessarily be able to use all the disk space, since as the cache fills the memory available will be insufficient, forcing Squid to swap out memory and affecting performance. A very large cache_dir total and insufficient physical RAM + Swap could cause Squid to stop functioning completely. The solution for larger caches is to get more physical RAM; allocating more to Squid via <ulink url="http://www.squid-cache.org/Doc/config/cache_mem#">cache_mem</ulink> will not help. </para></section><section><title>Why can't my Squid process grow beyond a certain size?</title><para>by [<ulink url="https://wiki.squid-cache.org/SquidFaq/SquidMemory/AdrianChadd#">AdrianChadd</ulink> Adrian Chadd] </para><para>A number of people are running Squid with more than a gigabyte of memory. Here are some things to keep in mind. </para><itemizedlist><listitem><para>The Operating System may put a limit on how much memory available per-process. Check the resource limits (/etc/security/limits.conf or similar under PAM systems, 'ulimit', etc.) </para></listitem><listitem><para>The Operating System may have a limit on the size of processes. 32-bit platforms are sometimes &quot;split&quot; to be 2gb process/2gb kernel; this can be changed to be 3gb process/1gb kernel through a kernel recompile or boot-time option. Check your operating system's documentation for specific details. </para></listitem><listitem><para>Some malloc implementations may not support &gt; 2gb of memory - eg dlmalloc. Don't use dlmalloc unless your platform is very broken (and then realise you won't be able to use &gt;2gb RAM using it.) </para></listitem><listitem><para>Make sure the Squid has been compiled to be a 64 bit binary (with modern Unix-like OSes you can use the 'file' command for this); some platforms may have a 64 bit kernel but a 32 bit userland, or the compiler may default to a 32 bit userland. </para></listitem></itemizedlist><!--rule (<hr>) is not applicable to DocBook--><para>Back to the <ulink url="https://wiki.squid-cache.org/SquidFaq/SquidMemory/SquidFaq#">SquidFaq</ulink> </para></section></article>